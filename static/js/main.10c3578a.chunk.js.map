{"version":3,"sources":["utils/ids.ts","contexts/ConnectionContext.tsx","utils/programIds.ts","components/DefaultModal/index.tsx","utils/merkle-tree.ts","contexts/AccountContext.tsx","utils/notifications.tsx","components/ExplorerLink/index.tsx","utils/eventEmitter.ts","components/Settings/index.tsx","utils/borsh.ts","components/Claim.tsx","contexts/WalletContext/wallet.less","contexts/WalletContext/WalletContext.tsx","contexts/ModalContext.tsx","contexts/ColorModeContext.tsx","components/Close.tsx","components/Create.tsx","components/DragAndDrop.tsx","components/Centered.tsx","components/ConnectButton.tsx","components/Header/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx","constants/math.ts","utils/utils.ts"],"names":["WRAPPED_SOL_MINT","Map","PublicKey","TOKEN_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","BPF_UPGRADE_LOADER_ID","MEMO_ID","SYSTEM","MERKLE_DISTRIBUTOR_ID","ENDPOINTS","name","endpoint","ChainId","MainnetBeta","Devnet","DEFAULT","ConnectionContext","React","createContext","setEndpoint","connection","Connection","env","tokens","tokenMap","ConnectionProvider","children","undefined","useLocalStorageState","useMemo","find","end","useState","setTokens","setTokenMap","useEffect","TokenListProvider","resolve","then","container","list","excludeByTag","filterByChainId","getList","knownMints","reduce","map","item","set","address","id","onAccountChange","Keypair","generate","publicKey","removeAccountChangeListener","onSlotChange","removeSlotChangeListener","Provider","value","useConnection","useContext","useConnectionConfig","context","SequenceType","getErrorForTransaction","txid","a","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","forEach","log","m","regex","exec","index","lastIndex","length","push","sendTransactionsWithManualRetry","wallet","instructions","signers","stopPoint","tries","lastInstructionsLength","toRemoveSigners","filter","instr","i","filteredSigners","_","slice","sendTransactionWithRetry","sendTransactions","StopOnFailure","console","error","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","transaction","Transaction","instruction","add","recentBlockhash","blockhash","setSigners","s","partialSign","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","slot","catch","reason","Promise","all","sendTransaction","awaitConfirmation","includesFeePayer","signTransaction","rawTransaction","serialize","options","skipPreflight","sendRawTransaction","awaitTransactionSignatureConfirmation","DEFAULT_TIMEOUT","confirmation","Error","err","notify","message","description","type","beforeSend","getUnixTs","Date","getTime","timeout","startTime","done","sleep","simulateResult","simulateTransaction","logs","line","startsWith","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","result","envFor","_rpcEndpoint","cfg","explorerLinkFor","queryStatus","status","confirmations","subId","reject","setTimeout","onSignature","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","programIds","token","associatedToken","bpf_upgrade_loader","system","memo","DefaultModal","props","bodyStyle","closeIcon","rest","style","background","borderRadius","display","flexDirection","alignItems","footer","width","MerkleTree","leafs","layers","this","hashes","nodeHash","acc","cur","idx","arr","nxt","internalHash","Array","proof","layer","sibling","Math","floor","getRoot","getProof","el","root","pair","equals","data","Buffer","from","keccak_256","digest","first","second","sort","compare","fst","snd","leaf","AccountsContext","pendingCalls","genericCache","pendingMintCalls","mintCache","getMintInfo","pubKey","getAccountInfo","info","deserializeMint","TokenAccountParser","buffer","deserializeAccount","pubkey","account","keyToAccountParser","cache","emitter","EventEmitter","query","parser","toBase58","get","obj","isActive","deserialize","registerParser","delete","Function","isNew","has","raiseCacheUpdated","key","raiseCacheDeleted","byParser","keys","queryMint","mint","getMint","addMint","UseNativeAccount","useWallet","nativeAccount","setNativeAccount","updateCache","useCallback","wrapped","owner","amount","u64","lamports","delegate","delegatedAmount","isInitialized","isFrozen","isNative","rentExemptReserve","closeAuthority","wrapNativeAccount","updateAccount","PRECACHED_OWNERS","Set","precacheUserTokenAccounts","getTokenAccountsByOwner","programId","AccountsProvider","tokenAccounts","setTokenAccounts","userAccounts","setUserAccounts","walletKey","selectUserAccounts","accounts","subs","onCache","tokenSubID","onProgramAccountChange","accountId","accountInfo","AccountLayout","span","removeProgramAccountChangeListener","decode","fromBuffer","delegateOption","state","isNativeOption","closeAuthorityOption","MintLayout","mintInfo","mintAuthorityOption","mintAuthority","supply","freezeAuthorityOption","freezeAuthority","placement","notification","color","opacity","backgroundColor","ExplorerLink","code","href","target","rel","title","Text","shortenAddress","CacheUpdateEvent","CacheDeleteEvent","MarketUpdateEvent","ids","Emitter","callback","on","removeListener","emit","Settings","additionalSettings","connected","disconnect","setVisible","useWalletModal","open","setModal","useModal","theme","useTheme","colorModeCtx","useColorMode","handleConnect","ModalEnum","WALLET","sx","minWidth","marginBottom","onChange","variant","onClick","marginLeft","navigator","clipboard","writeText","ml","toggleColorMode","palette","mode","BinaryReader","prototype","readPubkey","array","readFixedArray","BinaryWriter","writePubkey","writeFixedArray","toBuffer","readPubkeyAsString","base58","encode","writePubkeyAsString","idl","require","coder","Coder","Claim","params","queryString","parse","location","search","distributor","setDistributor","handle","setHandle","amountStr","setAmount","indexStr","setIndex","pin","pinStr","setPin","proofStr","setProof","allFieldsPopulated","editable","setEditable","submit","preventDefault","Number","split","isNaN","distributorKey","distributorAccount","distributorInfo","b","ret","bs58","findProgramAddress","claimantPda","BN","toArray","verifyClaim","claimStatus","cbump","distributorTokenKey","walletTokenKey","setup","Token","createAssociatedTokenAccountInstruction","claimAirdrop","TransactionInstruction","isSigner","isWritable","SystemProgram","sha256","concat","claimResult","spacing","label","disabled","multiline","wrap","WalletModalContext","WalletModal","wallets","selected","select","visible","setShowWallets","close","onCancel","height","textAlign","verticalAlign","fontWeight","fontSize","lineHeight","size","icon","alt","src","marginRight","float","WalletModalProvider","setConnected","keyToDisplay","substring","WalletProvider","getPhantomWallet","getSolflareWallet","getTorusWallet","clientId","getLedgerWallet","getSolongWallet","getMathWallet","getSolletWallet","onError","autoConnect","ModalContext","removeModal","ColorModeContext","ColorModeContextProvider","setMode","prevMode","Close","baseKey","setBaseKey","base","fromSecretKey","Uint8Array","dbump","creatorTokenKey","closeDistributor","closeResult","randomBytes","buf","window","crypto","getRandomValues","WHITESPACE","setupSender","method","auth","source","mailchimp","Mailchimp","mintUrl","from_email","subject","text","url","to","email","messages","send","response","reject_reason","setupMailchimp","parseClaimants","input","bump","pda","reactModal","renderModal","document","createElement","body","appendChild","destroyModal","ReactDOM","unmountComponentAtNode","removeChild","onSubmit","onDismiss","render","show","displayModal","finally","hideModal","Create","localStorage","getItem","setMint","commMethod","setMethod","commAuth","setCommAuth","commSource","setCommSource","filename","setFilename","setText","claimURLs","setClaimURLs","mintKey","mintAccount","displayMintTokens","pow","decimals","claimants","mightHaveExisting","c","click","opt","resendOnly","sender","totalClaim","creatorTokenAccount","creatorTokenInfo","toNumber","claimant","seeds","tree","verifyProof","join","origin","pathname","maxHeight","border","component","scope","shouldSend","initDistributor","createDistributorTokenAccount","transferToATA","createTransferInstruction","createResult","handleFiles","files","file","reader","FileReader","onload","readAsText","fileUpload","Fragment","handleDrop","direction","justifyContent","alignContent","padding","marginTop","hidden","createAirdrop","hyperLinkData","encoded","encodeURIComponent","setItem","fullWidth","labelId","commAuthorization","secretKey","download","underline","DragAndDrop","dropRef","useRef","dragCounter","setDragCounter","dragging","setDragging","handleDrag","stopPropagation","handleDragIn","dataTransfer","items","handleDragOut","remainingDrags","clearData","node","current","addEventListener","removeEventListener","ref","Centered","position","top","left","ConnectButton","isConnected","onClickConnect","onClickChange","restProps","ButtonGroup","Header","handleChange","AppBar","Box","bgcolor","Stack","Link","Button","flexGrow","About","App","disabledColor","createTheme","action","className","ThemeProvider","CssBaseline","path","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","getElementById","TEN","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","defaultState","storedState","setState","setLocalStorageState","newState","removeItem","chars","chunks","apply","ceil","currency","ms"],"mappings":"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","file":"static/js/main.10c3578a.chunk.js","sourcesContent":["import { PublicKey, AccountInfo } from '@solana/web3.js';\n\nexport type StringPublicKey = string;\n\nexport class LazyAccountInfoProxy<T> {\n  executable: boolean = false;\n  owner: StringPublicKey = '';\n  lamports: number = 0;\n\n  get data() {\n    //\n    return undefined as unknown as T;\n  }\n}\n\nexport interface LazyAccountInfo {\n  executable: boolean;\n  owner: StringPublicKey;\n  lamports: number;\n  data: [string, string];\n}\n\nconst PubKeysInternedMap = new Map<string, PublicKey>();\n\nexport const toPublicKey = (key: string | PublicKey) => {\n  if (typeof key !== 'string') {\n    return key;\n  }\n\n  let result = PubKeysInternedMap.get(key);\n  if (!result) {\n    result = new PublicKey(key);\n    PubKeysInternedMap.set(key, result);\n  }\n\n  return result;\n};\n\nexport interface PublicKeyStringAndAccount<T> {\n  pubkey: string;\n  account: AccountInfo<T>;\n}\n\nexport const WRAPPED_SOL_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n\nexport const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const BPF_UPGRADE_LOADER_ID = new PublicKey('BPFLoaderUpgradeab1e11111111111111111111111');\n\nexport const MEMO_ID = new PublicKey('MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr');\n\nexport const SYSTEM = new PublicKey('11111111111111111111111111111111');\n\nexport const MERKLE_DISTRIBUTOR_ID = new PublicKey(\"2BXKBuQPRVjV9e9qC2wAVJgFLWDH8MULRQ5W5ABmJj45\");\n","import { sleep, useLocalStorageState } from \"../utils/utils\";\nimport {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from \"@solana/web3.js\";\nimport React, { useContext, useEffect, useMemo, useState } from \"react\";\nimport { notify } from \"../utils/notifications\";\nimport { ExplorerLink } from \"../components/ExplorerLink\";\nimport {\n  TokenInfo,\n  TokenListProvider,\n  ENV as ChainId,\n} from \"@solana/spl-token-registry\";\nimport { WalletSigner } from \"./WalletContext/WalletContext\";\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport type ENV = \"mainnet-beta\" | \"testnet\" | \"devnet\" | \"localnet\";\n\nexport const ENDPOINTS = [\n  {\n    name: \"mainnet-beta\" as ENV,\n    endpoint: \"https://api.mainnet-beta.solana.com\",\n    ChainId: ChainId.MainnetBeta,\n  },\n  {\n    name: \"devnet\" as ENV,\n    endpoint: \"https://api.devnet.solana.com\",\n    ChainId: ChainId.Devnet,\n  },\n];\n\nconst DEFAULT = ENDPOINTS[0].endpoint;\n\ninterface ConnectionConfig {\n  connection: Connection;\n  endpoint: string;\n  env: ENV;\n  setEndpoint: (val: string) => void;\n  tokens: TokenInfo[];\n  tokenMap: Map<string, TokenInfo>;\n}\n\nconst ConnectionContext = React.createContext<ConnectionConfig>({\n  endpoint: DEFAULT,\n  setEndpoint: () => {},\n  connection: new Connection(DEFAULT, \"recent\"),\n  env: ENDPOINTS[0].name,\n  tokens: [],\n  tokenMap: new Map<string, TokenInfo>(),\n});\n\nexport function ConnectionProvider({ children = undefined as any }) {\n  const [endpoint, setEndpoint] = useLocalStorageState(\n    \"connectionEndpoint\",\n    ENDPOINTS[0].endpoint\n  );\n\n  const connection = useMemo(\n    () => new Connection(endpoint, \"recent\"),\n    [endpoint]\n  );\n\n  const env =\n    ENDPOINTS.find((end) => end.endpoint === endpoint)?.name ||\n    ENDPOINTS[0].name;\n\n  const [tokens, setTokens] = useState<TokenInfo[]>([]);\n  const [tokenMap, setTokenMap] = useState<Map<string, TokenInfo>>(new Map());\n  useEffect(() => {\n    // fetch token files\n    new TokenListProvider().resolve().then((container) => {\n      const list = container\n        .excludeByTag(\"nft\")\n        .filterByChainId(\n          ENDPOINTS.find((end) => end.endpoint === endpoint)?.ChainId ||\n            ChainId.MainnetBeta\n        )\n        .getList();\n\n      const knownMints = [...list].reduce((map, item) => {\n        map.set(item.address, item);\n        return map;\n      }, new Map<string, TokenInfo>());\n\n      setTokenMap(knownMints);\n      setTokens(list);\n    });\n  }, [env, endpoint]);\n\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n  // This is a hack to prevent the list from every getting empty\n  useEffect(() => {\n    const id = connection.onAccountChange(\n      Keypair.generate().publicKey,\n      () => {}\n    );\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = connection.onSlotChange(() => null);\n    return () => {\n      connection.removeSlotChangeListener(id);\n    };\n  }, [connection]);\n\n  return (\n    <ConnectionContext.Provider\n      value={{\n        endpoint,\n        setEndpoint,\n        connection,\n        tokens,\n        tokenMap,\n        env,\n      }}\n    >\n      {children}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport function useConnection() {\n  return useContext(ConnectionContext).connection as Connection;\n}\n\nexport function useConnectionConfig() {\n  const context = useContext(ConnectionContext);\n  return {\n    endpoint: context.endpoint,\n    setEndpoint: context.setEndpoint,\n    env: context.env,\n    tokens: context.tokens,\n    tokenMap: context.tokenMap,\n  };\n}\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: WalletSigner,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][]\n) {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength: any = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n\n \n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          \"single\"\n        );\n        stopPoint = 1;\n      } else {\n        stopPoint = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          \"single\"\n        );\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      \"Died on \",\n      stopPoint,\n      \"retrying from instruction\",\n      instructions[stopPoint],\n      \"instructions length is\",\n      instructions.length\n    );\n    lastInstructionsLength = instructions.length;\n  }\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: WalletSigner,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = \"singleGossip\",\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator\n): Promise<number> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = [];\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  let breakEarlyObject = { breakEarly: false, i: 0 };\n  console.log(\n    \"Signed txns length\",\n    signedTxns.length,\n    \"vs handed in length\",\n    instructionSet.length\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    signedTxnPromise\n      .then(({ txid, slot }) => {\n        successCallback(txid, i);\n      })\n      .catch((reason) => {\n        // @ts-ignore\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          breakEarlyObject.breakEarly = true;\n          breakEarlyObject.i = i;\n        }\n      });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise;\n      } catch (e) {\n        console.log(\"Caught failure\", e);\n        if (breakEarlyObject.breakEarly) {\n          console.log(\"Died on \", breakEarlyObject.i);\n          return breakEarlyObject.i; // Return the txn we failed on by index\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    await Promise.all(pendingTxns);\n  }\n\n  return signedTxns.length;\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: WalletSigner,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n      notify({\n        message: \"Transaction failed...\",\n        description: (\n          <>\n            {errors.map((err) => (\n              <div>{err}</div>\n            ))}\n            <ExplorerLink address={txid} type=\"transaction\" />\n          </>\n        ),\n        type: \"error\",\n      });\n\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: WalletSigner,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void\n) : Promise<string| { txid: string; slot: number }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    try {\n      transaction = await wallet.signTransaction(transaction);\n    } catch {\n      return \"Failed to sign transaction\";\n    }\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n  console.log(\"About to send\");\n  try {\n    const { txid, slot } = await sendSignedTransaction({\n      connection,\n      signedTransaction: transaction,\n    });\n\n    return { txid, slot };\n  } catch (error) {\n    console.error(error);\n    return \"See console logs\";\n  }\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    }\n  );\n\n  console.log(\"Started awaiting confirmation for\", txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      \"recent\",\n      true\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error(\"Transaction failed: Custom instruction error\");\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err) {\n    console.error(\"Timeout Error caught\", err);\n    if ((err as any).timeout) {\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, \"single\")\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith(\"Program log: \")) {\n            throw new Error(\n              \"Transaction failed: \" + line.slice(\"Program log: \".length)\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log(\"Latency\", txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config: any = { encoding: \"base64\", commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\n  if (res.error) {\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\n  }\n  return res.result;\n}\n\nexport const envFor = (\n  connection: Connection\n) : string => {\n  let endpoint = (connection as any)._rpcEndpoint;\n  let env = \"mainnet-beta\";\n  for (const cfg of ENDPOINTS) {\n    if (cfg.endpoint === endpoint) {\n      env = cfg.name;\n      break;\n    }\n  }\n  return env;\n}\n\nexport const explorerLinkFor = (\n  txid: TransactionSignature,\n  connection: Connection\n) : string => {\n  return `https://explorer.solana.com/tx/${txid}?cluster=${envFor(connection)}`;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = \"recent\",\n  queryStatus = false\n): Promise<SignatureStatus | null | void> {\n\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          console.log(explorerLinkFor(txid, connection));\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\n","import {\n  TOKEN_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  BPF_UPGRADE_LOADER_ID,\n  SYSTEM,\n  MEMO_ID,\n} from './ids';\n\nexport const setProgramIds = async () => {};\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n    associatedToken: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    bpf_upgrade_loader: BPF_UPGRADE_LOADER_ID,\n    system: SYSTEM,\n    memo: MEMO_ID,\n    // store: STORE,\n  };\n};\n","import React from \"react\";\nimport { Modal } from \"antd\";\n\nimport \"./index.css\";\n\nexport const DefaultModal = (props: any) => {\n  const { children, closeIcon, bodyStyle, style, ...rest } = props;\n\n  return (\n    <Modal\n      style={{ background: \"transparent\", borderRadius: 16 }}\n      bodyStyle={{\n        background: \"#333333\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        ...bodyStyle,\n      }}\n      footer={null}\n      width={400}\n      {...rest}\n    >\n      {children}\n    </Modal>\n  );\n};\n","import { keccak_256 } from \"js-sha3\";\n\nexport class MerkleTree {\n  leafs: Array<Buffer>;\n  layers: Array<Array<Buffer>>;\n\n  constructor(leafs : Array<Buffer>) {\n    this.leafs = leafs.slice();\n    this.layers = [];\n\n    let hashes = this.leafs.map(MerkleTree.nodeHash);\n    while (hashes.length > 0) {\n      console.log(\"Hashes\", this.layers.length, hashes);\n      this.layers.push(hashes.slice());\n      if (hashes.length === 1) break;\n      hashes = hashes.reduce((acc, cur, idx, arr) => {\n        if (idx % 2 === 0) {\n          const nxt = arr[idx + 1];\n          acc.push(MerkleTree.internalHash(cur, nxt));\n        }\n        return acc;\n      }, Array<Buffer>());\n    }\n  }\n\n  static nodeHash(\n    data : Buffer,\n  ) : Buffer {\n    return Buffer.from(keccak_256.digest([0x00, ...data]));\n  }\n\n\n  static internalHash(\n    first : Buffer,\n    second : Buffer | undefined,\n  ) : Buffer {\n    if (!second) return first;\n    const [fst, snd] = [first, second].sort(Buffer.compare)\n    return Buffer.from(\n      keccak_256.digest([0x01, ...fst, ...snd])\n    );\n  }\n\n  getRoot() : Buffer {\n    return this.layers[this.layers.length - 1][0];\n  }\n\n  getProof(idx : number) : Buffer[] {\n    return this.layers.reduce((proof, layer) => {\n      const sibling = idx ^ 1;\n      if (sibling < layer.length) {\n        proof.push(layer[sibling]);\n      }\n\n      idx = Math.floor(idx / 2);\n\n      return proof;\n    }, []);\n  }\n\n  getHexRoot(): string {\n    return this.getRoot().toString(\"hex\");\n  }\n\n  getHexProof(idx : number) : string[] {\n    return this.getProof(idx).map((el) => el.toString(\"hex\"));\n  }\n\n  verifyProof(\n    idx : number,\n    proof : Buffer[],\n    root : Buffer\n  ): boolean {\n    let pair = MerkleTree.nodeHash(this.leafs[idx]);\n    for (const item of proof) {\n      pair = MerkleTree.internalHash(pair, item);\n    }\n\n    return pair.equals(root);\n  }\n\n  static verifyClaim(\n    leaf : Buffer,\n    proof : Buffer[],\n    root : Buffer\n  ): boolean {\n    let pair = MerkleTree.nodeHash(leaf);\n    for (const item of proof) {\n      pair = MerkleTree.internalHash(pair, item);\n    }\n\n    return pair.equals(root);\n  }\n\n}\n","import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport { useConnection } from './ConnectionContext';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport { AccountLayout, MintInfo, MintLayout, u64 } from '@solana/spl-token';\nimport { TokenAccount } from '../models';\nimport { chunks } from '../utils/utils';\nimport { EventEmitter } from '../utils/eventEmitter';\nimport { StringPublicKey, WRAPPED_SOL_MINT } from '../utils/ids';\nimport { programIds } from '../utils/programIds';\n\nconst AccountsContext = React.createContext<any>(null);\n\nconst pendingCalls = new Map<string, Promise<ParsedAccountBase>>();\nconst genericCache = new Map<string, ParsedAccountBase>();\nconst pendingMintCalls = new Map<string, Promise<MintInfo>>();\nconst mintCache = new Map<string, MintInfo>();\n\nexport interface ParsedAccountBase {\n  pubkey: StringPublicKey;\n  account: AccountInfo<Buffer>;\n  info: any; // TODO: change to unknown\n}\n\nexport type AccountParser = (\n  pubkey: StringPublicKey,\n  data: AccountInfo<Buffer>,\n) => ParsedAccountBase | undefined;\n\nexport interface ParsedAccount<T> extends ParsedAccountBase {\n  info: T;\n}\n\nconst getMintInfo = async (connection: Connection, pubKey: PublicKey) => {\n  const info = await connection.getAccountInfo(pubKey);\n  if (info === null) {\n    throw new Error('Failed to find mint account');\n  }\n\n  const data = Buffer.from(info.data);\n\n  return deserializeMint(data);\n};\n\nexport const MintParser = (pubKey: string, info: AccountInfo<Buffer>) => {\n  const buffer = Buffer.from(info.data);\n\n  const data = deserializeMint(buffer);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: data,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const TokenAccountParser = (\n  pubKey: string,\n  info: AccountInfo<Buffer>,\n) => {\n  // Sometimes a wrapped sol account gets closed, goes to 0 length,\n  // triggers an update over wss which triggers this guy to get called\n  // since your UI already logged that pubkey as a token account. Check for length.\n  if (info.data.length > 0) {\n    const buffer = Buffer.from(info.data);\n    const data = deserializeAccount(buffer);\n\n    const details = {\n      pubkey: pubKey,\n      account: {\n        ...info,\n      },\n      info: data,\n    } as TokenAccount;\n\n    return details;\n  }\n};\n\nexport const GenericAccountParser = (\n  pubKey: string,\n  info: AccountInfo<Buffer>,\n) => {\n  const buffer = Buffer.from(info.data);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: buffer,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const keyToAccountParser = new Map<string, AccountParser>();\n\nexport const cache = {\n  emitter: new EventEmitter(),\n  query: async (\n    connection: Connection,\n    pubKey: string | PublicKey,\n    parser?: AccountParser,\n  ) => {\n    let id: PublicKey;\n    if (typeof pubKey === 'string') {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n\n    let account = genericCache.get(address);\n    if (account) {\n      return account;\n    }\n\n    let query = pendingCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    // TODO: refactor to use multiple accounts query with flush like behavior\n    query = connection.getAccountInfo(id).then(data => {\n      if (!data) {\n        throw new Error('Account not found');\n      }\n\n      return cache.add(id, data, parser);\n    }) as Promise<TokenAccount>;\n    pendingCalls.set(address, query as any);\n\n    return query;\n  },\n  add: (\n    id: PublicKey | string,\n    obj: AccountInfo<Buffer>,\n    parser?: AccountParser,\n    isActive?: boolean | undefined | ((parsed: any) => boolean),\n  ) => {\n    const address = typeof id === 'string' ? id : id?.toBase58();\n    const deserialize = parser ? parser : keyToAccountParser.get(address);\n    if (!deserialize) {\n      throw new Error(\n        'Deserializer needs to be registered or passed as a parameter',\n      );\n    }\n\n    cache.registerParser(id, deserialize);\n    pendingCalls.delete(address);\n    const account = deserialize(address, obj);\n    if (!account) {\n      return;\n    }\n\n    if (isActive === undefined) isActive = true;\n    else if (isActive instanceof Function) isActive = isActive(account);\n\n    const isNew = !genericCache.has(address);\n\n    genericCache.set(address, account);\n    cache.emitter.raiseCacheUpdated(address, isNew, deserialize, isActive);\n    return account;\n  },\n  get: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== 'string') {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return genericCache.get(key);\n  },\n  delete: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== 'string') {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    if (genericCache.get(key)) {\n      genericCache.delete(key);\n      cache.emitter.raiseCacheDeleted(key);\n      return true;\n    }\n    return false;\n  },\n\n  byParser: (parser: AccountParser) => {\n    const result: string[] = [];\n    for (const id of keyToAccountParser.keys()) {\n      if (keyToAccountParser.get(id) === parser) {\n        result.push(id);\n      }\n    }\n\n    return result;\n  },\n  registerParser: (pubkey: PublicKey | string, parser: AccountParser) => {\n    if (pubkey) {\n      const address = typeof pubkey === 'string' ? pubkey : pubkey?.toBase58();\n      keyToAccountParser.set(address, parser);\n    }\n\n    return pubkey;\n  },\n  queryMint: async (connection: Connection, pubKey: string | PublicKey) => {\n    let id: PublicKey;\n    if (typeof pubKey === 'string') {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n    let mint = mintCache.get(address);\n    if (mint) {\n      return mint;\n    }\n\n    let query = pendingMintCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    query = getMintInfo(connection, id).then(data => {\n      pendingMintCalls.delete(address);\n\n      mintCache.set(address, data);\n      return data;\n    }) as Promise<MintInfo>;\n    pendingMintCalls.set(address, query as any);\n\n    return query;\n  },\n  getMint: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== 'string') {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return mintCache.get(key);\n  },\n  addMint: (pubKey: PublicKey, obj: AccountInfo<Buffer>) => {\n    const mint = deserializeMint(obj.data);\n    const id = pubKey.toBase58();\n    mintCache.set(id, mint);\n    return mint;\n  },\n};\n\nexport const useAccountsContext = () => {\n  const context = useContext(AccountsContext);\n\n  return context;\n};\n\nfunction wrapNativeAccount(\n  pubkey: string,\n  account?: AccountInfo<Buffer>,\n): TokenAccount | undefined {\n  if (!account) {\n    return undefined;\n  }\n\n  const key = new PublicKey(pubkey);\n\n  return {\n    pubkey: pubkey,\n    account,\n    info: {\n      address: key,\n      mint: WRAPPED_SOL_MINT,\n      owner: key,\n      amount: new u64(account.lamports),\n      delegate: null,\n      delegatedAmount: new u64(0),\n      isInitialized: true,\n      isFrozen: false,\n      isNative: true,\n      rentExemptReserve: null,\n      closeAuthority: null,\n    },\n  };\n}\n\nexport const getCachedAccount = (\n  predicate: (account: TokenAccount) => boolean,\n) => {\n  for (const account of genericCache.values()) {\n    if (predicate(account)) {\n      return account as TokenAccount;\n    }\n  }\n};\n\nconst UseNativeAccount = () => {\n  const connection = useConnection();\n  const { publicKey } = useWallet();\n\n  const [nativeAccount, setNativeAccount] = useState<AccountInfo<Buffer>>();\n\n  const updateCache = useCallback(\n    account => {\n      if (publicKey) {\n        const wrapped = wrapNativeAccount(publicKey.toBase58(), account);\n        if (wrapped !== undefined) {\n          const id = publicKey.toBase58();\n          cache.registerParser(id, TokenAccountParser);\n          genericCache.set(id, wrapped as TokenAccount);\n          cache.emitter.raiseCacheUpdated(id, false, TokenAccountParser, true);\n        }\n      }\n    },\n    [publicKey],\n  );\n\n  useEffect(() => {\n    let subId = 0;\n    const updateAccount = (account: AccountInfo<Buffer> | null) => {\n      if (account) {\n        updateCache(account);\n        setNativeAccount(account);\n      }\n    };\n\n    (async () => {\n      if (!connection || !publicKey) {\n        return;\n      }\n\n      try {\n        const account = await connection.getAccountInfo(publicKey);\n        updateAccount(account);\n      } catch {\n        return;\n      }\n\n      subId = connection.onAccountChange(publicKey, updateAccount);\n    })();\n\n    return () => {\n      if (subId) {\n        connection.removeAccountChangeListener(subId);\n      }\n    };\n  }, [setNativeAccount, publicKey, connection, updateCache]);\n\n  return { nativeAccount };\n};\n\nconst PRECACHED_OWNERS = new Set<string>();\nconst precacheUserTokenAccounts = async (\n  connection: Connection,\n  owner?: PublicKey,\n) => {\n  if (!owner) {\n    return;\n  }\n\n  // used for filtering account updates over websocket\n  PRECACHED_OWNERS.add(owner.toBase58());\n\n  // user accounts are updated via ws subscription\n  const accounts = await connection.getTokenAccountsByOwner(owner, {\n    programId: programIds().token,\n  });\n\n  accounts.value.forEach(info => {\n    cache.add(info.pubkey.toBase58(), info.account, TokenAccountParser);\n  });\n};\n\nexport function AccountsProvider({ children = null as any }) {\n  const connection = useConnection();\n  const { publicKey } = useWallet();\n  const [tokenAccounts, setTokenAccounts] = useState<TokenAccount[]>([]);\n  const [userAccounts, setUserAccounts] = useState<TokenAccount[]>([]);\n  const { nativeAccount } = UseNativeAccount();\n  const walletKey = publicKey?.toBase58();\n\n  const selectUserAccounts = useCallback(() => {\n    return cache\n      .byParser(TokenAccountParser)\n      .map(id => cache.get(id))\n      .filter(a => a && a.info.owner.toBase58() === walletKey)\n      .map(a => a as TokenAccount);\n  }, [walletKey]);\n\n  useEffect(() => {\n    const accounts = selectUserAccounts().filter(\n      a => a !== undefined,\n    ) as TokenAccount[];\n    setUserAccounts(accounts);\n  }, [nativeAccount, tokenAccounts, selectUserAccounts]);\n\n  useEffect(() => {\n    const subs: number[] = [];\n    cache.emitter.onCache(args => {\n      if (args.isNew && args.isActive) {\n        let id = args.id;\n        let deserialize = args.parser;\n        connection.onAccountChange(new PublicKey(id), info => {\n          cache.add(id, info, deserialize);\n        });\n      }\n    });\n\n    return () => {\n      subs.forEach(id => connection.removeAccountChangeListener(id));\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    if (!connection || !publicKey) {\n      setTokenAccounts([]);\n    } else {\n      precacheUserTokenAccounts(connection, publicKey).then(() => {\n        setTokenAccounts(selectUserAccounts());\n      });\n\n      // This can return different types of accounts: token-account, mint, multisig\n      // TODO: web3.js expose ability to filter.\n      // this should use only filter syntax to only get accounts that are owned by user\n      const tokenSubID = connection.onProgramAccountChange(\n        programIds().token,\n        info => {\n          // TODO: fix type in web3.js\n          const id = info.accountId as unknown as string;\n          // TODO: do we need a better way to identify layout (maybe a enum identifing type?)\n          if (info.accountInfo.data.length === AccountLayout.span) {\n            const data = deserializeAccount(info.accountInfo.data);\n\n            if (PRECACHED_OWNERS.has(data.owner.toBase58())) {\n              cache.add(id, info.accountInfo, TokenAccountParser);\n              setTokenAccounts(selectUserAccounts());\n            }\n          }\n        },\n        'singleGossip',\n      );\n\n      return () => {\n        connection.removeProgramAccountChangeListener(tokenSubID);\n      };\n    }\n  }, [connection, publicKey, selectUserAccounts]);\n\n  return (\n    <AccountsContext.Provider\n      value={{\n        userAccounts,\n        nativeAccount,\n      }}\n    >\n      {children}\n    </AccountsContext.Provider>\n  );\n}\n\nexport function useNativeAccount() {\n  const context = useContext(AccountsContext);\n  return {\n    account: context.nativeAccount as AccountInfo<Buffer>,\n  };\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const result = await Promise.all(\n    chunks(keys, 99).map(chunk =>\n      getMultipleAccountsCore(connection, chunk, commitment),\n    ),\n  );\n\n  const array = result\n    .map(\n      a =>\n        a.array.map(acc => {\n          if (!acc) {\n            return undefined;\n          }\n\n          const { data, ...rest } = acc;\n          const obj = {\n            ...rest,\n            data: Buffer.from(data[0], 'base64'),\n          } as AccountInfo<Buffer>;\n          return obj;\n        }) as AccountInfo<Buffer>[],\n    )\n    .flat();\n  return { keys, array };\n};\n\nconst getMultipleAccountsCore = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const args = connection._buildArgs([keys], commitment, 'base64');\n\n  const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\n  if (unsafeRes.error) {\n    throw new Error(\n      'failed to get info about account ' + unsafeRes.error.message,\n    );\n  }\n\n  if (unsafeRes.result.value) {\n    const array = unsafeRes.result.value as AccountInfo<string[]>[];\n    return { keys, array };\n  }\n\n  // TODO: fix\n  throw new Error();\n};\n\nexport function useMint(key?: string | PublicKey) {\n  const connection = useConnection();\n  const [mint, setMint] = useState<MintInfo>();\n\n  const id = typeof key === 'string' ? key : key?.toBase58();\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n\n    cache\n      .query(connection, id, MintParser)\n      .then(acc => setMint(acc.info as any))\n      .catch(err => console.log(err));\n\n    const dispose = cache.emitter.onCache(e => {\n      const event = e;\n      if (event.id === id) {\n        cache\n          .query(connection, id, MintParser)\n          .then(mint => setMint(mint.info as any));\n      }\n    });\n    return () => {\n      dispose();\n    };\n  }, [connection, id]);\n\n  return mint;\n}\n\nexport function useAccount(pubKey?: PublicKey) {\n  const connection = useConnection();\n  const [account, setAccount] = useState<TokenAccount>();\n\n  const key = pubKey?.toBase58();\n  useEffect(() => {\n    const query = async () => {\n      try {\n        if (!key) {\n          return;\n        }\n\n        const acc = await cache\n          .query(connection, key, TokenAccountParser)\n          .catch(err => console.log(err));\n        if (acc) {\n          setAccount(acc);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    query();\n\n    const dispose = cache.emitter.onCache(e => {\n      const event = e;\n      if (event.id === key) {\n        query();\n      }\n    });\n    return () => {\n      dispose();\n    };\n  }, [connection, key]);\n\n  return account;\n}\n\n// TODO: expose in spl package\nexport const deserializeAccount = (data: Buffer) => {\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n\n// TODO: expose in spl package\nexport const deserializeMint = (data: Buffer) => {\n  if (data.length !== MintLayout.span) {\n    throw new Error('Not a valid Mint');\n  }\n\n  const mintInfo = MintLayout.decode(data);\n\n  if (mintInfo.mintAuthorityOption === 0) {\n    mintInfo.mintAuthority = null;\n  } else {\n    mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\n  }\n\n  mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n  mintInfo.isInitialized = mintInfo.isInitialized !== 0;\n\n  if (mintInfo.freezeAuthorityOption === 0) {\n    mintInfo.freezeAuthority = null;\n  } else {\n    mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n  }\n\n  return mintInfo as MintInfo;\n};\n","import React from 'react';\nimport { notification } from 'antd';\n// import Link from '../components/Link';\n\nexport function notify({\n  message = '',\n  description = undefined as any,\n  txid = '',\n  type = 'info',\n  placement = 'bottomLeft',\n}) {\n  if (txid) {\n    //   <Link\n    //     external\n    //     to={'https://explorer.solana.com/tx/' + txid}\n    //     style={{ color: '#0000ff' }}\n    //   >\n    //     View transaction {txid.slice(0, 8)}...{txid.slice(txid.length - 8)}\n    //   </Link>\n\n    description = <></>;\n  }\n  (notification as any)[type]({\n    message: <span style={{ color: 'black' }}>{message}</span>,\n    description: (\n      <span style={{ color: 'black', opacity: 0.5 }}>{description}</span>\n    ),\n    placement,\n    style: {\n      backgroundColor: 'white',\n    },\n  });\n}\n","import React from 'react';\nimport { Typography } from 'antd';\nimport { shortenAddress } from '../../utils/utils';\nimport { PublicKey } from '@solana/web3.js';\n\nexport const ExplorerLink = (props: {\n  address: string | PublicKey;\n  type: string;\n  code?: boolean;\n  style?: React.CSSProperties;\n  length?: number;\n}) => {\n  const { type, code } = props;\n\n  const address =\n    typeof props.address === 'string'\n      ? props.address\n      : props.address?.toBase58();\n\n  if (!address) {\n    return null;\n  }\n\n  const length = props.length ?? 9;\n\n  return (\n    <a\n      href={`https://explorer.solana.com/${type}/${address}`}\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      title={address}\n      style={props.style}\n    >\n      {code ? (\n        <Typography.Text style={props.style} code>\n          {shortenAddress(address, length)}\n        </Typography.Text>\n      ) : (\n        shortenAddress(address, length)\n      )}\n    </a>\n  );\n};\n","import { EventEmitter as Emitter } from 'eventemitter3';\n\nexport class CacheUpdateEvent {\n  static type = 'CacheUpdate';\n  id: string;\n  parser: any;\n  isNew: boolean;\n  isActive: boolean;\n  constructor(id: string, isNew: boolean, parser: any, isActive: boolean) {\n    this.id = id;\n    this.parser = parser;\n    this.isNew = isNew;\n    this.isActive = isActive;\n  }\n}\n\nexport class CacheDeleteEvent {\n  static type = 'CacheUpdate';\n  id: string;\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport class MarketUpdateEvent {\n  static type = 'MarketUpdate';\n  ids: Set<string>;\n  constructor(ids: Set<string>) {\n    this.ids = ids;\n  }\n}\n\nexport class EventEmitter {\n  private emitter = new Emitter();\n\n  onMarket(callback: (args: MarketUpdateEvent) => void) {\n    this.emitter.on(MarketUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(MarketUpdateEvent.type, callback);\n  }\n\n  onCache(callback: (args: CacheUpdateEvent) => void) {\n    this.emitter.on(CacheUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(CacheUpdateEvent.type, callback);\n  }\n\n  raiseMarketUpdated(ids: Set<string>) {\n    this.emitter.emit(MarketUpdateEvent.type, new MarketUpdateEvent(ids));\n  }\n\n  raiseCacheUpdated(\n    id: string,\n    isNew: boolean,\n    parser: any,\n    isActive: boolean,\n  ) {\n    this.emitter.emit(\n      CacheUpdateEvent.type,\n      new CacheUpdateEvent(id, isNew, parser, isActive),\n    );\n  }\n\n  raiseCacheDeleted(id: string) {\n    this.emitter.emit(CacheDeleteEvent.type, new CacheDeleteEvent(id));\n  }\n}\n","import { useCallback } from \"react\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { ENDPOINTS, useColorMode, useConnectionConfig } from \"../../contexts\";\nimport { notify, shortenAddress } from \"../../utils\";\nimport { CopyOutlined } from \"@ant-design/icons\";\nimport { ModalEnum, useModal, useWalletModal } from \"../../contexts\";\nimport { Box } from \"@mui/system\";\nimport { Button, FormControl, NativeSelect } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Brightness4Icon from \"@mui/icons-material/Brightness4\";\nimport Brightness7Icon from \"@mui/icons-material/Brightness7\";\n\nexport const Settings = ({\n  additionalSettings,\n}: {\n  additionalSettings?: JSX.Element;\n}) => {\n  const { connected, disconnect, publicKey } = useWallet();\n  const { setEndpoint, env, endpoint } = useConnectionConfig();\n  const { setVisible } = useWalletModal();\n  const open = useCallback(() => setVisible(true), [setVisible]);\n  const { setModal } = useModal();\n  const theme = useTheme();\n  const colorModeCtx = useColorMode();\n\n  const handleConnect = useCallback(() => {\n    setModal(ModalEnum.WALLET);\n    setVisible(true);\n  }, [setModal, setVisible]);\n\n  return (\n    <>\n      <Box sx={{ display: \"flex\", minWidth: \"100%\" }}>\n        {!connected && (\n          <>\n            <FormControl>\n              <NativeSelect\n                style={{ marginBottom: 5 }}\n                onChange={(e) => {\n                  setEndpoint(e.target.value);\n                }}\n                value={endpoint}\n              >\n                {ENDPOINTS.map(({ name, endpoint }) => (\n                  <option key={name} value={endpoint}>{name}</option>\n                ))}\n              </NativeSelect>\n            </FormControl>\n            <Button\n              variant=\"contained\"\n              onClick={handleConnect}\n              sx={{ marginLeft: \"10px\" }}\n            >\n              Connect\n            </Button>\n          </>\n        )}\n        {connected && (\n          <>\n            {publicKey && (\n              <Button\n                variant=\"outlined\"\n                onClick={async () => {\n                  if (publicKey) {\n                    await navigator.clipboard.writeText(publicKey.toBase58());\n                    notify({\n                      message: \"Wallet update\",\n                      description: \"Address copied to clipboard\",\n                    });\n                  }\n                }}\n              >\n                <CopyOutlined />\n                {shortenAddress(publicKey.toBase58())}\n              </Button>\n            )}\n            <Button\n              variant=\"outlined\"\n              onClick={open}\n              sx={{ marginLeft: \"10px\" }}\n            >\n              Change Wallet\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"error\"\n              onClick={() => disconnect().catch()}\n              sx={{ marginLeft: \"10px\" }}\n            >\n              Disconnect ({env})\n            </Button>\n          </>\n        )}\n        <IconButton\n          sx={{ ml: 1 }}\n          onClick={colorModeCtx.toggleColorMode}\n          color=\"inherit\"\n        >\n          {theme.palette.mode === \"dark\" ? (\n            <Brightness7Icon />\n          ) : (\n            <Brightness4Icon />\n          )}\n        </IconButton>\n        {additionalSettings}\n      </Box>\n    </>\n  );\n};\n","import { PublicKey } from '@solana/web3.js';\nimport { BinaryReader, BinaryWriter } from 'borsh';\nimport base58 from 'bs58';\nimport { StringPublicKey } from './ids';\n\nexport const extendBorsh = () => {\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array) as StringPublicKey;\n  };\n\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: StringPublicKey,\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\n\nextendBorsh();\n","import React from \"react\";\nimport { RouteComponentProps, } from \"react-router-dom\";\nimport queryString from 'query-string';\n\nimport {\n  Box,\n  Button,\n  Link as HyperLink,\n  Stack,\n  TextField,\n} from \"@mui/material\";\n\nimport {\n  useWallet,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport {\n  Coder,\n} from \"@project-serum/anchor\"\nimport { keccak_256 } from \"js-sha3\";\nimport { sha256 } from \"js-sha256\";\nimport BN from 'bn.js';\nimport * as bs58 from \"bs58\";\n\nimport {\n  useConnection,\n  Connection,\n} from \"../contexts\";\nimport {\n  MERKLE_DISTRIBUTOR_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  notify,\n} from \"../utils\";\nimport { MerkleTree } from \"../utils/merkle-tree\";\n\nconst idl = require(\"../utils/merkle_distributor.json\");\nconst coder = new Coder(idl);\n\nexport type ClaimProps = {};\n\nexport const Claim = (\n  props : RouteComponentProps<ClaimProps>,\n) => {\n  const connection = useConnection();\n  const wallet = useWallet();\n\n  let params = queryString.parse(props.location.search);\n  const [distributor, setDistributor] = React.useState(params.distributor as string || \"\");\n  const [handle, setHandle] = React.useState(params.handle as string || \"\");\n  const [amountStr, setAmount] = React.useState(params.amount as string || \"\");\n  const [indexStr, setIndex] = React.useState(params.index as string || \"\");\n  const [pinStr, setPin] = React.useState(params.pin as string || \"\");\n  const [proofStr, setProof] = React.useState(params.proof as string || \"\");\n\n  const allFieldsPopulated =\n    distributor.length > 0\n    && handle.length > 0\n    && amountStr.length > 0\n    && indexStr.length > 0\n    && pinStr.length > 0;\n    // NB: proof can be empty!\n\n  const [editable, setEditable] = React.useState(!allFieldsPopulated);\n\n  const submit = async (e : React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (!wallet.connected || wallet.publicKey === null) {\n      throw new Error(`Wallet not connected`);\n    }\n\n    const amount = Number(amountStr);\n    const index = Number(indexStr);\n    const pin = pinStr.split(\",\").map(Number);\n\n    if (isNaN(amount)) {\n      throw new Error(`Could not parse amount ${amountStr}`);\n    }\n    if (isNaN(index)) {\n      throw new Error(`Could not parse index ${indexStr}`);\n    }\n\n    let distributorKey : PublicKey;\n    try {\n      distributorKey = new PublicKey(distributor);\n    } catch (err) {\n      throw new Error(`Invalid distributor key ${err}`);\n    }\n    const distributorAccount = await connection.getAccountInfo(distributorKey);\n    if (distributorAccount === null) {\n      throw new Error(`Could not fetch distributor`);\n    }\n\n    const distributorInfo = coder.accounts.decode(\n      \"MerkleDistributor\", distributorAccount.data);\n\n    const proof = proofStr === \"\" ? [] : proofStr.split(\",\").map(b => {\n      const ret = Buffer.from(bs58.decode(b))\n      if (ret.length !== 32)\n        throw new Error(`Invalid proof hash length`);\n      return ret;\n    });\n\n    console.log(\"Proof\", proof);\n\n    console.log(distributorInfo.mint.toBase58(), handle, pin);\n\n    const [claimantPda, ] = await PublicKey.findProgramAddress(\n      [\n        distributorInfo.mint.toBuffer(),\n        Buffer.from(handle),\n        Buffer.from(pin),\n      ],\n      MERKLE_DISTRIBUTOR_ID\n    );\n\n    const leaf = Buffer.from(keccak_256.digest(\n      [...new BN(index).toArray(\"le\", 8),\n       ...claimantPda.toBuffer(),\n       ...new BN(amount).toArray(\"le\", 8),\n      ]\n    ));\n\n    console.log(leaf, claimantPda.toBase58(), MerkleTree.nodeHash(leaf));\n\n    const matches = MerkleTree.verifyClaim(\n      Buffer.from(keccak_256.digest(\n        [...new BN(index).toArray(\"le\", 8),\n         ...claimantPda.toBuffer(),\n         ...new BN(amount).toArray(\"le\", 8),\n        ]\n      )),\n      proof,\n      Buffer.from(distributorInfo.root)\n    );\n\n    if (!matches) {\n      throw new Error(\"Merkle proof does not match\");\n    }\n\n    const [claimStatus, cbump] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"ClaimStatus\"),\n        Buffer.from(new BN(index).toArray(\"le\", 8)),\n        distributorKey.toBuffer(),\n      ],\n      MERKLE_DISTRIBUTOR_ID\n    );\n\n    const [distributorTokenKey, ] = await PublicKey.findProgramAddress(\n      [\n        distributorKey.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        distributorInfo.mint.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    );\n\n    const [walletTokenKey, ] = await PublicKey.findProgramAddress(\n      [\n        wallet.publicKey.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        distributorInfo.mint.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    );\n\n    const setup : Array<TransactionInstruction> = [];\n\n    if (await connection.getAccountInfo(walletTokenKey) === null) {\n      setup.push(Token.createAssociatedTokenAccountInstruction(\n          SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n          TOKEN_PROGRAM_ID,\n          distributorInfo.mint,\n          walletTokenKey,\n          wallet.publicKey,\n          wallet.publicKey\n        ));\n    }\n\n    const claimAirdrop = new TransactionInstruction({\n        programId: MERKLE_DISTRIBUTOR_ID,\n        keys: [\n            { pubkey: distributorKey          , isSigner: false , isWritable: true  } ,\n            { pubkey: claimStatus             , isSigner: false , isWritable: true  } ,\n            { pubkey: distributorTokenKey     , isSigner: false , isWritable: true  } ,\n            { pubkey: walletTokenKey          , isSigner: false , isWritable: true  } ,\n            { pubkey: wallet.publicKey        , isSigner: true  , isWritable: false } ,  // payer\n            { pubkey: SystemProgram.programId , isSigner: false , isWritable: false } ,\n            { pubkey: TOKEN_PROGRAM_ID        , isSigner: false , isWritable: false } ,\n        ],\n        data: Buffer.from([\n          ...Buffer.from(sha256.digest(\"global:claim\")).slice(0, 8),\n          ...new BN(cbump).toArray(\"le\", 1),\n          ...new BN(index).toArray(\"le\", 8),\n          ...new BN(amount).toArray(\"le\", 8),\n          ...claimantPda.toBuffer(),\n          ...new BN(proof.length).toArray(\"le\", 4),\n          ...Buffer.concat(proof),\n        ])\n    })\n\n    const claimResult = await Connection.sendTransactionWithRetry(\n      connection,\n      wallet,\n      [\n        ...setup,\n        claimAirdrop\n      ],\n      []\n    );\n\n    console.log(claimResult);\n    if (typeof claimResult === \"string\") {\n      notify({\n        message: \"Claim failed\",\n        description: claimResult,\n      });\n    } else {\n      notify({\n        message: \"Claim succeeded\",\n        description: (\n          <HyperLink href={Connection.explorerLinkFor(claimResult.txid, connection)}>\n            View transaction on explorer\n          </HyperLink>\n        ),\n      });\n    }\n  };\n\n  return (\n    <Stack spacing={2}>\n      <Button\n        color=\"info\"\n        onClick={(e) => setEditable(!editable)}\n      >\n        {!editable ? \"Edit Claim\" : \"Stop Editing\"}\n      </Button>\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"distributor-text-field\"\n        label=\"Distributor\"\n        value={distributor}\n        onChange={(e) => setDistributor(e.target.value)}\n        disabled={!editable}\n      />\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"handle-text-field\"\n        label=\"Handle\"\n        value={handle}\n        onChange={(e) => setHandle(e.target.value)}\n        disabled={!editable}\n      />\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"amount-text-field\"\n        label=\"Amount\"\n        value={amountStr}\n        onChange={(e) => setAmount(e.target.value)}\n        disabled={!editable}\n      />\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"index-text-field\"\n        label=\"Index\"\n        value={indexStr}\n        onChange={(e) => setIndex(e.target.value)}\n        disabled={!editable}\n      />\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"pin-text-field\"\n        label=\"Pin\"\n        value={pinStr}\n        onChange={(e) => setPin(e.target.value)}\n        disabled={!editable}\n      />\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"proof-text-field\"\n        label=\"Proof\"\n        multiline\n        value={proofStr}\n        onChange={(e) => setProof(e.target.value)}\n        disabled={!editable}\n      />\n      <Box />\n      <Button\n        disabled={!wallet.connected || !allFieldsPopulated}\n        variant=\"contained\"\n        color=\"success\"\n        onClick={(e) => {\n          const wrap = async () => {\n            try {\n              await submit(e);\n            } catch (err) {\n              notify({\n                message: \"Claim failed\",\n                description: `${err}`,\n              });\n            }\n          };\n          wrap();\n        }}\n      >\n        Claim Merkle Airdrop\n      </Button>\n    </Stack>\n  );\n};\n\n","export default __webpack_public_path__ + \"static/media/wallet.c746d144.less\";","import { WalletAdapter, WalletError } from \"@solana/wallet-adapter-base\";\nimport {\n  useWallet,\n  WalletProvider as BaseWalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  getLedgerWallet,\n  getMathWallet,\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolongWallet,\n  getTorusWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport { Button } from \"antd\";\nimport React, {\n  createContext,\n  FC,\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { notify } from \"../../utils\";\nimport { DefaultModal } from \"../../components\";\n\nimport \"./wallet.less\";\n\nexport interface WalletModalContextState {\n  visible: boolean;\n  setVisible: (open: boolean) => void;\n}\n\nexport const WalletModalContext = createContext<WalletModalContextState>(\n  {} as WalletModalContextState\n);\n\nexport function useWalletModal(): WalletModalContextState {\n  return useContext(WalletModalContext);\n}\n\nexport const WalletModal: FC = () => {\n  const { wallets, wallet: selected, select } = useWallet();\n  const { visible, setVisible } = useWalletModal();\n  const [ , setShowWallets] = useState(false);\n  const close = useCallback(() => {\n    setVisible(false);\n    setShowWallets(false);\n  }, [setVisible, setShowWallets]);\n\n  return (\n    <DefaultModal visible={visible} onCancel={close}>\n      <div\n        style={{\n          background:\n            \"linear-gradient(180deg, #D329FC 0%, #8F6DDE 49.48%, #19E6AD 100%)\",\n          borderRadius: 36,\n          width: 50,\n          height: 50,\n          textAlign: \"center\",\n          verticalAlign: \"middle\",\n          fontWeight: 700,\n          fontSize: \"1.3rem\",\n          lineHeight: 2.4,\n          marginBottom: 10,\n        }}\n      ></div>\n      <h2\n        style={{\n          color: \"white\",\n          fontWeight: \"bold\",\n          fontSize: 20,\n        }}\n      >\n        {selected ? \"Change provider\" : \"\"}\n      </h2>\n      <p style={{ color: \"white\", fontSize: 14 }}>\n        {selected\n          ? \"Choose from the following options:\"\n          : \"Please sign into your wallet\"}\n      </p>\n\n      <br />\n      {wallets.map((wallet) => {\n        return (\n          <Button\n            key={wallet.name}\n            size=\"large\"\n            type={wallet === selected ? \"primary\" : \"ghost\"}\n            onClick={() => {\n              select(wallet.name);\n              close();\n            }}\n            icon={\n              <img\n                alt={`${wallet.name}`}\n                width={20}\n                height={20}\n                src={wallet.icon}\n                style={{ marginRight: 30, float: \"left\" }}\n              />\n            }\n            style={{\n              display: \"block\",\n              width: \"100%\",\n              textAlign: \"left\",\n              marginBottom: 8,\n              color: \"white\",\n            }}\n          >\n            {wallet.name}\n          </Button>\n        );\n      })}\n    </DefaultModal>\n  );\n};\n\nexport const WalletModalProvider: FC<{ children: ReactNode }> = ({\n  children,\n}) => {\n  const { publicKey } = useWallet();\n  const [connected, setConnected] = useState(!!publicKey);\n  const [visible, setVisible] = useState(false);\n\n  useEffect(() => {\n    if (publicKey) {\n      const base58 = publicKey.toBase58();\n      const keyToDisplay =\n        base58.length > 20\n          ? `${base58.substring(0, 7)}.....${base58.substring(\n              base58.length - 7,\n              base58.length\n            )}`\n          : base58;\n\n      notify({\n        message: \"Wallet update\",\n        description: \"Connected to wallet \" + keyToDisplay,\n      });\n    }\n  }, [publicKey]);\n\n  useEffect(() => {\n    if (!publicKey && connected) {\n      notify({\n        message: \"Wallet update\",\n        description: \"Disconnected from wallet\",\n      });\n    }\n    setConnected(!!publicKey);\n  }, [publicKey, connected, setConnected]);\n\n  return (\n    <WalletModalContext.Provider\n      value={{\n        visible,\n        setVisible,\n      }}\n    >\n      {children}\n      <WalletModal />\n    </WalletModalContext.Provider>\n  );\n};\n\nexport const WalletProvider: FC<{ children: ReactNode }> = ({ children }) => {\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getTorusWallet({\n        options: {\n          // @FIXME: this should be changed for Default, and by each Default storefront\n          clientId:\n            \"BOM5Cl7PXgE9Ylq1Z1tqzhpydY0RVr8k90QQ85N7AKI5QGSrr9iDC-3rvmy0K_hF0JfpLMiXoDhta68JwcxS1LQ\",\n        },\n      }),\n      getLedgerWallet(),\n      getSolongWallet(),\n      getMathWallet(),\n      getSolletWallet(),\n    ],\n    []\n  );\n\n  const onError = useCallback((error: WalletError) => {\n    console.error(error);\n    notify({\n      message: \"Wallet error\",\n      description: error.message,\n    });\n  }, []);\n\n  return (\n    <BaseWalletProvider wallets={wallets} onError={onError} autoConnect>\n      <WalletModalProvider>{children}</WalletModalProvider>\n    </BaseWalletProvider>\n  );\n};\n\nexport type WalletSigner = Pick<\n  WalletAdapter,\n  \"publicKey\" | \"signTransaction\" | \"signAllTransactions\"\n>;\n","import React, { useState, useContext, useCallback } from 'react';\n\nimport { WalletModal } from './WalletContext/WalletContext';\n\nexport enum ModalEnum {\n  WALLET = 'wallet',\n}\n\ntype ModalContextProps = {\n  setModal: (modal: ModalEnum | undefined) => void;\n  removeModal: () => void;\n};\n\nexport const ModalContext = React.createContext<ModalContextProps>({\n  setModal: () => null,\n  removeModal: () => null,\n});\n\nexport const ModalProvider: React.FC = ({ children }) => {\n  const [modal, setModal] = useState<ModalEnum | undefined>(undefined);\n\n  const removeModal = useCallback(() => {\n    setModal(undefined);\n  }, [setModal]);\n\n  return (\n    <ModalContext.Provider\n      value={{\n        setModal,\n        removeModal,\n      }}\n    >\n      {children}\n      {modal === ModalEnum.WALLET && <WalletModal />}\n    </ModalContext.Provider>\n  );\n};\n\nexport const useModal = (): ModalContextProps => {\n  const context = useContext(ModalContext);\n  if (context === undefined) {\n    throw new Error('useModal must be used within a ModalProvider');\n  }\n  return context;\n};\n","import { useTheme } from \"@mui/material\";\nimport React, { useContext } from \"react\";\n\nexport const ColorModeContext = React.createContext({});\n\nexport const ColorModeContextProvider = ({children=null as any }) => {\n  const [mode, setMode] = React.useState<'light' | 'dark'>('dark'); \n  const theme = useTheme();\n  const toggleColorMode = () => {\n    setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n  }\n  return (\n    <ColorModeContext.Provider\n      value={{\n        toggleColorMode,\n        mode,\n        theme,\n      }}\n    >\n      {children}\n    </ColorModeContext.Provider>\n  );\n};\n\nexport const useColorMode = (): any => {\n  const context = useContext(ColorModeContext);\n  return context;\n};\n","import React from \"react\";\n\nimport {\n  Button,\n  Link as HyperLink,\n  Stack,\n  TextField,\n} from \"@mui/material\";\n\nimport {\n  useWallet,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport {\n  Coder,\n} from \"@project-serum/anchor\"\nimport BN from 'bn.js';\nimport { sha256 } from \"js-sha256\";\n\nimport {\n  useConnection,\n  Connection,\n} from \"../contexts\";\nimport {\n  MERKLE_DISTRIBUTOR_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  notify,\n} from \"../utils\";\n\nconst idl = require(\"../utils/merkle_distributor.json\");\nconst coder = new Coder(idl);\n\nexport const Close = () => {\n  const connection = useConnection();\n  const wallet = useWallet();\n\n  const [baseKey, setBaseKey] = React.useState(\"\");\n\n  const submit = async (e : React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (!wallet.connected || wallet.publicKey === null) {\n      throw new Error(`Wallet not connected`);\n    }\n\n    const base = Keypair.fromSecretKey(\n      new Uint8Array(JSON.parse(baseKey)));\n\n    const [distributorKey, dbump] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"MerkleDistributor\"),\n        base.publicKey.toBuffer(),\n      ],\n      MERKLE_DISTRIBUTOR_ID);\n\n    const distributorAccount = await connection.getAccountInfo(distributorKey);\n    if (distributorAccount === null) {\n      throw new Error(`Could not fetch distributor`);\n    }\n\n    const distributorInfo = coder.accounts.decode(\n      \"MerkleDistributor\", distributorAccount.data);\n\n    const [distributorTokenKey, ] = await PublicKey.findProgramAddress(\n      [\n        distributorKey.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        distributorInfo.mint.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    );\n\n    const [creatorTokenKey, ] = await PublicKey.findProgramAddress(\n      [\n        wallet.publicKey.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        distributorInfo.mint.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    );\n\n    const closeDistributor = new TransactionInstruction({\n        programId: MERKLE_DISTRIBUTOR_ID,\n        keys: [\n            { pubkey: base.publicKey          , isSigner: true  , isWritable: false } ,\n            { pubkey: distributorKey          , isSigner: false , isWritable: true  } ,\n            { pubkey: distributorTokenKey     , isSigner: false , isWritable: true  } ,\n            { pubkey: creatorTokenKey         , isSigner: false , isWritable: true  } ,\n            { pubkey: wallet.publicKey        , isSigner: true  , isWritable: true  } ,\n            { pubkey: SystemProgram.programId , isSigner: false , isWritable: false } ,\n            { pubkey: TOKEN_PROGRAM_ID        , isSigner: false , isWritable: false } ,\n        ],\n        data: Buffer.from([\n          ...Buffer.from(sha256.digest(\"global:close_distributor\")).slice(0, 8),\n          ...new BN(dbump).toArray(\"le\", 1),\n        ])\n    })\n\n    const closeResult = await Connection.sendTransactionWithRetry(\n      connection,\n      wallet,\n      [\n        closeDistributor\n      ],\n      [base]\n    );\n\n    console.log(closeResult);\n    if (typeof closeResult === \"string\") {\n      notify({\n        message: \"Close failed\",\n        description: closeResult,\n      });\n    } else {\n      notify({\n        message: \"Close succeeded\",\n        description: (\n          <HyperLink href={Connection.explorerLinkFor(closeResult.txid, connection)}>\n            View transaction on explorer\n          </HyperLink>\n        ),\n      });\n    }\n  };\n\n  return (\n    <Stack spacing={2}>\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"base-text-field\"\n        label=\"Base Private Key\"\n        value={baseKey}\n        onChange={(e) => setBaseKey(e.target.value)}\n      />\n      <Button\n        disabled={!wallet.connected}\n        variant=\"contained\"\n        color=\"success\"\n        onClick={(e) => {\n          const wrap = async () => {\n            try {\n              await submit(e);\n            } catch (err) {\n              notify({\n                message: \"Close failed\",\n                description: `${err}`,\n              });\n            }\n          };\n          wrap();\n        }}\n      >\n        Close Merkle Airdrop\n      </Button>\n    </Stack>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport {\n  Box,\n  Button,\n  FormControl,\n  Link as HyperLink,\n  InputLabel,\n  MenuItem,\n  Stack,\n  Select,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n} from \"@mui/material\";\nimport FilePresentIcon from '@mui/icons-material/FilePresent';\n\nimport {\n  useWallet,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n  AccountLayout,\n  MintLayout,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { keccak_256 } from \"js-sha3\";\nimport { sha256 } from \"js-sha256\";\nimport BN from 'bn.js';\nimport * as bs58 from \"bs58\";\n\n// claim distribution\nimport Mailchimp from \"@mailchimp/mailchimp_transactional\"\n\nimport {\n  useConnection,\n  Connection,\n} from \"../contexts\";\nimport {\n  MERKLE_DISTRIBUTOR_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  notify,\n  shortenAddress,\n} from \"../utils\";\nimport { MerkleTree } from \"../utils/merkle-tree\";\nimport { DragAndDrop } from \"./DragAndDrop\";\nimport { DefaultModal } from \"./DefaultModal\";\n\n// NB: assumes no overflow\nconst randomBytes = () : Uint8Array => {\n  // TODO: some predictable seed? sha256?\n  const buf = new Uint8Array(4);\n  window.crypto.getRandomValues(buf);\n  return buf;\n}\n\nconst WHITESPACE = \"\\u00A0\";\n\nexport type ClaimantInfo = {\n  handle : string,\n  amount : number,\n  pin    : Uint8Array,\n  bump   : number,\n  pda    : PublicKey,\n  url    : string,\n};\n\nconst setupMailchimp = (auth : string, source : string) => {\n  const mailchimp = Mailchimp(auth);\n\n  return async (\n    info : ClaimantInfo,\n    mintUrl: string,\n  ) => {\n    const message = {\n      from_email: source,\n      subject: \"Merkle Airdrop\",\n      text: `You received ${info.amount} airdropped token(s) (${mintUrl}). `\n          + `Claim them at ${info.url}`,\n      to: [\n        {\n          email: info.handle,\n          type: \"to\"\n        }\n      ]\n    };\n\n    const response = await mailchimp.messages.send({ message });\n\n    console.log(response);\n    if (!response[0] || response[0].status !== \"sent\") {\n      throw new Error(`Mailchimp failed to send email: ${response[0].reject_reason}`);\n    }\n  };\n}\n\nconst setupManual = (auth : string, source : string) => {\n  return async (\n    info : ClaimantInfo,\n    mintUrl: string,\n  ) => {\n    // TODO duplicated work since claim URLs are available for download\n    // regardless...\n    console.log({\n      \"handle\": info.handle,\n      \"url\": info.url,\n    });\n  };\n}\n\nconst setupSender = (\n  method : string,\n  auth : string,\n  source : string,\n) => {\n  if (method === \"Mailchimp\") {\n    return setupMailchimp(auth, source);\n  } else if (method === \"Manual\") {\n    return setupManual(auth, source);\n  } else {\n    throw new Error(`Unrecognized claim distribution method ${method}`);\n  }\n}\n\nconst parseClaimants = (\n  input : string\n) : Array<ClaimantInfo> => {\n  const json = JSON.parse(input);\n  return json.map(obj => {\n    return {\n      handle : obj.handle,\n      amount : obj.amount,\n      pin    : obj.pin,\n      bump   : obj.bump,\n      pda    : obj.pda,\n      url    : obj.url,\n    };\n  });\n};\n\nconst reactModal = (renderModal) => {\n  const container = document.createElement('div');\n  document.body.appendChild(container);\n\n  const displayModal = ({ onSubmit, onDismiss }) => {\n    ReactDOM.render(renderModal({ onSubmit, onDismiss, show: true }), container);\n  };\n\n  const hideModal = ({ onSubmit, onDismiss }, callback) => {\n    ReactDOM.render(renderModal({ onSubmit, onDismiss, show: false }), container, callback);\n  };\n\n  const destroyModal = () => {\n    ReactDOM.unmountComponentAtNode(container);\n    document.body.removeChild(container);\n  };\n\n  const confirmation = new Promise((resolve) => {\n    const onSubmit = (value) => resolve(value);\n    const onDismiss = () => resolve(undefined);\n    displayModal({ onSubmit, onDismiss });\n  });\n\n  return confirmation.finally(() => {\n    const onSubmit = () => {};\n    const onDismiss = () => {};\n    hideModal({ onSubmit, onDismiss }, destroyModal);\n  });\n};\n\nexport type CreateProps = {};\n\nexport const Create = (\n  props : CreateProps,\n) => {\n  const connection = useConnection();\n  const wallet = useWallet();\n  const [mint, setMint] = React.useState(localStorage.getItem(\"mint\") || \"\");\n  const [commMethod, setMethod] = React.useState(localStorage.getItem(\"commMethod\") || \"\");\n  const [commAuth, setCommAuth] = React.useState(\"\");\n  const [commSource, setCommSource] = React.useState(\"\");\n  const [filename, setFilename] = React.useState(\"\");\n  const [text, setText] = React.useState(\"\");\n  const [baseKey, setBaseKey] = React.useState<Keypair | undefined>(undefined);\n  const [claimURLs, setClaimURLs] = React.useState<Array<ClaimantInfo>>([]);\n\n  const submit = async (e : React.SyntheticEvent) => {\n    e.preventDefault();\n\n    setBaseKey(undefined);\n    setClaimURLs([]);\n\n    if (!wallet.connected || wallet.publicKey === null) {\n      throw new Error(`Wallet not connected`);\n    }\n\n    let mintKey : PublicKey;\n    try {\n      mintKey = new PublicKey(mint);\n    } catch (err) {\n      throw new Error(`Invalid mint key ${err}`);\n    }\n    const mintAccount = await connection.getAccountInfo(mintKey);\n    if (mintAccount === null) {\n      throw new Error(`Could not fetch mint`);\n    }\n    if (!mintAccount.owner.equals(TOKEN_PROGRAM_ID)) {\n      throw new Error(`Invalid mint owner ${mintAccount.owner.toBase58()}`);\n    }\n    if (mintAccount.data.length !== MintLayout.span) {\n      throw new Error(`Invalid mint size ${mintAccount.data.length}`);\n    }\n    const mintInfo = MintLayout.decode(Buffer.from(mintAccount.data));\n    const displayMintTokens = (amount : number) : string => {\n      // TODO: better decimal rounding\n      return (amount / Math.pow(10, mintInfo.decimals)).toString();\n    };\n\n    const mintUrl = `https://explorer.solana.com/address/${mintKey.toBase58()}?cluster=${Connection.envFor(connection)}`;\n    console.log(mintUrl);\n\n\n    const claimants = parseClaimants(text);\n    if (claimants.length === 0) {\n      throw new Error(`No claimants provided`);\n    }\n\n    const mightHaveExisting = (info : ClaimantInfo) => {\n      // TODO: others?\n      return info.url !== undefined && info.url !== null;\n    };\n    if (claimants.reduce((acc, c) => acc && mightHaveExisting(c), true)) {\n      // TODO: more validation of URLs? The creator is using they're own\n      // credentials to re-send so if they're malicious it's not that bad\n      // right?...\n      const resendOnly = await reactModal(({ show, onSubmit, onDismiss }) => {\n        const options = [\n          { click: () => onSubmit(\"create\"), name: \"Create and Send\" },\n          { click: () => onSubmit(\"send\")  , name: \"Send only\"       },\n        ];\n        return (\n          <DefaultModal visible={show} onCancel={onDismiss}>\n            <p style={{ color: \"white\", fontSize: 14 }}>\n              Uploaded distribution list has URLs for all claimants.\n              Skip creation of airdrop and only re-send links?\n            </p>\n            <br />\n            {options.map((opt) => {\n              return (\n                <Button\n                  key={opt.name}\n                  style={{\n                    width: \"100%\",\n                    color: \"white\",\n                    marginBottom: 8,\n                  }}\n                  variant=\"outlined\"\n                  onClick={opt.click}\n                >\n                  {opt.name}\n                </Button>\n              );\n            })}\n          </DefaultModal>\n        );\n      }) as string | undefined;\n      console.log(resendOnly);\n      if (resendOnly === \"send\") {\n        setClaimURLs(claimants);\n        const sender = setupSender(commMethod, commAuth, commSource);\n        for (let idx = 0; idx < claimants.length; ++idx) {\n          await sender(claimants[idx], mintUrl);\n        }\n        return;\n      } else if (resendOnly === \"create\") {\n        // fallthrough to full create\n      } else {\n        // dismissed. don't use exceptions for control flow?\n        throw new Error(\"Dismissed\");\n      }\n    }\n    const totalClaim = claimants.reduce((acc, c) => acc + c.amount, 0);\n    claimants.forEach(c => {\n      c.pin = randomBytes();\n    });\n\n    const [creatorTokenKey, ] = await PublicKey.findProgramAddress(\n      [\n        wallet.publicKey.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        mintKey.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    );\n    const creatorTokenAccount = await connection.getAccountInfo(creatorTokenKey);\n    if (creatorTokenAccount === null) {\n      throw new Error(`Could not fetch creator token account`);\n    }\n    if (creatorTokenAccount.data.length !== AccountLayout.span) {\n      throw new Error(`Invalid token account size ${creatorTokenAccount.data.length}`);\n    }\n    const creatorTokenInfo = AccountLayout.decode(Buffer.from(creatorTokenAccount.data));\n    if (new BN(creatorTokenInfo.amount, 8, \"le\").toNumber() < totalClaim) {\n      throw new Error(`Creator token account does not have enough tokens`);\n    }\n\n\n    const leafs : Array<Buffer> = [];\n    for (let idx = 0; idx < claimants.length; ++idx ) {\n      const claimant = claimants[idx];\n      const seeds = [\n        mintKey.toBuffer(),\n        Buffer.from(claimant.handle),\n        Buffer.from(claimant.pin),\n      ];\n      const [claimantPda, bump] = await PublicKey.findProgramAddress(seeds, MERKLE_DISTRIBUTOR_ID);\n      claimant.bump = bump;\n      claimant.pda = claimantPda;\n      leafs.push(Buffer.from(\n        keccak_256.digest(\n          [...new BN(idx).toArray(\"le\", 8),\n           ...claimantPda.toBuffer(),\n           ...new BN(claimant.amount).toArray(\"le\", 8),\n          ]\n        )\n      ));\n    }\n\n    const tree = new MerkleTree(leafs);\n    const root = tree.getRoot();\n\n\n    const base = new Keypair();\n    console.log(`Base ${base.publicKey.toBase58()}`);\n    const [distributor, dbump] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"MerkleDistributor\"),\n        base.publicKey.toBuffer(),\n      ],\n      MERKLE_DISTRIBUTOR_ID);\n\n    const [distributorTokenKey, ] = await PublicKey.findProgramAddress(\n      [\n        distributor.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        mintKey.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    );\n\n    for (let idx = 0; idx < claimants.length; ++idx) {\n      const proof = tree.getProof(idx);\n      const verified = tree.verifyProof(idx, proof, root);\n\n      if (!verified) {\n        throw new Error(\"Merkle tree verification failed\");\n      }\n\n      const claimant = claimants[idx];\n      const params = [\n        `distributor=${distributor}`,\n        `handle=${claimant.handle}`,\n        `amount=${claimant.amount}`,\n        `index=${idx}`,\n        `pin=${claimant.pin}`,\n        `proof=${proof.map(b => bs58.encode(b))}`,\n      ];\n      const query = params.join(\"&\");\n\n      claimant.url = `${window.location.origin}${window.location.pathname}#/claim?${query}`;\n    }\n\n    const shouldSend = await reactModal(({ show, onSubmit, onDismiss }) => {\n      const options = [\n        { click: () => onSubmit(true) , name: \"Approve\" },\n        { click: () => onSubmit(false), name: \"Cancel\"  },\n      ];\n      return (\n        <DefaultModal visible={show} onCancel={onDismiss}>\n          <h2\n            style={{\n              color: \"white\",\n              fontWeight: \"bold\",\n              fontSize: 20,\n            }}\n          >\n            Claim Distribution Preview\n          </h2>\n          <p style={{ color: \"white\", fontSize: 14 }}>\n            Distributing a total of {displayMintTokens(totalClaim)}{WHITESPACE}\n            <HyperLink href={mintUrl}>\n              {shortenAddress(mintKey.toBase58())}\n            </HyperLink>\n            {WHITESPACE}token(s)\n          </p>\n          <TableContainer\n            sx={{\n              \"td, th\": { color: \"white\" },\n              backgroundColor: \"#444444\",\n              borderRadius: \"5px\",\n              maxHeight: \"30ch\",\n            }}\n          >\n            <Table size=\"small\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Handle</TableCell>\n                  <TableCell>Tokens</TableCell>\n                  <TableCell>Pin</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {claimants.map((c) => (\n                  <TableRow\n                    key={c.pda.toBase58()}\n                    sx={{ 'td, th': { border: 0 } }}\n                  >\n                    <TableCell component=\"th\" scope=\"row\">{c.handle} </TableCell>\n                    <TableCell>{displayMintTokens(c.amount)}</TableCell>\n                    <TableCell>{c.pin.join(\",\")}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <br />\n          {options.map((opt) => {\n            return (\n              <Button\n                key={opt.name}\n                style={{\n                  width: \"100%\",\n                  color: \"white\",\n                  marginBottom: 8,\n                }}\n                variant=\"outlined\"\n                onClick={opt.click}\n              >\n                {opt.name}\n              </Button>\n            );\n          })}\n        </DefaultModal>\n      );\n    }) as boolean | undefined;\n    console.log(shouldSend);\n    if (shouldSend === true) {\n    } else {\n      // dismissed. don't use exceptions for control flow?\n      throw new Error(\"Claim distribution preview not approved\");\n    }\n\n    // TODO: defer until success?\n    setBaseKey(base);\n    setClaimURLs(claimants);\n\n    // initial merkle-distributor state\n    const initDistributor = new TransactionInstruction({\n        programId: MERKLE_DISTRIBUTOR_ID,\n        keys: [\n            { pubkey: base.publicKey          , isSigner: true  , isWritable: false } ,\n            { pubkey: distributor             , isSigner: false , isWritable: true  } ,\n            { pubkey: mintKey                 , isSigner: false , isWritable: false } ,\n            { pubkey: wallet.publicKey        , isSigner: true  , isWritable: false } ,\n            { pubkey: SystemProgram.programId , isSigner: false , isWritable: false } ,\n        ],\n        data: Buffer.from([\n          ...Buffer.from(sha256.digest(\"global:new_distributor\")).slice(0, 8),\n          ...new BN(dbump).toArray(\"le\", 1),\n          ...root,\n          ...new BN(totalClaim).toArray(\"le\", 8),\n          ...new BN(claimants.length).toArray(\"le\", 8),\n        ])\n    })\n\n    const createDistributorTokenAccount = Token.createAssociatedTokenAccountInstruction(\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintKey,\n        distributorTokenKey,\n        distributor,\n        wallet.publicKey\n      );\n\n    const transferToATA = Token.createTransferInstruction(\n        TOKEN_PROGRAM_ID,\n        creatorTokenKey,\n        distributorTokenKey,\n        wallet.publicKey,\n        [],\n        totalClaim\n      );\n\n    const createResult = await Connection.sendTransactionWithRetry(\n      connection,\n      wallet,\n      [\n        initDistributor,\n        createDistributorTokenAccount,\n        transferToATA,\n      ],\n      [base]\n    );\n\n    console.log(createResult);\n    if (typeof createResult === \"string\") {\n      throw new Error(createResult);\n    } else {\n      notify({\n        message: \"Create succeeded\",\n        description: (\n          <HyperLink href={Connection.explorerLinkFor(createResult.txid, connection)}>\n            View transaction on explorer\n          </HyperLink>\n        ),\n      });\n    }\n\n    console.log(\"Distributing claim URLs\");\n    const sender = setupSender(commMethod, commAuth, commSource);\n    for (let idx = 0; idx < claimants.length; ++idx) {\n      await sender(claimants[idx], mintUrl);\n    }\n  };\n\n  const handleFiles = (files) => {\n    if (files.length !== 1) {\n      notify({\n        message: \"File upload failed\",\n        description: `Received ${files.length} files`,\n      });\n      return;\n    }\n\n    const file = files[0];\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      if (e !== null && e.target !== null) {\n        if (typeof e.target.result === \"string\") {\n          try {\n            parseClaimants(e.target.result);\n          } catch {\n            notify({\n              message: `File upload failed for: ${file.name}`,\n              description: (\n                <span>\n                  Could not parse uploaded file.{WHITESPACE}\n                  <HyperLink href=\"#/\">\n                    Does it follow the JSON scheme?\n                  </HyperLink>\n                </span>\n              ),\n            });\n            setFilename(\"\");\n            setText(\"\");\n            return;\n          }\n          setFilename(file.name);\n          setText(e.target.result);\n        } else {\n          notify({\n            message: `File upload failed for: ${file.name}`,\n            description: \"Could not read uploaded file\",\n          });\n        }\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  const commAuthorization = (commMethod) => {\n    if (commMethod === \"Manual\") {\n      return null;\n    }\n    return (\n      <React.Fragment>\n        <TextField\n          style={{width: \"60ch\"}}\n          id=\"comm-auth-field\"\n          label={`${commMethod} API key`}\n          value={commAuth}\n          onChange={(e) => setCommAuth(e.target.value)}\n        />\n        <TextField\n          style={{width: \"60ch\"}}\n          id=\"comm-source-field\"\n          label={`${commMethod} Source`}\n          value={commSource}\n          onChange={(e) => setCommSource(e.target.value)}\n        />\n      </React.Fragment>\n    );\n  };\n\n  const fileUpload = (\n    <React.Fragment>\n      <DragAndDrop handleDrop={handleFiles} >\n        <Stack\n          direction=\"row\"\n          style={{\n            width: \"60ch\",\n            height: \"15ch\",\n          }}\n          sx={{\n            border: '1px dashed grey',\n            justifyContent: \"center\",\n            alignContent: \"center\",\n          }}\n        >\n          <Button\n            variant=\"text\"\n            component=\"label\"\n            style={{\n              padding: 0,\n              // don't make the button click field too large...\n              marginTop: \"5ch\",\n              marginBottom: \"5ch\",\n            }}\n          >\n            Upload a distribution list\n            <input\n              type=\"file\"\n              onChange={(e) => handleFiles(e.target.files)}\n              hidden\n            />\n          </Button>\n          {WHITESPACE}\n          {/*For display alignment...*/}\n          <Button\n            variant=\"text\"\n            component=\"label\"\n            disabled={true}\n            color=\"secondary\"\n            style={{padding: 0}}\n          >\n            or drag it here\n          </Button>\n        </Stack>\n      </DragAndDrop>\n      {filename !== \"\"\n      ? (<Box style={{\n            display: 'flex',\n            justifyContent: 'center',\n            width: \"60ch\",\n            color: \"rgba(255,255,255,.8)\",\n          }}>\n            <FilePresentIcon />\n            <span>{WHITESPACE} Uploaded {filename}</span>\n          </Box>\n        )\n      : (<Box/>)}\n    </React.Fragment>\n  );\n\n  const createAirdrop = (\n    <Button\n      disabled={!wallet.connected}\n      variant=\"contained\"\n      color=\"success\"\n      onClick={(e) => {\n        const wrap = async () => {\n          try {\n            await submit(e);\n          } catch (err) {\n            setBaseKey(undefined);\n            setClaimURLs([]);\n            notify({\n              message: \"Create failed\",\n              description: `${err}`,\n            });\n          }\n        };\n        wrap();\n      }}\n      sx={{ marginRight: \"4px\" }}\n    >\n      Create Merkle Airdrop\n    </Button>\n  );\n\n  const hyperLinkData = (data) => {\n    const encoded = encodeURIComponent(JSON.stringify(data));\n    return `data:text/plain;charset=utf-8,${encoded}`;\n  };\n\n  return (\n    <Stack spacing={2}>\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"mint-text-field\"\n        label=\"Mint\"\n        value={mint}\n        onChange={(e) => {\n          localStorage.setItem(\"mint\", e.target.value);\n          setMint(e.target.value);\n        }}\n      />\n      <FormControl fullWidth>\n        <InputLabel id=\"comm-method-label\">Claim Distribution Method</InputLabel>\n        <Select\n          labelId=\"comm-method-label\"\n          id=\"comm-method-select\"\n          value={commMethod}\n          label=\"Claim Distribution Method\"\n          onChange={(e) => {\n            localStorage.setItem(\"commMethod\", e.target.value);\n            setMethod(e.target.value);\n          }}\n          style={{textAlign: \"left\"}}\n        >\n          <MenuItem value={\"Mailchimp\"}>Mailchimp</MenuItem>\n          <MenuItem value={\"Manual\"}>Manual</MenuItem>\n        </Select>\n      </FormControl>\n      {commMethod !== \"\" && commAuthorization(commMethod)}\n      {commMethod !== \"\" && mint !== \"\" && fileUpload}\n      {filename !== \"\" && createAirdrop}\n      {baseKey !== undefined && (\n        <HyperLink\n          href={hyperLinkData(Array.from(baseKey.secretKey))}\n          download=\"basekey.json\"\n          underline=\"none\"\n          style={{width: \"100%\"}}\n        >\n          <Button\n            variant=\"contained\"\n            style={{width: \"100%\"}}\n          >\n            Download Distributor Base Secret Key\n          </Button>\n        </HyperLink>\n      )}\n      {claimURLs.length > 0 && (\n        <HyperLink\n          href={hyperLinkData(claimURLs)}\n          download=\"claimURLs.json\"\n          underline=\"none\"\n          style={{width: \"100%\"}}\n        >\n          <Button\n            variant=\"contained\"\n            style={{width: \"100%\"}}\n          >\n            Download claim URLs\n          </Button>\n        </HyperLink>\n      )}\n    </Stack>\n  );\n};\n","import React from \"react\"\n\nexport const DragAndDrop = (props) => {\n  const dropRef = React.useRef<HTMLDivElement>(null);\n  const [dragCounter, setDragCounter] = React.useState(0);\n  const [dragging, setDragging] = React.useState(false);\n\n  const handleDrag = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n  };\n\n  const handleDragIn = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n\n    setDragCounter(dragCounter + 1);\n    if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {\n      setDragging(true);\n    }\n  };\n\n  const handleDragOut = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n\n    const remainingDrags = dragCounter - 1;\n    setDragCounter(remainingDrags);\n    if (remainingDrags === 0) {\n      setDragging(false);\n    }\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n\n    setDragging(false);\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      props.handleDrop(e.dataTransfer.files);\n      e.dataTransfer.clearData();\n      setDragCounter(0);\n    }\n  };\n\n  React.useEffect(() => {\n    const node = dropRef.current;\n    if (node === null) return;\n    node.addEventListener(\"dragenter\" , handleDragIn);\n    node.addEventListener(\"dragleave\" , handleDragOut);\n    node.addEventListener(\"dragover\"  , handleDrag);\n    node.addEventListener(\"drop\"      , handleDrop);\n\n    return () => {\n      node.removeEventListener(\"dragenter\" , handleDragIn);\n      node.removeEventListener(\"dragleave\" , handleDragOut);\n      node.removeEventListener(\"dragover\"  , handleDrag);\n      node.removeEventListener(\"drop\"      , handleDrop);\n    };\n  });\n\n  return (\n    <div\n      ref={dropRef}\n      style={dragging ? { backgroundColor: \"rgba(255,255,255,.3)\"} : {}}\n    >\n      {props.children}\n    </div>\n  );\n};\n\n\nexport default DragAndDrop;\n","import React from \"react\";\n\nexport type CenteredProps = {\n  children : React.ReactNode,\n  height : string,\n  width : string,\n}\n\nexport const Centered = (\n  props : CenteredProps\n) => {\n  return (\n    <div\n      style={{\n        display: \"table\",\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        height: \"100%\",\n        width: \"100%\",\n      }}\n    >\n      <div\n        style={{\n          display: \"table-cell\",\n          verticalAlign: \"middle\",\n        }}\n      >\n        <div\n          style={{\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            height: props.height,\n            width: props.width,\n          }}\n        >\n          {props.children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Centered;\n","import { ButtonGroup, ButtonGroupProps } from \"@mui/material\";\nimport { Settings } from \"./Settings\";\n\nexport type ConnectButtonProps = ButtonGroupProps & {\n  isConnected: boolean;\n  onClickConnect: () => void;\n  onClickChange: () => void;\n};\n\nexport const ConnectButton: React.FC<ConnectButtonProps> = ({\n  isConnected,\n  onClickConnect,\n  onClickChange,\n  ...restProps\n}) => {\n  return (\n    <ButtonGroup   {...restProps}>\n      <Settings/>\n    </ButtonGroup>\n  );\n};\n\nexport default ConnectButton;\n","import React, { useCallback } from \"react\";\nimport {\n  Box,\n  Button,\n  Link,\n  Stack,\n} from \"@mui/material\";\nimport HomeIcon from '@mui/icons-material/Home';\n\nimport ConnectButton from \"../ConnectButton\";\nimport { ModalEnum, useModal, useWalletModal } from \"../../contexts\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { AppBar } from \"@mui/material\";\n\nexport const Header: React.FC = () => {\n  const { setModal } = useModal();\n  const { setVisible } = useWalletModal();\n  const wallet = useWallet();\n  const connected = wallet.connected;\n\n  const handleChange = useCallback(() => setVisible(true), [setVisible]);\n\n  const handleConnect = useCallback(() => {\n    setModal(ModalEnum.WALLET);\n    setVisible(true);\n  }, [setModal, setVisible]);\n  return (\n    <AppBar color=\"transparent\">\n    <Box\n      sx={{\n        display: \"flex\",\n        bgcolor: \"action.disabledBackground\",\n      }}\n      minWidth=\"100%\"\n    >\n      <Stack\n        direction=\"row\"\n        spacing={2}\n        sx={{\n          display: \"flex\",\n          height: \"62px\",\n          justifyContent: \"flex-start\",\n          alignItems: \"center\",\n          marginLeft: \"36px\",\n        }}\n      >\n        <Link href=\"#/\" underline=\"none\">\n          <Button variant=\"outlined\">\n            <HomeIcon />\n          </Button>\n        </Link>\n        <Link href=\"#/create\" underline=\"none\">\n          <Button variant=\"outlined\">\n            Create\n          </Button>\n        </Link>\n        <Link href=\"#/claim\" underline=\"none\">\n          <Button variant=\"outlined\">\n            Claim\n          </Button>\n        </Link>\n        <Link href=\"#/close\" underline=\"none\">\n          <Button variant=\"outlined\">\n            Close\n          </Button>\n        </Link>\n      </Stack>\n      <Box sx={{flexGrow: 1}}></Box>\n      <Box\n        sx={{\n          display: \"flex\",\n          height: \"62px\",\n          justifyContent: \"flex-end\",\n          alignItems: \"center\",\n        }}\n      >\n        <ConnectButton\n          isConnected={connected}\n          sx={{ marginRight: \"36px\" }}\n          onClickConnect={handleConnect}\n          onClickChange={handleChange}\n        />\n      </Box>\n    </Box>\n</AppBar>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport {\n  HashRouter,\n  Link,\n  Route,\n  Switch,\n} from \"react-router-dom\";\n\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport {\n  Box,\n  Link as HyperLink,\n  Stack,\n} from \"@mui/material\";\n\nimport \"./App.css\";\nimport {\n  useColorMode,\n} from \"./contexts\";\nimport Centered from \"./components/Centered\";\nimport Header from \"./components/Header/Header\";\nimport { Claim } from \"./components/Claim\";\nimport { Close } from \"./components/Close\";\nimport { Create } from \"./components/Create\";\n\nconst WHITESPACE = \"\\u00A0\";\n\ntype AboutProps = {};\n\nconst About = (\n  props : AboutProps,\n) => {\n  return (\n    <Stack\n      alignContent=\"left\"\n      textAlign=\"left\"\n      spacing={1}\n    >\n      <div>\n      Merkle Airdrop leverages the Solana blockchain and merkle trees to\n      facilitate airdrops by removing the prohibitive costs to the creators.\n      </div>\n\n\n      <div>\n      In the Solana ecosystem, the cost to creators for airdropped tokens is\n      currently largely due to rent costs being{WHITESPACE}\n      <HyperLink\n        href=\"https://docs.solana.com/implemented-proposals/rent\"\n        underline=\"none\"\n      >\n        \"fixed at the genesis\"\n      </HyperLink>\n      {WHITESPACE}(although there is a{WHITESPACE}\n      <HyperLink\n        href=\"https://forums.solana.com/t/proposal-for-a-temporary-one-off-code-change-to-reduce-the-skyrocketing-costs-of-rent/1572\"\n        underline=\"none\"\n      >\n        proposal\n      </HyperLink>\n      {WHITESPACE}to temporarily reduce these costs until a dynamic solution is\n      built). With the large increase in SOLUSD since genesis, rent costs have\n      duly skyrocketed.\n      </div>\n\n\n      <div>\n      The merkle distributor, pioneered by{WHITESPACE}\n      <HyperLink\n        href=\"https://github.com/Uniswap/merkle-distributor\"\n        underline=\"none\"\n      >\n        Uniswap\n      </HyperLink>\n      {WHITESPACE}and ported to Solana by{WHITESPACE}\n      <HyperLink\n        href=\"https://github.com/saber-hq/merkle-distributor\"\n        underline=\"none\"\n      >\n        Saber\n      </HyperLink>, solves this issue by building a 256-bit \"root hash\" from a\n      list of recipients and balances. This moves the rent costs and (nominal)\n      transaction fee to the claimer if they so choose to redeem the airdrop.\n      </div>\n\n      <div>\n      This website exposes a web-friendly way to access the on-chain\n      distributor.\n      </div>\n\n      <div>\n      <Link to=\"/create\">\n        CREATION\n      </Link>\n      {WHITESPACE}is done by choosing a Mint, an off-chain\n      notification method, and supplying a list of recipients and balances with\n      the following JSON schema{WHITESPACE}\n\n      <HyperLink\n        href={`data:text/plain;charset=utf-8,${JSON.stringify(require(\"./example.json\"))}`}\n        download=\"example.json\"\n        underline=\"none\"\n      >\n      (Click here for an example)\n      </HyperLink>\n\n      <pre style={{ fontSize: 14 }}>{`\n[\n  {\n    \"handle\": \"<DISTRIBUTION-SPECIFIC-HANDLE>\"\n    \"amount\": <#-TOKENS>\n  },\n  ...\n]`}</pre>\n      </div>\n\n      <div>\n      <Link to=\"/claim\">\n        CLAIMS\n      </Link>\n      {WHITESPACE}are redeemed through a URL with query parameters holding\n      claim-specific keys. These should be kept secret! Anyone can redeem a\n      claim once they have the URL.\n      </div>\n\n      <div>\n      <Link to=\"/close\">\n        CLOSING\n      </Link>\n      {WHITESPACE}the Merkle Distributor accounts cleans up the on-chain state\n      and allows creators to recycle any remaining tokens and lamports held for\n      rent-exemption after the airdrop is complete.\n      </div>\n    </Stack>\n  );\n};\n\nconst getWindowDimensions = () => {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n};\n\n// eslint-disable-next-line\nconst useWindowDimensions = () => {\n  const [windowDimensions, setWindowDimensions] = React.useState(\n    getWindowDimensions()\n  );\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n};\n\nfunction App() {\n  const colorModeCtx = useColorMode();\n\n  React.useEffect(() => {}, [colorModeCtx.mode]);\n\n  const theme = React.useMemo(\n    () => {\n      let mode, disabledColor;\n      if (colorModeCtx.mode === \"dark\" || !colorModeCtx.mode) {\n        mode = \"dark\";\n        disabledColor = \"#eee\";\n      } else {\n        mode = \"light\";\n        disabledColor = \"#111\";\n      }\n\n      return createTheme({\n        palette: {\n          mode,\n          action: {\n            disabled: disabledColor,\n          },\n        },\n      })\n    },\n    [colorModeCtx.mode]\n  );\n\n  return (\n    <div className=\"App\" style={{ backgroundColor: \"transparent\" }}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Header />\n        <Centered height=\"100ch\" width=\"60ch\">\n          <Box sx={{height: \"10ch\"}} />\n          <HashRouter>\n            <Switch>\n              <Route path=\"/create\" component={Create} />\n              <Route path=\"/claim\" component={Claim} />\n              <Route path=\"/close\" component={Close} />\n              <Route path=\"/\" component={About} />\n            </Switch>\n          </HashRouter>\n        </Centered>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport {\n  AccountsProvider,\n  WalletProvider,\n  ConnectionProvider,\n  ColorModeContextProvider,\n} from \"./contexts\";\n\nimport \"antd/dist/antd.css\";\nimport \"@fontsource/open-sans\";\nimport \"@fontsource/roboto\";\nimport \"@fontsource/sora\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConnectionProvider>\n      <WalletProvider>\n        <AccountsProvider>\n          <ColorModeContextProvider>\n            <App />\n          </ColorModeContextProvider>\n        </AccountsProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n","import BN from 'bn.js';\n\nexport const TEN = new BN(10);\nexport const HALF_WAD = TEN.pow(new BN(18));\nexport const WAD = TEN.pow(new BN(18));\nexport const RAY = TEN.pow(new BN(27));\nexport const ZERO = new BN(0);\n","import { useCallback, useState } from 'react';\nimport { MintInfo } from '@solana/spl-token';\n\nimport { TokenAccount } from './../models';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { WAD, ZERO } from '../constants';\nimport { TokenInfo } from '@solana/spl-token-registry';\n\nexport type KnownTokenMap = Map<string, TokenInfo>;\n\nexport const formatPriceNumber = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 8,\n});\n\nexport function useLocalStorageState(key: string, defaultState?: string) {\n  const [state, setState] = useState(() => {\n    // NOTE: Not sure if this is ok\n    const storedState = localStorage.getItem(key);\n    if (storedState) {\n      return JSON.parse(storedState);\n    }\n    return defaultState;\n  });\n\n  const setLocalStorageState = useCallback(\n    newState => {\n      const changed = state !== newState;\n      if (!changed) {\n        return;\n      }\n      setState(newState);\n      if (newState === null) {\n        localStorage.removeItem(key);\n      } else {\n        try {\n          localStorage.setItem(key, JSON.stringify(newState));\n        } catch {\n          // ignore\n        }\n      }\n    },\n    [state, key],\n  );\n\n  return [state, setLocalStorageState];\n}\n\nexport const findProgramAddress = async (\n  seeds: (Buffer | Uint8Array)[],\n  programId: PublicKey,\n) => {\n  const key =\n    'pda-' +\n    seeds.reduce((agg, item) => agg + item.toString('hex'), '') +\n    programId.toString();\n  let cached = localStorage.getItem(key);\n  if (cached) {\n    const value = JSON.parse(cached);\n\n    return [value.key, parseInt(value.nonce)] as [string, number];\n  }\n\n  const result = await PublicKey.findProgramAddress(seeds, programId);\n\n  try {\n    localStorage.setItem(\n      key,\n      JSON.stringify({\n        key: result[0].toBase58(),\n        nonce: result[1],\n      }),\n    );\n  } catch {\n    // ignore\n  }\n\n  return [result[0].toBase58(), result[1]] as [string, number];\n};\n\n// shorten the checksummed version of the input address to have 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n}\n\nexport function getTokenName(\n  map: KnownTokenMap,\n  mint?: string | PublicKey,\n  shorten = true,\n): string {\n  const mintAddress = typeof mint === 'string' ? mint : mint?.toBase58();\n\n  if (!mintAddress) {\n    return 'N/A';\n  }\n\n  const knownSymbol = map.get(mintAddress)?.symbol;\n  if (knownSymbol) {\n    return knownSymbol;\n  }\n\n  return shorten ? `${mintAddress.substring(0, 5)}...` : mintAddress;\n}\nexport function getVerboseTokenName(\n  map: KnownTokenMap,\n  mint?: string | PublicKey,\n  shorten = true,\n): string {\n  const mintAddress = typeof mint === 'string' ? mint : mint?.toBase58();\n\n  if (!mintAddress) {\n    return 'N/A';\n  }\n\n  const knownName = map.get(mintAddress)?.name;\n  if (knownName) {\n    return knownName;\n  }\n\n  return shorten ? `${mintAddress.substring(0, 5)}...` : mintAddress;\n}\n\nexport function getTokenByName(tokenMap: KnownTokenMap, name: string) {\n  let token: TokenInfo | null = null;\n  for (const val of tokenMap.values()) {\n    if (val.symbol === name) {\n      token = val;\n      break;\n    }\n  }\n  return token;\n}\n\nexport function getTokenIcon(\n  map: KnownTokenMap,\n  mintAddress?: string | PublicKey,\n): string | undefined {\n  const address =\n    typeof mintAddress === 'string' ? mintAddress : mintAddress?.toBase58();\n  if (!address) {\n    return;\n  }\n\n  return map.get(address)?.logoURI;\n}\n\nexport function isKnownMint(map: KnownTokenMap, mintAddress: string) {\n  return !!map.get(mintAddress);\n}\n\nexport const STABLE_COINS = new Set(['USDC', 'wUSDC', 'USDT']);\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(\n    0,\n    new Array(Math.ceil(array.length / size)),\n  ).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\n\nexport function toLamports(\n  account?: TokenAccount | number,\n  mint?: MintInfo,\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount =\n    typeof account === 'number' ? account : account.info.amount?.toNumber();\n\n  const precision = Math.pow(10, mint?.decimals || 0);\n  return Math.floor(amount * precision);\n}\n\nexport function wadToLamports(amount?: BN): BN {\n  return amount?.div(WAD) || ZERO;\n}\n\nexport function fromLamports(\n  account?: TokenAccount | number | BN,\n  mint?: MintInfo,\n  rate: number = 1.0,\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount = Math.floor(\n    typeof account === 'number'\n      ? account\n      : BN.isBN(account)\n      ? account.toNumber()\n      : account.info.amount.toNumber(),\n  );\n\n  const precision = Math.pow(10, mint?.decimals || 9);\n  return (amount / precision) * rate;\n}\n\nexport const tryParseKey = (key: string): PublicKey | null => {\n  try {\n    return new PublicKey(key);\n  } catch (error) {\n    return null;\n  }\n};\n\nvar SI_SYMBOL = ['', 'k', 'M', 'G', 'T', 'P', 'E'];\n\nconst abbreviateNumber = (number: number, precision: number) => {\n  let tier = (Math.log10(number) / 3) | 0;\n  let scaled = number;\n  let suffix = SI_SYMBOL[tier];\n  if (tier !== 0) {\n    let scale = Math.pow(10, tier * 3);\n    scaled = number / scale;\n  }\n\n  return scaled.toFixed(precision) + suffix;\n};\n\nexport const formatAmount = (\n  val: number,\n  precision: number = 2,\n  abbr: boolean = true,\n) => (abbr ? abbreviateNumber(val, precision) : val.toFixed(precision));\n\nexport function formatTokenAmount(\n  account?: TokenAccount | number | BN,\n  mint?: MintInfo,\n  rate: number = 1.0,\n  prefix = '',\n  suffix = '',\n  precision = 2,\n  abbr = false,\n): string {\n  if (!account) {\n    return '';\n  }\n\n  return `${[prefix]}${formatAmount(\n    fromLamports(account, mint, rate),\n    precision,\n    abbr,\n  )}${suffix}`;\n}\n\nexport const formatUSD = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n});\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n};\n\nexport const formatPct = new Intl.NumberFormat('en-US', {\n  style: 'percent',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport function convert(\n  account?: TokenAccount | number,\n  mint?: MintInfo,\n  rate: number = 1.0,\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount =\n    typeof account === 'number' ? account : account.info.amount?.toNumber();\n\n  const precision = Math.pow(10, mint?.decimals || 0);\n  let result = (amount / precision) * rate;\n\n  return result;\n}\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n"],"sourceRoot":""}