{"version":3,"sources":["utils/ids.ts","contexts/ConnectionContext.tsx","utils/programIds.ts","components/DefaultModal/index.tsx","utils/merkleTree.ts","contexts/AccountContext.tsx","utils/notifications.tsx","components/ExplorerLink/index.tsx","utils/eventEmitter.ts","components/Settings/index.tsx","contexts/ColorModeContext.tsx","utils/borsh.ts","utils/merkleDistributor.ts","contexts/WalletContext/wallet.less","contexts/WalletContext/WalletContext.tsx","contexts/ModalContext.tsx","components/Claim.tsx","components/Close.tsx","components/Create.tsx","components/DragAndDrop.tsx","components/Centered.tsx","components/ConnectButton.tsx","components/Header/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx","constants/math.ts","utils/utils.ts"],"names":["WRAPPED_SOL_MINT","Map","PublicKey","TOKEN_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","BPF_UPGRADE_LOADER_ID","MEMO_ID","SYSTEM","TOKEN_METADATA_PROGRAM_ID","CANDY_MACHINE_ID","MERKLE_DISTRIBUTOR_ID","MERKLE_TEMPORAL_SIGNER","fetchCoder","address","connection","a","anchor","fetchIdl","getCandyConfig","config","configKey","Error","getAccountInfo","configAccount","owner","equals","toBase58","getCandyMachineAddress","uuid","findProgramAddress","Buffer","from","toBuffer","getCandyMachine","candyMachineKey","candyMachineCoder","candyMachineAccount","accounts","decode","data","ENDPOINTS","name","endpoint","ChainId","MainnetBeta","Devnet","DEFAULT","ConnectionContext","React","createContext","setEndpoint","Connection","env","tokens","tokenMap","ConnectionProvider","children","undefined","useLocalStorageState","useMemo","find","end","useState","setTokens","setTokenMap","useEffect","TokenListProvider","resolve","then","container","list","excludeByTag","filterByChainId","getList","knownMints","reduce","map","item","set","id","onAccountChange","Keypair","generate","publicKey","removeAccountChangeListener","onSlotChange","removeSlotChangeListener","Provider","value","useConnection","useContext","useConnectionConfig","context","SequenceType","getErrorForTransaction","txid","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","forEach","log","m","regex","exec","index","lastIndex","length","push","sendTransactionsWithManualRetry","wallet","instructions","signers","stopPoint","tries","lastInstructionsLength","toRemoveSigners","filter","instr","i","filteredSigners","_","slice","sendTransactionWithRetry","sendTransactions","StopOnFailure","console","error","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","transaction","Transaction","instruction","add","recentBlockhash","blockhash","setSigners","s","partialSign","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","slot","catch","reason","Promise","all","sendTransaction","awaitConfirmation","includesFeePayer","signTransaction","rawTransaction","serialize","options","skipPreflight","sendRawTransaction","awaitTransactionSignatureConfirmation","DEFAULT_TIMEOUT","confirmation","err","notify","message","description","type","beforeSend","getUnixTs","Date","getTime","timeout","startTime","done","sleep","simulateResult","simulateTransaction","logs","line","startsWith","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","result","envFor","_rpcEndpoint","cfg","explorerLinkFor","queryStatus","status","confirmations","subId","reject","setTimeout","onSignature","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","programIds","token","associatedToken","bpf_upgrade_loader","system","memo","DefaultModal","props","bodyStyle","closeIcon","width","rest","style","background","borderRadius","display","flexDirection","alignItems","footer","MerkleTree","leafs","layers","this","hashes","nodeHash","acc","cur","idx","arr","nxt","internalHash","Array","proof","layer","sibling","Math","floor","getRoot","getProof","el","root","pair","keccak_256","digest","first","second","sort","compare","fst","snd","leaf","AccountsContext","pendingCalls","genericCache","pendingMintCalls","mintCache","getMintInfo","pubKey","info","deserializeMint","TokenAccountParser","buffer","deserializeAccount","pubkey","account","keyToAccountParser","cache","emitter","EventEmitter","query","parser","get","obj","isActive","deserialize","registerParser","delete","Function","isNew","has","raiseCacheUpdated","key","raiseCacheDeleted","byParser","keys","queryMint","mint","getMint","addMint","UseNativeAccount","useWallet","nativeAccount","setNativeAccount","updateCache","useCallback","wrapped","amount","u64","lamports","delegate","delegatedAmount","isInitialized","isFrozen","isNative","rentExemptReserve","closeAuthority","wrapNativeAccount","updateAccount","PRECACHED_OWNERS","Set","precacheUserTokenAccounts","getTokenAccountsByOwner","programId","AccountsProvider","tokenAccounts","setTokenAccounts","userAccounts","setUserAccounts","walletKey","selectUserAccounts","subs","onCache","tokenSubID","onProgramAccountChange","accountId","accountInfo","AccountLayout","span","removeProgramAccountChangeListener","fromBuffer","delegateOption","state","isNativeOption","closeAuthorityOption","MintLayout","mintInfo","mintAuthorityOption","mintAuthority","supply","freezeAuthorityOption","freezeAuthority","placement","notification","color","opacity","backgroundColor","ExplorerLink","code","href","target","rel","title","Text","shortenAddress","CacheUpdateEvent","CacheDeleteEvent","MarketUpdateEvent","ids","Emitter","callback","on","removeListener","emit","Settings","additionalSettings","connected","disconnect","setVisible","useWalletModal","open","setModal","useModal","theme","useTheme","colorModeCtx","useColorMode","handleConnect","ModalEnum","WALLET","sx","minWidth","marginBottom","onChange","variant","onClick","marginLeft","navigator","clipboard","writeText","ml","toggleColorMode","palette","mode","ColorModeContext","ColorModeContextProvider","setMode","prevMode","BinaryReader","prototype","readPubkey","array","readFixedArray","BinaryWriter","writePubkey","writeFixedArray","readPubkeyAsString","base58","encode","writePubkeyAsString","idl","require","coder","Coder","WalletModalContext","WalletModal","wallets","selected","select","visible","setShowWallets","close","onCancel","height","textAlign","verticalAlign","fontWeight","fontSize","lineHeight","size","icon","alt","src","marginRight","float","WalletModalProvider","setConnected","keyToDisplay","substring","WalletProvider","getPhantomWallet","getSolflareWallet","getTorusWallet","clientId","getLedgerWallet","getSolongWallet","getMathWallet","getSolletWallet","onError","autoConnect","ModalContext","removeModal","buildMintClaim","distributorKey","distributorInfo","tokenAcc","handle","pin","tokenAccKey","distTokenAccount","tokenAccountInfo","pdaSeeds","toArray","claimantPda","BN","verifyClaim","claimStatus","cbump","walletTokenKey","setup","Token","createAssociatedTokenAccountInstruction","claimAirdrop","TransactionInstruction","isSigner","isWritable","SystemProgram","sha256","concat","getMetadata","getMasterEdition","buildCandyClaim","candyConfig","candyUUID","claimCount","distributorWalletKey","wbump","temporalSigner","temporal","default","claimCountAccount","nftsAlreadyMinted","claimAccountInfo","count","claimant","claimantStr","nftsAvailable","candyMachine","candyMachineMints","buildSingleCandyMint","instrs","candyMachineWallet","candyMachineMint","candyMachineMetadata","candyMachineMaster","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","createAccount","createInitMintInstruction","createMintToInstruction","SYSVAR_RENT_PUBKEY","SYSVAR_CLOCK_PUBKEY","fetchDistributor","distributorStr","ownerStr","fetchNeedsTemporalSigner","indexStr","claimMethod","Number","Claim","params","queryString","parse","location","search","distributor","setDistributor","setClaimMethod","setTokenAcc","setCandyConfig","setCandyUUID","setHandle","amountStr","setAmount","setIndex","pinStr","setPin","proofStr","setProof","allFieldsPopulated","editable","setEditable","setTransaction","OTPStr","setOTPStr","asyncNeedsTemporalSigner","setNeedsTemporalSigner","wrap","client","LambdaClient","region","credentials","accessKeyId","secretAccessKey","sendOTP","preventDefault","isNaN","split","b","ret","bs58","extraSigners","feePayer","FunctionName","Payload","Uint8Array","method","seeds","send","InvokeCommand","StatusCode","resp","MessageId","verifyOTP","signatures","some","OTP","otp","blob","sig","body","addSignature","fullySigned","claimResult","loading","setLoading","loadingProgress","position","top","left","marginTop","claimData","Fragment","label","disabled","steps","inner","fullWidth","labelId","localStorage","setItem","multiline","needsTemporalSigner","activeStep","setActiveStep","stepToUse","min","stepper","spacing","prev","Close","baseKey","setBaseKey","getItem","submit","base","fromSecretKey","dbump","extraKeys","closeDistributor","closeResult","randomBytes","buf","window","crypto","getRandomValues","WHITESPACE","formatDropMessage","drop","subject","url","setupSender","auth","source","SESClient","formatted","Destination","ToAddresses","Message","Subject","Data","Charset","Body","Html","Source","SendEmailCommand","response","$metadata","httpStatusCode","setupSes","mintUrl","parseClaimants","input","reactModal","renderModal","document","createElement","appendChild","destroyModal","ReactDOM","unmountComponentAtNode","removeChild","onSubmit","onDismiss","render","show","displayModal","finally","hideModal","mintKey","mintAccount","mintOwner","getCreatorTokenAccount","totalClaim","creatorTokenKey","creatorTokenAccount","creatorTokenInfo","toNumber","Create","setMint","filename","setFilename","text","setText","claimURLs","setClaimURLs","otpAuth","setOtpAuth","commMethod","setCommMethod","commAuth","setCommAuth","commSource","setCommSource","awsAccessKeyId","setAwsAccessKeyId","awsSecretKey","setAwsSecretKey","mailcAPIKey","setMailcAPIKey","explorerUrlFor","displayMintTokens","String","pow","decimals","claimants","c","claimInfo","total","isTokenAirdrop","remaining","itemsAvailable","itemsRedeemed","mightHaveExisting","click","direction","opt","resendOnly","sender","seed","bump","pda","tree","verifyProof","join","origin","pathname","maxHeight","border","component","scope","createApproveInstruction","createResult","handleFiles","files","file","reader","FileReader","onload","readAsText","fileUpload","handleDrop","justifyContent","alignContent","padding","hidden","createAirdrop","hyperLinkData","encoded","encodeURIComponent","underline","apiKey","commAuthorization","secretKey","download","DragAndDrop","dropRef","useRef","dragCounter","setDragCounter","dragging","setDragging","handleDrag","stopPropagation","handleDragIn","dataTransfer","items","handleDragOut","remainingDrags","clearData","node","current","addEventListener","removeEventListener","shade","ref","Centered","ConnectButton","isConnected","onClickConnect","onClickChange","restProps","ButtonGroup","Header","handleChange","AppBar","Box","bgcolor","Stack","Link","Button","flexGrow","About","to","getWindowDimensions","innerWidth","innerHeight","App","disabledColor","createTheme","action","windowDimensions","setWindowDimensions","handleResize","useWindowDimensions","className","ThemeProvider","CssBaseline","path","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","getElementById","TEN","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","defaultState","storedState","setState","setLocalStorageState","newState","removeItem","chars","chunks","apply","ceil","currency","ms"],"mappings":"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","file":"static/js/main.ea67511a.chunk.js","sourcesContent":["import * as anchor from '@project-serum/anchor';\nimport { Connection, PublicKey, AccountInfo } from '@solana/web3.js';\n\nexport type StringPublicKey = string;\n\nexport class LazyAccountInfoProxy<T> {\n  executable: boolean = false;\n  owner: StringPublicKey = '';\n  lamports: number = 0;\n\n  get data() {\n    //\n    return undefined as unknown as T;\n  }\n}\n\nexport interface LazyAccountInfo {\n  executable: boolean;\n  owner: StringPublicKey;\n  lamports: number;\n  data: [string, string];\n}\n\nconst PubKeysInternedMap = new Map<string, PublicKey>();\n\nexport const toPublicKey = (key: string | PublicKey) => {\n  if (typeof key !== 'string') {\n    return key;\n  }\n\n  let result = PubKeysInternedMap.get(key);\n  if (!result) {\n    result = new PublicKey(key);\n    PubKeysInternedMap.set(key, result);\n  }\n\n  return result;\n};\n\nexport interface PublicKeyStringAndAccount<T> {\n  pubkey: string;\n  account: AccountInfo<T>;\n}\n\nexport const WRAPPED_SOL_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n\nexport const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const BPF_UPGRADE_LOADER_ID = new PublicKey('BPFLoaderUpgradeab1e11111111111111111111111');\n\nexport const MEMO_ID = new PublicKey('MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr');\n\nexport const SYSTEM = new PublicKey('11111111111111111111111111111111');\n\nexport const TOKEN_METADATA_PROGRAM_ID = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n\nexport const CANDY_MACHINE_ID = new PublicKey('DDnmBpiGYyeoPGqfjxEoANTP5x3WXzU4NYv8tdHmGyPi');\n\nexport const MERKLE_DISTRIBUTOR_ID = new PublicKey(\"561gX85SDR4hYF2L7P4LcvdXsWSxWuY7Z1yGgznPwSXG\");\n\nexport const MERKLE_TEMPORAL_SIGNER = new PublicKey(\"MSv9H2sMceAzccBganUXwGq3GXgqYAstmZAbFDZYbAV\");\n\nexport const fetchCoder = async (\n  address : anchor.Address,\n  connection : Connection,\n) : Promise<anchor.Coder | null> => {\n  return new anchor.Coder(await anchor.Program.fetchIdl(\n      address, { connection: connection } as anchor.Provider));\n}\n\nexport const getCandyConfig = async (\n  connection : Connection,\n  config : string\n) : Promise<PublicKey> => {\n  let configKey : PublicKey;\n  try {\n    configKey = new PublicKey(config);\n  } catch (err) {\n    throw new Error(`Invalid config key ${err}`);\n  }\n  const configAccount = await connection.getAccountInfo(configKey);\n  if (configAccount === null) {\n    throw new Error(`Could not fetch config`);\n  }\n  if (!configAccount.owner.equals(CANDY_MACHINE_ID)) {\n    throw new Error(`Invalid config owner ${configAccount.owner.toBase58()}`);\n  }\n  return configKey;\n};\n\nexport const getCandyMachineAddress = async (\n  config: PublicKey,\n  uuid: string,\n) => {\n  return await PublicKey.findProgramAddress(\n    [Buffer.from(\"candy_machine\"), config.toBuffer(), Buffer.from(uuid)],\n    CANDY_MACHINE_ID,\n  );\n};\n\nexport const getCandyMachine = async (\n  connection : Connection,\n  candyMachineKey : PublicKey,\n) => {\n  const candyMachineCoder = await fetchCoder(CANDY_MACHINE_ID, connection);\n  if (candyMachineCoder === null) {\n    throw new Error(`Could not fetch candy machine IDL`);\n  }\n  const candyMachineAccount = await connection.getAccountInfo(candyMachineKey);\n  if (candyMachineAccount === null) {\n    throw new Error(`Could not fetch candy machine`);\n  }\n  return candyMachineCoder.accounts.decode(\n      \"CandyMachine\", candyMachineAccount.data);\n}\n","import { sleep, useLocalStorageState } from \"../utils/utils\";\nimport {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from \"@solana/web3.js\";\nimport React, { useContext, useEffect, useMemo, useState } from \"react\";\nimport { notify } from \"../utils/notifications\";\nimport { ExplorerLink } from \"../components/ExplorerLink\";\nimport {\n  TokenInfo,\n  TokenListProvider,\n  ENV as ChainId,\n} from \"@solana/spl-token-registry\";\nimport { WalletSigner } from \"./WalletContext/WalletContext\";\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport type ENV = \"mainnet-beta\" | \"testnet\" | \"devnet\" | \"localnet\";\n\nexport const ENDPOINTS = [\n  {\n    name: \"mainnet-beta\" as ENV,\n    endpoint: \"https://api.mainnet-beta.solana.com\",\n    ChainId: ChainId.MainnetBeta,\n  },\n  {\n    name: \"devnet\" as ENV,\n    endpoint: \"https://api.devnet.solana.com\",\n    ChainId: ChainId.Devnet,\n  },\n];\n\nconst DEFAULT = ENDPOINTS[0].endpoint;\n\ninterface ConnectionConfig {\n  connection: Connection;\n  endpoint: string;\n  env: ENV;\n  setEndpoint: (val: string) => void;\n  tokens: TokenInfo[];\n  tokenMap: Map<string, TokenInfo>;\n}\n\nconst ConnectionContext = React.createContext<ConnectionConfig>({\n  endpoint: DEFAULT,\n  setEndpoint: () => {},\n  connection: new Connection(DEFAULT, \"recent\"),\n  env: ENDPOINTS[0].name,\n  tokens: [],\n  tokenMap: new Map<string, TokenInfo>(),\n});\n\nexport function ConnectionProvider({ children = undefined as any }) {\n  const [endpoint, setEndpoint] = useLocalStorageState(\n    \"connectionEndpoint\",\n    ENDPOINTS[0].endpoint\n  );\n\n  const connection = useMemo(\n    () => new Connection(endpoint, \"recent\"),\n    [endpoint]\n  );\n\n  const env =\n    ENDPOINTS.find((end) => end.endpoint === endpoint)?.name ||\n    ENDPOINTS[0].name;\n\n  const [tokens, setTokens] = useState<TokenInfo[]>([]);\n  const [tokenMap, setTokenMap] = useState<Map<string, TokenInfo>>(new Map());\n  useEffect(() => {\n    // fetch token files\n    new TokenListProvider().resolve().then((container) => {\n      const list = container\n        .excludeByTag(\"nft\")\n        .filterByChainId(\n          ENDPOINTS.find((end) => end.endpoint === endpoint)?.ChainId ||\n            ChainId.MainnetBeta\n        )\n        .getList();\n\n      const knownMints = [...list].reduce((map, item) => {\n        map.set(item.address, item);\n        return map;\n      }, new Map<string, TokenInfo>());\n\n      setTokenMap(knownMints);\n      setTokens(list);\n    });\n  }, [env, endpoint]);\n\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n  // This is a hack to prevent the list from every getting empty\n  useEffect(() => {\n    const id = connection.onAccountChange(\n      Keypair.generate().publicKey,\n      () => {}\n    );\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = connection.onSlotChange(() => null);\n    return () => {\n      connection.removeSlotChangeListener(id);\n    };\n  }, [connection]);\n\n  return (\n    <ConnectionContext.Provider\n      value={{\n        endpoint,\n        setEndpoint,\n        connection,\n        tokens,\n        tokenMap,\n        env,\n      }}\n    >\n      {children}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport function useConnection() {\n  return useContext(ConnectionContext).connection as Connection;\n}\n\nexport function useConnectionConfig() {\n  const context = useContext(ConnectionContext);\n  return {\n    endpoint: context.endpoint,\n    setEndpoint: context.setEndpoint,\n    env: context.env,\n    tokens: context.tokens,\n    tokenMap: context.tokenMap,\n  };\n}\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: WalletSigner,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][]\n) {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength: any = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n\n \n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          \"single\"\n        );\n        stopPoint = 1;\n      } else {\n        stopPoint = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          \"single\"\n        );\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      \"Died on \",\n      stopPoint,\n      \"retrying from instruction\",\n      instructions[stopPoint],\n      \"instructions length is\",\n      instructions.length\n    );\n    lastInstructionsLength = instructions.length;\n  }\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: WalletSigner,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = \"singleGossip\",\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator\n): Promise<number> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = [];\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  let breakEarlyObject = { breakEarly: false, i: 0 };\n  console.log(\n    \"Signed txns length\",\n    signedTxns.length,\n    \"vs handed in length\",\n    instructionSet.length\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    signedTxnPromise\n      .then(({ txid, slot }) => {\n        successCallback(txid, i);\n      })\n      .catch((reason) => {\n        // @ts-ignore\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          breakEarlyObject.breakEarly = true;\n          breakEarlyObject.i = i;\n        }\n      });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise;\n      } catch (e) {\n        console.log(\"Caught failure\", e);\n        if (breakEarlyObject.breakEarly) {\n          console.log(\"Died on \", breakEarlyObject.i);\n          return breakEarlyObject.i; // Return the txn we failed on by index\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    await Promise.all(pendingTxns);\n  }\n\n  return signedTxns.length;\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: WalletSigner,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n      notify({\n        message: \"Transaction failed...\",\n        description: (\n          <>\n            {errors.map((err) => (\n              <div>{err}</div>\n            ))}\n            <ExplorerLink address={txid} type=\"transaction\" />\n          </>\n        ),\n        type: \"error\",\n      });\n\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: WalletSigner,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void\n) : Promise<string| { txid: string; slot: number }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    try {\n      transaction = await wallet.signTransaction(transaction);\n    } catch {\n      return \"Failed to sign transaction\";\n    }\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n  console.log(\"About to send\");\n  try {\n    const { txid, slot } = await sendSignedTransaction({\n      connection,\n      signedTransaction: transaction,\n    });\n\n    return { txid, slot };\n  } catch (error) {\n    console.error(error);\n    return \"See console logs\";\n  }\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    }\n  );\n\n  console.log(\"Started awaiting confirmation for\", txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      \"recent\",\n      true\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error(\"Transaction failed: Custom instruction error\");\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err) {\n    console.error(\"Timeout Error caught\", err);\n    if ((err as any).timeout) {\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, \"single\")\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith(\"Program log: \")) {\n            throw new Error(\n              \"Transaction failed: \" + line.slice(\"Program log: \".length)\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log(\"Latency\", txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config: any = { encoding: \"base64\", commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\n  if (res.error) {\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\n  }\n  return res.result;\n}\n\nexport const envFor = (\n  connection: Connection\n) : string => {\n  let endpoint = (connection as any)._rpcEndpoint;\n  let env = \"mainnet-beta\";\n  for (const cfg of ENDPOINTS) {\n    if (cfg.endpoint === endpoint) {\n      env = cfg.name;\n      break;\n    }\n  }\n  return env;\n}\n\nexport const explorerLinkFor = (\n  txid: TransactionSignature,\n  connection: Connection\n) : string => {\n  return `https://explorer.solana.com/tx/${txid}?cluster=${envFor(connection)}`;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = \"recent\",\n  queryStatus = false\n): Promise<SignatureStatus | null | void> {\n\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          console.log(explorerLinkFor(txid, connection));\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\n","import {\n  TOKEN_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  BPF_UPGRADE_LOADER_ID,\n  SYSTEM,\n  MEMO_ID,\n} from './ids';\n\nexport const setProgramIds = async () => {};\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n    associatedToken: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    bpf_upgrade_loader: BPF_UPGRADE_LOADER_ID,\n    system: SYSTEM,\n    memo: MEMO_ID,\n    // store: STORE,\n  };\n};\n","import React from \"react\";\nimport { Modal } from \"antd\";\n\nimport \"./index.css\";\n\nexport const DefaultModal = (props: any) => {\n  const { children, closeIcon, bodyStyle, width, style, ...rest } = props;\n\n  return (\n    <Modal\n      style={{ background: \"transparent\", borderRadius: 16 }}\n      bodyStyle={{\n        background: \"#333333\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        ...bodyStyle,\n      }}\n      footer={null}\n      width={\n        width || 400\n      }\n      {...rest}\n    >\n      {children}\n    </Modal>\n  );\n};\n","import { keccak_256 } from \"js-sha3\";\n\nexport class MerkleTree {\n  leafs: Array<Buffer>;\n  layers: Array<Array<Buffer>>;\n\n  constructor(leafs : Array<Buffer>) {\n    this.leafs = leafs.slice();\n    this.layers = [];\n\n    let hashes = this.leafs.map(MerkleTree.nodeHash);\n    while (hashes.length > 0) {\n      console.log(\"Hashes\", this.layers.length, hashes);\n      this.layers.push(hashes.slice());\n      if (hashes.length === 1) break;\n      hashes = hashes.reduce((acc, cur, idx, arr) => {\n        if (idx % 2 === 0) {\n          const nxt = arr[idx + 1];\n          acc.push(MerkleTree.internalHash(cur, nxt));\n        }\n        return acc;\n      }, Array<Buffer>());\n    }\n  }\n\n  static nodeHash(\n    data : Buffer,\n  ) : Buffer {\n    return Buffer.from(keccak_256.digest([0x00, ...data]));\n  }\n\n\n  static internalHash(\n    first : Buffer,\n    second : Buffer | undefined,\n  ) : Buffer {\n    if (!second) return first;\n    const [fst, snd] = [first, second].sort(Buffer.compare)\n    return Buffer.from(\n      keccak_256.digest([0x01, ...fst, ...snd])\n    );\n  }\n\n  getRoot() : Buffer {\n    return this.layers[this.layers.length - 1][0];\n  }\n\n  getProof(idx : number) : Buffer[] {\n    return this.layers.reduce((proof, layer) => {\n      const sibling = idx ^ 1;\n      if (sibling < layer.length) {\n        proof.push(layer[sibling]);\n      }\n\n      idx = Math.floor(idx / 2);\n\n      return proof;\n    }, []);\n  }\n\n  getHexRoot(): string {\n    return this.getRoot().toString(\"hex\");\n  }\n\n  getHexProof(idx : number) : string[] {\n    return this.getProof(idx).map((el) => el.toString(\"hex\"));\n  }\n\n  verifyProof(\n    idx : number,\n    proof : Buffer[],\n    root : Buffer\n  ): boolean {\n    let pair = MerkleTree.nodeHash(this.leafs[idx]);\n    for (const item of proof) {\n      pair = MerkleTree.internalHash(pair, item);\n    }\n\n    return pair.equals(root);\n  }\n\n  static verifyClaim(\n    leaf : Buffer,\n    proof : Buffer[],\n    root : Buffer\n  ): boolean {\n    let pair = MerkleTree.nodeHash(leaf);\n    for (const item of proof) {\n      pair = MerkleTree.internalHash(pair, item);\n    }\n\n    return pair.equals(root);\n  }\n\n}\n","import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport { useConnection } from './ConnectionContext';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport { AccountLayout, MintInfo, MintLayout, u64 } from '@solana/spl-token';\nimport { TokenAccount } from '../models';\nimport { chunks } from '../utils/utils';\nimport { EventEmitter } from '../utils/eventEmitter';\nimport { StringPublicKey, WRAPPED_SOL_MINT } from '../utils/ids';\nimport { programIds } from '../utils/programIds';\n\nconst AccountsContext = React.createContext<any>(null);\n\nconst pendingCalls = new Map<string, Promise<ParsedAccountBase>>();\nconst genericCache = new Map<string, ParsedAccountBase>();\nconst pendingMintCalls = new Map<string, Promise<MintInfo>>();\nconst mintCache = new Map<string, MintInfo>();\n\nexport interface ParsedAccountBase {\n  pubkey: StringPublicKey;\n  account: AccountInfo<Buffer>;\n  info: any; // TODO: change to unknown\n}\n\nexport type AccountParser = (\n  pubkey: StringPublicKey,\n  data: AccountInfo<Buffer>,\n) => ParsedAccountBase | undefined;\n\nexport interface ParsedAccount<T> extends ParsedAccountBase {\n  info: T;\n}\n\nconst getMintInfo = async (connection: Connection, pubKey: PublicKey) => {\n  const info = await connection.getAccountInfo(pubKey);\n  if (info === null) {\n    throw new Error('Failed to find mint account');\n  }\n\n  const data = Buffer.from(info.data);\n\n  return deserializeMint(data);\n};\n\nexport const MintParser = (pubKey: string, info: AccountInfo<Buffer>) => {\n  const buffer = Buffer.from(info.data);\n\n  const data = deserializeMint(buffer);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: data,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const TokenAccountParser = (\n  pubKey: string,\n  info: AccountInfo<Buffer>,\n) => {\n  // Sometimes a wrapped sol account gets closed, goes to 0 length,\n  // triggers an update over wss which triggers this guy to get called\n  // since your UI already logged that pubkey as a token account. Check for length.\n  if (info.data.length > 0) {\n    const buffer = Buffer.from(info.data);\n    const data = deserializeAccount(buffer);\n\n    const details = {\n      pubkey: pubKey,\n      account: {\n        ...info,\n      },\n      info: data,\n    } as TokenAccount;\n\n    return details;\n  }\n};\n\nexport const GenericAccountParser = (\n  pubKey: string,\n  info: AccountInfo<Buffer>,\n) => {\n  const buffer = Buffer.from(info.data);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: buffer,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const keyToAccountParser = new Map<string, AccountParser>();\n\nexport const cache = {\n  emitter: new EventEmitter(),\n  query: async (\n    connection: Connection,\n    pubKey: string | PublicKey,\n    parser?: AccountParser,\n  ) => {\n    let id: PublicKey;\n    if (typeof pubKey === 'string') {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n\n    let account = genericCache.get(address);\n    if (account) {\n      return account;\n    }\n\n    let query = pendingCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    // TODO: refactor to use multiple accounts query with flush like behavior\n    query = connection.getAccountInfo(id).then(data => {\n      if (!data) {\n        throw new Error('Account not found');\n      }\n\n      return cache.add(id, data, parser);\n    }) as Promise<TokenAccount>;\n    pendingCalls.set(address, query as any);\n\n    return query;\n  },\n  add: (\n    id: PublicKey | string,\n    obj: AccountInfo<Buffer>,\n    parser?: AccountParser,\n    isActive?: boolean | undefined | ((parsed: any) => boolean),\n  ) => {\n    const address = typeof id === 'string' ? id : id?.toBase58();\n    const deserialize = parser ? parser : keyToAccountParser.get(address);\n    if (!deserialize) {\n      throw new Error(\n        'Deserializer needs to be registered or passed as a parameter',\n      );\n    }\n\n    cache.registerParser(id, deserialize);\n    pendingCalls.delete(address);\n    const account = deserialize(address, obj);\n    if (!account) {\n      return;\n    }\n\n    if (isActive === undefined) isActive = true;\n    else if (isActive instanceof Function) isActive = isActive(account);\n\n    const isNew = !genericCache.has(address);\n\n    genericCache.set(address, account);\n    cache.emitter.raiseCacheUpdated(address, isNew, deserialize, isActive);\n    return account;\n  },\n  get: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== 'string') {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return genericCache.get(key);\n  },\n  delete: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== 'string') {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    if (genericCache.get(key)) {\n      genericCache.delete(key);\n      cache.emitter.raiseCacheDeleted(key);\n      return true;\n    }\n    return false;\n  },\n\n  byParser: (parser: AccountParser) => {\n    const result: string[] = [];\n    for (const id of keyToAccountParser.keys()) {\n      if (keyToAccountParser.get(id) === parser) {\n        result.push(id);\n      }\n    }\n\n    return result;\n  },\n  registerParser: (pubkey: PublicKey | string, parser: AccountParser) => {\n    if (pubkey) {\n      const address = typeof pubkey === 'string' ? pubkey : pubkey?.toBase58();\n      keyToAccountParser.set(address, parser);\n    }\n\n    return pubkey;\n  },\n  queryMint: async (connection: Connection, pubKey: string | PublicKey) => {\n    let id: PublicKey;\n    if (typeof pubKey === 'string') {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n    let mint = mintCache.get(address);\n    if (mint) {\n      return mint;\n    }\n\n    let query = pendingMintCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    query = getMintInfo(connection, id).then(data => {\n      pendingMintCalls.delete(address);\n\n      mintCache.set(address, data);\n      return data;\n    }) as Promise<MintInfo>;\n    pendingMintCalls.set(address, query as any);\n\n    return query;\n  },\n  getMint: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== 'string') {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return mintCache.get(key);\n  },\n  addMint: (pubKey: PublicKey, obj: AccountInfo<Buffer>) => {\n    const mint = deserializeMint(obj.data);\n    const id = pubKey.toBase58();\n    mintCache.set(id, mint);\n    return mint;\n  },\n};\n\nexport const useAccountsContext = () => {\n  const context = useContext(AccountsContext);\n\n  return context;\n};\n\nfunction wrapNativeAccount(\n  pubkey: string,\n  account?: AccountInfo<Buffer>,\n): TokenAccount | undefined {\n  if (!account) {\n    return undefined;\n  }\n\n  const key = new PublicKey(pubkey);\n\n  return {\n    pubkey: pubkey,\n    account,\n    info: {\n      address: key,\n      mint: WRAPPED_SOL_MINT,\n      owner: key,\n      amount: new u64(account.lamports),\n      delegate: null,\n      delegatedAmount: new u64(0),\n      isInitialized: true,\n      isFrozen: false,\n      isNative: true,\n      rentExemptReserve: null,\n      closeAuthority: null,\n    },\n  };\n}\n\nexport const getCachedAccount = (\n  predicate: (account: TokenAccount) => boolean,\n) => {\n  for (const account of genericCache.values()) {\n    if (predicate(account)) {\n      return account as TokenAccount;\n    }\n  }\n};\n\nconst UseNativeAccount = () => {\n  const connection = useConnection();\n  const { publicKey } = useWallet();\n\n  const [nativeAccount, setNativeAccount] = useState<AccountInfo<Buffer>>();\n\n  const updateCache = useCallback(\n    account => {\n      if (publicKey) {\n        const wrapped = wrapNativeAccount(publicKey.toBase58(), account);\n        if (wrapped !== undefined) {\n          const id = publicKey.toBase58();\n          cache.registerParser(id, TokenAccountParser);\n          genericCache.set(id, wrapped as TokenAccount);\n          cache.emitter.raiseCacheUpdated(id, false, TokenAccountParser, true);\n        }\n      }\n    },\n    [publicKey],\n  );\n\n  useEffect(() => {\n    let subId = 0;\n    const updateAccount = (account: AccountInfo<Buffer> | null) => {\n      if (account) {\n        updateCache(account);\n        setNativeAccount(account);\n      }\n    };\n\n    (async () => {\n      if (!connection || !publicKey) {\n        return;\n      }\n\n      try {\n        const account = await connection.getAccountInfo(publicKey);\n        updateAccount(account);\n      } catch {\n        return;\n      }\n\n      subId = connection.onAccountChange(publicKey, updateAccount);\n    })();\n\n    return () => {\n      if (subId) {\n        connection.removeAccountChangeListener(subId);\n      }\n    };\n  }, [setNativeAccount, publicKey, connection, updateCache]);\n\n  return { nativeAccount };\n};\n\nconst PRECACHED_OWNERS = new Set<string>();\nconst precacheUserTokenAccounts = async (\n  connection: Connection,\n  owner?: PublicKey,\n) => {\n  if (!owner) {\n    return;\n  }\n\n  // used for filtering account updates over websocket\n  PRECACHED_OWNERS.add(owner.toBase58());\n\n  // user accounts are updated via ws subscription\n  const accounts = await connection.getTokenAccountsByOwner(owner, {\n    programId: programIds().token,\n  });\n\n  accounts.value.forEach(info => {\n    cache.add(info.pubkey.toBase58(), info.account, TokenAccountParser);\n  });\n};\n\nexport function AccountsProvider({ children = null as any }) {\n  const connection = useConnection();\n  const { publicKey } = useWallet();\n  const [tokenAccounts, setTokenAccounts] = useState<TokenAccount[]>([]);\n  const [userAccounts, setUserAccounts] = useState<TokenAccount[]>([]);\n  const { nativeAccount } = UseNativeAccount();\n  const walletKey = publicKey?.toBase58();\n\n  const selectUserAccounts = useCallback(() => {\n    return cache\n      .byParser(TokenAccountParser)\n      .map(id => cache.get(id))\n      .filter(a => a && a.info.owner.toBase58() === walletKey)\n      .map(a => a as TokenAccount);\n  }, [walletKey]);\n\n  useEffect(() => {\n    const accounts = selectUserAccounts().filter(\n      a => a !== undefined,\n    ) as TokenAccount[];\n    setUserAccounts(accounts);\n  }, [nativeAccount, tokenAccounts, selectUserAccounts]);\n\n  useEffect(() => {\n    const subs: number[] = [];\n    cache.emitter.onCache(args => {\n      if (args.isNew && args.isActive) {\n        let id = args.id;\n        let deserialize = args.parser;\n        connection.onAccountChange(new PublicKey(id), info => {\n          cache.add(id, info, deserialize);\n        });\n      }\n    });\n\n    return () => {\n      subs.forEach(id => connection.removeAccountChangeListener(id));\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    if (!connection || !publicKey) {\n      setTokenAccounts([]);\n    } else {\n      precacheUserTokenAccounts(connection, publicKey).then(() => {\n        setTokenAccounts(selectUserAccounts());\n      });\n\n      // This can return different types of accounts: token-account, mint, multisig\n      // TODO: web3.js expose ability to filter.\n      // this should use only filter syntax to only get accounts that are owned by user\n      const tokenSubID = connection.onProgramAccountChange(\n        programIds().token,\n        info => {\n          // TODO: fix type in web3.js\n          const id = info.accountId as unknown as string;\n          // TODO: do we need a better way to identify layout (maybe a enum identifing type?)\n          if (info.accountInfo.data.length === AccountLayout.span) {\n            const data = deserializeAccount(info.accountInfo.data);\n\n            if (PRECACHED_OWNERS.has(data.owner.toBase58())) {\n              cache.add(id, info.accountInfo, TokenAccountParser);\n              setTokenAccounts(selectUserAccounts());\n            }\n          }\n        },\n        'singleGossip',\n      );\n\n      return () => {\n        connection.removeProgramAccountChangeListener(tokenSubID);\n      };\n    }\n  }, [connection, publicKey, selectUserAccounts]);\n\n  return (\n    <AccountsContext.Provider\n      value={{\n        userAccounts,\n        nativeAccount,\n      }}\n    >\n      {children}\n    </AccountsContext.Provider>\n  );\n}\n\nexport function useNativeAccount() {\n  const context = useContext(AccountsContext);\n  return {\n    account: context.nativeAccount as AccountInfo<Buffer>,\n  };\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const result = await Promise.all(\n    chunks(keys, 99).map(chunk =>\n      getMultipleAccountsCore(connection, chunk, commitment),\n    ),\n  );\n\n  const array = result\n    .map(\n      a =>\n        a.array.map(acc => {\n          if (!acc) {\n            return undefined;\n          }\n\n          const { data, ...rest } = acc;\n          const obj = {\n            ...rest,\n            data: Buffer.from(data[0], 'base64'),\n          } as AccountInfo<Buffer>;\n          return obj;\n        }) as AccountInfo<Buffer>[],\n    )\n    .flat();\n  return { keys, array };\n};\n\nconst getMultipleAccountsCore = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const args = connection._buildArgs([keys], commitment, 'base64');\n\n  const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\n  if (unsafeRes.error) {\n    throw new Error(\n      'failed to get info about account ' + unsafeRes.error.message,\n    );\n  }\n\n  if (unsafeRes.result.value) {\n    const array = unsafeRes.result.value as AccountInfo<string[]>[];\n    return { keys, array };\n  }\n\n  // TODO: fix\n  throw new Error();\n};\n\nexport function useMint(key?: string | PublicKey) {\n  const connection = useConnection();\n  const [mint, setMint] = useState<MintInfo>();\n\n  const id = typeof key === 'string' ? key : key?.toBase58();\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n\n    cache\n      .query(connection, id, MintParser)\n      .then(acc => setMint(acc.info as any))\n      .catch(err => console.log(err));\n\n    const dispose = cache.emitter.onCache(e => {\n      const event = e;\n      if (event.id === id) {\n        cache\n          .query(connection, id, MintParser)\n          .then(mint => setMint(mint.info as any));\n      }\n    });\n    return () => {\n      dispose();\n    };\n  }, [connection, id]);\n\n  return mint;\n}\n\nexport function useAccount(pubKey?: PublicKey) {\n  const connection = useConnection();\n  const [account, setAccount] = useState<TokenAccount>();\n\n  const key = pubKey?.toBase58();\n  useEffect(() => {\n    const query = async () => {\n      try {\n        if (!key) {\n          return;\n        }\n\n        const acc = await cache\n          .query(connection, key, TokenAccountParser)\n          .catch(err => console.log(err));\n        if (acc) {\n          setAccount(acc);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    query();\n\n    const dispose = cache.emitter.onCache(e => {\n      const event = e;\n      if (event.id === key) {\n        query();\n      }\n    });\n    return () => {\n      dispose();\n    };\n  }, [connection, key]);\n\n  return account;\n}\n\n// TODO: expose in spl package\nexport const deserializeAccount = (data: Buffer) => {\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n\n// TODO: expose in spl package\nexport const deserializeMint = (data: Buffer) => {\n  if (data.length !== MintLayout.span) {\n    throw new Error('Not a valid Mint');\n  }\n\n  const mintInfo = MintLayout.decode(data);\n\n  if (mintInfo.mintAuthorityOption === 0) {\n    mintInfo.mintAuthority = null;\n  } else {\n    mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\n  }\n\n  mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n  mintInfo.isInitialized = mintInfo.isInitialized !== 0;\n\n  if (mintInfo.freezeAuthorityOption === 0) {\n    mintInfo.freezeAuthority = null;\n  } else {\n    mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n  }\n\n  return mintInfo as MintInfo;\n};\n","import React from 'react';\nimport { notification } from 'antd';\n// import Link from '../components/Link';\n\nexport function notify({\n  message = '',\n  description = undefined as any,\n  txid = '',\n  type = 'info',\n  placement = 'bottomLeft',\n}) {\n  if (txid) {\n    //   <Link\n    //     external\n    //     to={'https://explorer.solana.com/tx/' + txid}\n    //     style={{ color: '#0000ff' }}\n    //   >\n    //     View transaction {txid.slice(0, 8)}...{txid.slice(txid.length - 8)}\n    //   </Link>\n\n    description = <></>;\n  }\n  (notification as any)[type]({\n    message: <span style={{ color: 'black' }}>{message}</span>,\n    description: (\n      <span style={{ color: 'black', opacity: 0.5 }}>{description}</span>\n    ),\n    placement,\n    style: {\n      backgroundColor: 'white',\n    },\n  });\n}\n","import React from 'react';\nimport { Typography } from 'antd';\nimport { shortenAddress } from '../../utils/utils';\nimport { PublicKey } from '@solana/web3.js';\n\nexport const ExplorerLink = (props: {\n  address: string | PublicKey;\n  type: string;\n  code?: boolean;\n  style?: React.CSSProperties;\n  length?: number;\n}) => {\n  const { type, code } = props;\n\n  const address =\n    typeof props.address === 'string'\n      ? props.address\n      : props.address?.toBase58();\n\n  if (!address) {\n    return null;\n  }\n\n  const length = props.length ?? 9;\n\n  return (\n    <a\n      href={`https://explorer.solana.com/${type}/${address}`}\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      title={address}\n      style={props.style}\n    >\n      {code ? (\n        <Typography.Text style={props.style} code>\n          {shortenAddress(address, length)}\n        </Typography.Text>\n      ) : (\n        shortenAddress(address, length)\n      )}\n    </a>\n  );\n};\n","import { EventEmitter as Emitter } from 'eventemitter3';\n\nexport class CacheUpdateEvent {\n  static type = 'CacheUpdate';\n  id: string;\n  parser: any;\n  isNew: boolean;\n  isActive: boolean;\n  constructor(id: string, isNew: boolean, parser: any, isActive: boolean) {\n    this.id = id;\n    this.parser = parser;\n    this.isNew = isNew;\n    this.isActive = isActive;\n  }\n}\n\nexport class CacheDeleteEvent {\n  static type = 'CacheUpdate';\n  id: string;\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport class MarketUpdateEvent {\n  static type = 'MarketUpdate';\n  ids: Set<string>;\n  constructor(ids: Set<string>) {\n    this.ids = ids;\n  }\n}\n\nexport class EventEmitter {\n  private emitter = new Emitter();\n\n  onMarket(callback: (args: MarketUpdateEvent) => void) {\n    this.emitter.on(MarketUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(MarketUpdateEvent.type, callback);\n  }\n\n  onCache(callback: (args: CacheUpdateEvent) => void) {\n    this.emitter.on(CacheUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(CacheUpdateEvent.type, callback);\n  }\n\n  raiseMarketUpdated(ids: Set<string>) {\n    this.emitter.emit(MarketUpdateEvent.type, new MarketUpdateEvent(ids));\n  }\n\n  raiseCacheUpdated(\n    id: string,\n    isNew: boolean,\n    parser: any,\n    isActive: boolean,\n  ) {\n    this.emitter.emit(\n      CacheUpdateEvent.type,\n      new CacheUpdateEvent(id, isNew, parser, isActive),\n    );\n  }\n\n  raiseCacheDeleted(id: string) {\n    this.emitter.emit(CacheDeleteEvent.type, new CacheDeleteEvent(id));\n  }\n}\n","import { useCallback } from \"react\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { ENDPOINTS, useColorMode, useConnectionConfig } from \"../../contexts\";\nimport { notify, shortenAddress } from \"../../utils\";\nimport { CopyOutlined } from \"@ant-design/icons\";\nimport { ModalEnum, useModal, useWalletModal } from \"../../contexts\";\nimport { Box } from \"@mui/system\";\nimport { Button, FormControl, NativeSelect } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Brightness4Icon from \"@mui/icons-material/Brightness4\";\nimport Brightness7Icon from \"@mui/icons-material/Brightness7\";\n\nexport const Settings = ({\n  additionalSettings,\n}: {\n  additionalSettings?: JSX.Element;\n}) => {\n  const { connected, disconnect, publicKey } = useWallet();\n  const { setEndpoint, env, endpoint } = useConnectionConfig();\n  const { setVisible } = useWalletModal();\n  const open = useCallback(() => setVisible(true), [setVisible]);\n  const { setModal } = useModal();\n  const theme = useTheme();\n  const colorModeCtx = useColorMode();\n\n  const handleConnect = useCallback(() => {\n    setModal(ModalEnum.WALLET);\n    setVisible(true);\n  }, [setModal, setVisible]);\n\n  return (\n    <>\n      <Box sx={{ display: \"flex\", minWidth: \"100%\" }}>\n        {!connected && (\n          <>\n            <FormControl>\n              <NativeSelect\n                style={{ marginBottom: 5 }}\n                onChange={(e) => {\n                  setEndpoint(e.target.value);\n                }}\n                value={endpoint}\n              >\n                {ENDPOINTS.map(({ name, endpoint }) => (\n                  <option key={name} value={endpoint}>{name}</option>\n                ))}\n              </NativeSelect>\n            </FormControl>\n            <Button\n              variant=\"contained\"\n              onClick={handleConnect}\n              sx={{ marginLeft: \"10px\" }}\n            >\n              Connect\n            </Button>\n          </>\n        )}\n        {connected && (\n          <>\n            {publicKey && (\n              <Button\n                variant=\"outlined\"\n                onClick={async () => {\n                  if (publicKey) {\n                    await navigator.clipboard.writeText(publicKey.toBase58());\n                    notify({\n                      message: \"Wallet update\",\n                      description: \"Address copied to clipboard\",\n                    });\n                  }\n                }}\n              >\n                <CopyOutlined />\n                {shortenAddress(publicKey.toBase58())}\n              </Button>\n            )}\n            <Button\n              variant=\"outlined\"\n              onClick={open}\n              sx={{ marginLeft: \"10px\" }}\n            >\n              Change Wallet\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"error\"\n              onClick={() => disconnect().catch()}\n              sx={{ marginLeft: \"10px\" }}\n            >\n              Disconnect ({env})\n            </Button>\n          </>\n        )}\n        <IconButton\n          sx={{ ml: 1 }}\n          onClick={colorModeCtx.toggleColorMode}\n          color=\"inherit\"\n        >\n          {theme.palette.mode === \"dark\" ? (\n            <Brightness7Icon />\n          ) : (\n            <Brightness4Icon />\n          )}\n        </IconButton>\n        {additionalSettings}\n      </Box>\n    </>\n  );\n};\n","import { useTheme } from \"@mui/material\";\nimport React, { useContext } from \"react\";\n\nexport const ColorModeContext = React.createContext({});\n\nexport const ColorModeContextProvider = ({children=null as any }) => {\n  const [mode, setMode] = React.useState<'light' | 'dark'>('dark'); \n  const theme = useTheme();\n  const toggleColorMode = () => {\n    setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n  }\n  return (\n    <ColorModeContext.Provider\n      value={{\n        toggleColorMode,\n        mode,\n        theme,\n      }}\n    >\n      {children}\n    </ColorModeContext.Provider>\n  );\n};\n\nexport const useColorMode = (): any => {\n  const context = useContext(ColorModeContext);\n  return context;\n};\n","import { PublicKey } from '@solana/web3.js';\nimport { BinaryReader, BinaryWriter } from 'borsh';\nimport base58 from 'bs58';\nimport { StringPublicKey } from './ids';\n\nexport const extendBorsh = () => {\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array) as StringPublicKey;\n  };\n\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: StringPublicKey,\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\n\nextendBorsh();\n","import {\n  Coder,\n} from \"@project-serum/anchor\"\n\nconst idl = require(\"./merkle_distributor.json\");\nexport const coder = new Coder(idl);\n\n","export default __webpack_public_path__ + \"static/media/wallet.c746d144.less\";","import { WalletAdapter, WalletError } from \"@solana/wallet-adapter-base\";\nimport {\n  useWallet,\n  WalletProvider as BaseWalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  getLedgerWallet,\n  getMathWallet,\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolongWallet,\n  getTorusWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport { Button } from \"antd\";\nimport React, {\n  createContext,\n  FC,\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { notify } from \"../../utils\";\nimport { DefaultModal } from \"../../components\";\n\nimport \"./wallet.less\";\n\nexport interface WalletModalContextState {\n  visible: boolean;\n  setVisible: (open: boolean) => void;\n}\n\nexport const WalletModalContext = createContext<WalletModalContextState>(\n  {} as WalletModalContextState\n);\n\nexport function useWalletModal(): WalletModalContextState {\n  return useContext(WalletModalContext);\n}\n\nexport const WalletModal: FC = () => {\n  const { wallets, wallet: selected, select } = useWallet();\n  const { visible, setVisible } = useWalletModal();\n  const [ , setShowWallets] = useState(false);\n  const close = useCallback(() => {\n    setVisible(false);\n    setShowWallets(false);\n  }, [setVisible, setShowWallets]);\n\n  return (\n    <DefaultModal visible={visible} onCancel={close}>\n      <div\n        style={{\n          background:\n            \"linear-gradient(180deg, #D329FC 0%, #8F6DDE 49.48%, #19E6AD 100%)\",\n          borderRadius: 36,\n          width: 50,\n          height: 50,\n          textAlign: \"center\",\n          verticalAlign: \"middle\",\n          fontWeight: 700,\n          fontSize: \"1.3rem\",\n          lineHeight: 2.4,\n          marginBottom: 10,\n        }}\n      ></div>\n      <h2\n        style={{\n          color: \"white\",\n          fontWeight: \"bold\",\n          fontSize: 20,\n        }}\n      >\n        {selected ? \"Change provider\" : \"\"}\n      </h2>\n      <p style={{ color: \"white\", fontSize: 14 }}>\n        {selected\n          ? \"Choose from the following options:\"\n          : \"Please sign into your wallet\"}\n      </p>\n\n      <br />\n      {wallets.map((wallet) => {\n        return (\n          <Button\n            key={wallet.name}\n            size=\"large\"\n            type={wallet === selected ? \"primary\" : \"ghost\"}\n            onClick={() => {\n              select(wallet.name);\n              close();\n            }}\n            icon={\n              <img\n                alt={`${wallet.name}`}\n                width={20}\n                height={20}\n                src={wallet.icon}\n                style={{ marginRight: 30, float: \"left\" }}\n              />\n            }\n            style={{\n              display: \"block\",\n              width: \"100%\",\n              textAlign: \"left\",\n              marginBottom: 8,\n              color: \"white\",\n            }}\n          >\n            {wallet.name}\n          </Button>\n        );\n      })}\n    </DefaultModal>\n  );\n};\n\nexport const WalletModalProvider: FC<{ children: ReactNode }> = ({\n  children,\n}) => {\n  const { publicKey } = useWallet();\n  const [connected, setConnected] = useState(!!publicKey);\n  const [visible, setVisible] = useState(false);\n\n  useEffect(() => {\n    if (publicKey) {\n      const base58 = publicKey.toBase58();\n      const keyToDisplay =\n        base58.length > 20\n          ? `${base58.substring(0, 7)}.....${base58.substring(\n              base58.length - 7,\n              base58.length\n            )}`\n          : base58;\n\n      notify({\n        message: \"Wallet update\",\n        description: \"Connected to wallet \" + keyToDisplay,\n      });\n    }\n  }, [publicKey]);\n\n  useEffect(() => {\n    if (!publicKey && connected) {\n      notify({\n        message: \"Wallet update\",\n        description: \"Disconnected from wallet\",\n      });\n    }\n    setConnected(!!publicKey);\n  }, [publicKey, connected, setConnected]);\n\n  return (\n    <WalletModalContext.Provider\n      value={{\n        visible,\n        setVisible,\n      }}\n    >\n      {children}\n      <WalletModal />\n    </WalletModalContext.Provider>\n  );\n};\n\nexport const WalletProvider: FC<{ children: ReactNode }> = ({ children }) => {\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getTorusWallet({\n        options: {\n          // @FIXME: this should be changed for Default, and by each Default storefront\n          clientId:\n            \"BOM5Cl7PXgE9Ylq1Z1tqzhpydY0RVr8k90QQ85N7AKI5QGSrr9iDC-3rvmy0K_hF0JfpLMiXoDhta68JwcxS1LQ\",\n        },\n      }),\n      getLedgerWallet(),\n      getSolongWallet(),\n      getMathWallet(),\n      getSolletWallet(),\n    ],\n    []\n  );\n\n  const onError = useCallback((error: WalletError) => {\n    console.error(error);\n    notify({\n      message: \"Wallet error\",\n      description: error.message,\n    });\n  }, []);\n\n  return (\n    <BaseWalletProvider wallets={wallets} onError={onError} autoConnect>\n      <WalletModalProvider>{children}</WalletModalProvider>\n    </BaseWalletProvider>\n  );\n};\n\nexport type WalletSigner = Pick<\n  WalletAdapter,\n  \"publicKey\" | \"signTransaction\" | \"signAllTransactions\"\n>;\n","import React, { useState, useContext, useCallback } from 'react';\n\nimport { WalletModal } from './WalletContext/WalletContext';\n\nexport enum ModalEnum {\n  WALLET = 'wallet',\n}\n\ntype ModalContextProps = {\n  setModal: (modal: ModalEnum | undefined) => void;\n  removeModal: () => void;\n};\n\nexport const ModalContext = React.createContext<ModalContextProps>({\n  setModal: () => null,\n  removeModal: () => null,\n});\n\nexport const ModalProvider: React.FC = ({ children }) => {\n  const [modal, setModal] = useState<ModalEnum | undefined>(undefined);\n\n  const removeModal = useCallback(() => {\n    setModal(undefined);\n  }, [setModal]);\n\n  return (\n    <ModalContext.Provider\n      value={{\n        setModal,\n        removeModal,\n      }}\n    >\n      {children}\n      {modal === ModalEnum.WALLET && <WalletModal />}\n    </ModalContext.Provider>\n  );\n};\n\nexport const useModal = (): ModalContextProps => {\n  const context = useContext(ModalContext);\n  if (context === undefined) {\n    throw new Error('useModal must be used within a ModalProvider');\n  }\n  return context;\n};\n","import React from \"react\";\nimport { RouteComponentProps, } from \"react-router-dom\";\nimport queryString from 'query-string';\n\nimport {\n  Box,\n  Button,\n  CircularProgress,\n  FormControl,\n  Link as HyperLink,\n  InputLabel,\n  MenuItem,\n  Select,\n  Stack,\n  Step,\n  StepLabel,\n  Stepper,\n  TextField,\n} from \"@mui/material\";\n\nimport {\n  useWallet,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  Connection as RPCConnection,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n  AccountLayout,\n  MintLayout,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { sha256 } from \"js-sha256\";\nimport BN from 'bn.js';\nimport * as bs58 from \"bs58\";\n\n// temporal signing\nimport { LambdaClient, InvokeCommand } from \"@aws-sdk/client-lambda\"\n\nimport {\n  useConnection,\n  Connection,\n} from \"../contexts\";\nimport {\n  CANDY_MACHINE_ID,\n  MERKLE_DISTRIBUTOR_ID,\n  MERKLE_TEMPORAL_SIGNER,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  getCandyMachine,\n  getCandyMachineAddress,\n  notify,\n} from \"../utils\";\nimport { MerkleTree } from \"../utils/merkleTree\";\nimport { coder } from \"../utils/merkleDistributor\";\n\nconst buildMintClaim = async (\n  connection : RPCConnection,\n  walletKey : PublicKey,\n  distributorKey : PublicKey,\n  distributorInfo : any,\n  tokenAcc : string,\n  proof : Array<Buffer>,\n  handle : string,\n  amount : number,\n  index : number,\n  pin : BN,\n) : Promise<[Array<TransactionInstruction>, Array<Buffer>, Array<Keypair>]> => {\n  let tokenAccKey: PublicKey;\n  try {\n    tokenAccKey = new PublicKey(tokenAcc);\n  } catch (err) {\n    throw new Error(`Invalid tokenAcc key ${err}`);\n  }\n  const distTokenAccount = await connection.getAccountInfo(tokenAccKey);\n  if (distTokenAccount === null) {\n    throw new Error(`Could not fetch distributor token account`);\n  }\n\n  const tokenAccountInfo = AccountLayout.decode(distTokenAccount.data);\n  const mint = new PublicKey(tokenAccountInfo.mint);\n\n  console.log(mint.toBase58());\n\n  const pdaSeeds = [\n    mint.toBuffer(),\n    Buffer.from(handle),\n    Buffer.from(pin.toArray(\"le\", 4)),\n  ];\n\n  const [claimantPda, ] = await PublicKey.findProgramAddress(\n    pdaSeeds,\n    MERKLE_DISTRIBUTOR_ID\n  );\n\n  // TODO: since it's in the PDA do we need it to be in the leaf?\n  const leaf = Buffer.from(\n    [...new BN(index).toArray(\"le\", 8),\n     ...claimantPda.toBuffer(),\n     ...mint.toBuffer(),\n     ...new BN(amount).toArray(\"le\", 8),\n    ]\n  );\n\n  const matches = MerkleTree.verifyClaim(\n    leaf, proof, Buffer.from(distributorInfo.root)\n  );\n\n  if (!matches) {\n    throw new Error(\"Gumdrop merkle proof does not match\");\n  }\n\n  const [claimStatus, cbump] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"ClaimStatus\"),\n      Buffer.from(new BN(index).toArray(\"le\", 8)),\n      distributorKey.toBuffer(),\n    ],\n    MERKLE_DISTRIBUTOR_ID\n  );\n\n  const [walletTokenKey, ] = await PublicKey.findProgramAddress(\n    [\n      walletKey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      mint.toBuffer(),\n    ],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n\n  const setup : Array<TransactionInstruction> = [];\n\n  if (await connection.getAccountInfo(walletTokenKey) === null) {\n    setup.push(Token.createAssociatedTokenAccountInstruction(\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mint,\n        walletTokenKey,\n        walletKey,\n        walletKey\n      ));\n  }\n\n  const claimAirdrop = new TransactionInstruction({\n      programId: MERKLE_DISTRIBUTOR_ID,\n      keys: [\n          { pubkey: distributorKey          , isSigner: false , isWritable: true  } ,\n          { pubkey: claimStatus             , isSigner: false , isWritable: true  } ,\n          { pubkey: tokenAccKey             , isSigner: false , isWritable: true  } ,\n          { pubkey: walletTokenKey          , isSigner: false , isWritable: true  } ,\n          { pubkey: MERKLE_TEMPORAL_SIGNER  , isSigner: true  , isWritable: false } ,\n          { pubkey: walletKey               , isSigner: true  , isWritable: false } ,  // payer\n          { pubkey: SystemProgram.programId , isSigner: false , isWritable: false } ,\n          { pubkey: TOKEN_PROGRAM_ID        , isSigner: false , isWritable: false } ,\n      ],\n      data: Buffer.from([\n        ...Buffer.from(sha256.digest(\"global:claim\")).slice(0, 8),\n        ...new BN(cbump).toArray(\"le\", 1),\n        ...new BN(index).toArray(\"le\", 8),\n        ...new BN(amount).toArray(\"le\", 8),\n        ...claimantPda.toBuffer(),\n        ...new BN(proof.length).toArray(\"le\", 4),\n        ...Buffer.concat(proof),\n      ])\n  })\n\n  return [[...setup, claimAirdrop], pdaSeeds, []];\n}\n\nconst getMetadata = async (\n  mint: PublicKey,\n): Promise<PublicKey> => {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMasterEdition = async (\n  mint: PublicKey,\n): Promise<PublicKey> => {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\n\nconst buildCandyClaim = async (\n  connection : RPCConnection,\n  walletKey : PublicKey,\n  distributorKey : PublicKey,\n  distributorInfo : any,\n  candyConfig : string,\n  candyUUID : string,\n  proof : Array<Buffer>,\n  handle : string,\n  amount : number,\n  index : number,\n  pin : BN,\n) : Promise<[Array<TransactionInstruction>, Array<Buffer>, Array<Keypair>]> => {\n\n  let configKey : PublicKey;\n  try {\n    configKey = new PublicKey(candyConfig);\n  } catch (err) {\n    throw new Error(`Invalid candy config key ${err}`);\n  }\n\n  const pdaSeeds = [\n    configKey.toBuffer(),\n    Buffer.from(handle),\n    Buffer.from(pin.toArray(\"le\", 4)),\n  ];\n\n  const [claimantPda, ] = await PublicKey.findProgramAddress(\n    pdaSeeds,\n    MERKLE_DISTRIBUTOR_ID\n  );\n\n  // TODO: since it's in the PDA do we need it to be in the leaf?\n  const leaf = Buffer.from(\n    [...new BN(index).toArray(\"le\", 8),\n     ...claimantPda.toBuffer(),\n     ...configKey.toBuffer(),\n     ...new BN(amount).toArray(\"le\", 8),\n    ]\n  );\n\n  const matches = MerkleTree.verifyClaim(\n    leaf, proof, Buffer.from(distributorInfo.root)\n  );\n\n  if (!matches) {\n    throw new Error(\"Gumdrop merkle proof does not match\");\n  }\n\n  const [claimCount, cbump] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"ClaimCount\"),\n      Buffer.from(new BN(index).toArray(\"le\", 8)),\n      distributorKey.toBuffer(),\n    ],\n    MERKLE_DISTRIBUTOR_ID\n  );\n\n  const [distributorWalletKey, wbump] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"Wallet\"),\n      distributorKey.toBuffer(),\n    ],\n    MERKLE_DISTRIBUTOR_ID\n  );\n\n  // atm the contract has a special case for when the temporal key is defaulted\n  // (aka always passes temporal check)\n  // TODO: more flexible\n  let temporalSigner = distributorInfo.temporal.equals(PublicKey.default)\n      ? walletKey : distributorInfo.temporal;\n\n  const setup : Array<TransactionInstruction> = [];\n\n  const claimCountAccount = await connection.getAccountInfo(claimCount);\n  let nftsAlreadyMinted = 0;\n  if (claimCountAccount === null) {\n  } else {\n    // TODO: subtract already minted?...\n    const claimAccountInfo = coder.accounts.decode(\n      \"ClaimCount\", claimCountAccount.data);\n    nftsAlreadyMinted = claimAccountInfo.count;\n    if (claimAccountInfo.claimant.equals(walletKey)) {\n      // we already proved this claim and verified the OTP once, contract knows\n      // that this wallet is OK\n      temporalSigner = walletKey;\n    } else {\n      // need to claim with the first wallet...\n      const claimantStr = claimAccountInfo.claimant.toBase58();\n      throw new Error(`This wallet does not match existing claimant ${claimantStr}`);\n    }\n  }\n\n  const nftsAvailable = amount;\n  if (nftsAlreadyMinted >= nftsAvailable) {\n    throw new Error(`Cannot mint another NFT. ${nftsAvailable} NFT(s) were originally allocated`\n      + (nftsAlreadyMinted > 0 ? ` and ${nftsAlreadyMinted} NFT(s) were already minted` : \"\"));\n  }\n\n\n  const [candyMachineKey, ] = await getCandyMachineAddress(configKey, candyUUID);\n  const candyMachine = await getCandyMachine(connection, candyMachineKey);\n  console.log(candyMachine);\n\n  const candyMachineMints : Array<Keypair> = [];\n\n  const [instrs, mint] = await buildSingleCandyMint(\n    connection,\n    walletKey,\n    distributorKey,\n    distributorWalletKey,\n    claimCount,\n    temporalSigner,\n    configKey,\n    candyMachineKey,\n    candyMachine.wallet,\n    Buffer.from([\n      ...new BN(wbump).toArray(\"le\", 1),\n      ...new BN(cbump).toArray(\"le\", 1),\n      ...new BN(index).toArray(\"le\", 8),\n      ...new BN(amount).toArray(\"le\", 8),\n      ...claimantPda.toBuffer(),\n      ...new BN(proof.length).toArray(\"le\", 4),\n      ...Buffer.concat(proof),\n    ]),\n  );\n  candyMachineMints.push(mint);\n  setup.push(...instrs);\n\n  return [setup, pdaSeeds, candyMachineMints];\n}\n\nconst buildSingleCandyMint = async (\n  connection : RPCConnection,\n  walletKey : PublicKey,\n  distributorKey : PublicKey,\n  distributorWalletKey : PublicKey,\n  claimCount : PublicKey,\n  temporalSigner : PublicKey,\n  configKey : PublicKey,\n  candyMachineKey : PublicKey,\n  candyMachineWallet : PublicKey,\n  data : Buffer,\n) : Promise<[Array<TransactionInstruction>, Keypair]> => {\n  const candyMachineMint = Keypair.generate();\n  const candyMachineMetadata = await getMetadata(candyMachineMint.publicKey);\n  const candyMachineMaster = await getMasterEdition(candyMachineMint.publicKey);\n\n  const [walletTokenKey, ] = await PublicKey.findProgramAddress(\n    [\n      walletKey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      candyMachineMint.publicKey.toBuffer(),\n    ],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n\n  const setup : Array<TransactionInstruction> = [];\n  setup.push(SystemProgram.createAccount({\n    fromPubkey: walletKey,\n    newAccountPubkey: candyMachineMint.publicKey,\n    space: MintLayout.span,\n    lamports:\n      await connection.getMinimumBalanceForRentExemption(\n        MintLayout.span,\n      ),\n    programId: TOKEN_PROGRAM_ID,\n  }));\n\n  setup.push(Token.createInitMintInstruction(\n    TOKEN_PROGRAM_ID,\n    candyMachineMint.publicKey,\n    0,\n    walletKey,\n    walletKey,\n  ));\n\n  setup.push(Token.createAssociatedTokenAccountInstruction(\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    candyMachineMint.publicKey,\n    walletTokenKey,\n    walletKey,\n    walletKey\n  ));\n\n  setup.push(Token.createMintToInstruction(\n    TOKEN_PROGRAM_ID,\n    candyMachineMint.publicKey,\n    walletTokenKey,\n    walletKey,\n    [],\n    1,\n  ));\n\n  setup.push(new TransactionInstruction({\n      programId: MERKLE_DISTRIBUTOR_ID,\n      keys: [\n          { pubkey: distributorKey            , isSigner: false , isWritable: true  } ,\n          { pubkey: distributorWalletKey      , isSigner: false , isWritable: true  } ,\n          { pubkey: claimCount                , isSigner: false , isWritable: true  } ,\n          { pubkey: temporalSigner            , isSigner: true  , isWritable: false } ,\n          { pubkey: walletKey                 , isSigner: true  , isWritable: false } , // payer\n\n          { pubkey: configKey                 , isSigner: false , isWritable: true  } ,\n          { pubkey: candyMachineKey           , isSigner: false , isWritable: true  } ,\n          { pubkey: candyMachineWallet        , isSigner: false , isWritable: true  } ,\n          { pubkey: candyMachineMint.publicKey, isSigner: false , isWritable: true  } ,\n          { pubkey: candyMachineMetadata      , isSigner: false , isWritable: true  } ,\n          { pubkey: candyMachineMaster        , isSigner: false , isWritable: true  } ,\n\n          { pubkey: SystemProgram.programId   , isSigner: false , isWritable: false } ,\n          { pubkey: TOKEN_PROGRAM_ID          , isSigner: false , isWritable: false } ,\n          { pubkey: TOKEN_METADATA_PROGRAM_ID , isSigner: false , isWritable: false } ,\n          { pubkey: CANDY_MACHINE_ID          , isSigner: false , isWritable: false } ,\n          { pubkey: SYSVAR_RENT_PUBKEY        , isSigner: false , isWritable: false } ,\n          { pubkey: SYSVAR_CLOCK_PUBKEY       , isSigner: false , isWritable: false } ,\n      ],\n      data: Buffer.from([\n        ...Buffer.from(sha256.digest(\"global:claim_candy\")).slice(0, 8),\n        ...data,\n      ])\n  }));\n\n  return [setup, candyMachineMint];\n}\n\nconst fetchDistributor = async (\n  connection : RPCConnection,\n  distributorStr : string,\n) => {\n  let key;\n  try {\n    key = new PublicKey(distributorStr);\n  } catch (err) {\n    throw new Error(`Invalid distributor key ${err}`);\n  }\n  const account = await connection.getAccountInfo(key);\n  if (account === null) {\n    throw new Error(`Could not fetch distributor ${distributorStr}`);\n  }\n  if (!account.owner.equals(MERKLE_DISTRIBUTOR_ID)) {\n    const ownerStr = account.owner.toBase58();\n    throw new Error(`Invalid distributor owner ${ownerStr}`);\n  }\n  const info = coder.accounts.decode(\"MerkleDistributor\", account.data);\n  return [key, info];\n};\n\nconst fetchNeedsTemporalSigner = async (\n  connection : RPCConnection,\n  distributorStr : string,\n  indexStr : string,\n  claimMethod : string,\n) => {\n  const [key, info] = await fetchDistributor(connection, distributorStr);\n  if (!info.temporal.equals(MERKLE_TEMPORAL_SIGNER)) {\n    // default pubkey\n    return false;\n  } else if (claimMethod === \"candy\") {\n    const [claimCount, ] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"ClaimCount\"),\n        Buffer.from(new BN(Number(indexStr)).toArray(\"le\", 8)),\n        key.toBuffer(),\n      ],\n      MERKLE_DISTRIBUTOR_ID\n    );\n    // if someone (maybe us) has already claimed this, the contract will\n    // not check the existing temporal signer anymore since presumably\n    // they have already verified the OTP. So we need to fetch the temporal\n    // signer if it is null\n    const claimCountAccount = await connection.getAccountInfo(claimCount);\n    return claimCountAccount === null;\n  } else {\n    // default to need one\n    return true;\n  }\n};\n\nexport type ClaimProps = {};\n\nexport const Claim = (\n  props : RouteComponentProps<ClaimProps>,\n) => {\n  const connection = useConnection();\n  const wallet = useWallet();\n\n  let params = queryString.parse(props.location.search);\n  const [distributor, setDistributor] = React.useState(params.distributor as string || \"\");\n  const [claimMethod, setClaimMethod] = React.useState(params.tokenAcc ? \"transfer\" : \"candy\");\n  const [tokenAcc, setTokenAcc] = React.useState(params.tokenAcc as string || \"\");\n  const [candyConfig, setCandyConfig] = React.useState(params.config as string || \"\");\n  const [candyUUID, setCandyUUID] = React.useState(params.uuid as string || \"\");\n  const [handle, setHandle] = React.useState(params.handle as string || \"\");\n  const [amountStr, setAmount] = React.useState(params.amount as string || \"\");\n  const [indexStr, setIndex] = React.useState(params.index as string || \"\");\n  const [pinStr, setPin] = React.useState(params.pin as string || \"\");\n  const [proofStr, setProof] = React.useState(params.proof as string || \"\");\n\n  const allFieldsPopulated =\n    distributor.length > 0\n    && ( params.tokenAcc\n       ? tokenAcc.length > 0\n       : candyConfig.length > 0 && candyUUID.length > 0\n       )\n    && handle.length > 0\n    && amountStr.length > 0\n    && indexStr.length > 0\n    && pinStr.length > 0;\n    // NB: proof can be empty!\n\n  const [editable, setEditable] = React.useState(!allFieldsPopulated);\n\n  // temporal verification\n  const [transaction, setTransaction] = React.useState<Transaction | null>(null);\n  const [OTPStr, setOTPStr] = React.useState(\"\");\n\n  // async computed\n  const [asyncNeedsTemporalSigner, setNeedsTemporalSigner] = React.useState<boolean>(true);\n\n  React.useEffect(() => {\n    const wrap = async () => {\n      try {\n        setNeedsTemporalSigner(await fetchNeedsTemporalSigner(\n          connection, distributor, indexStr, claimMethod));\n      } catch {\n        // TODO: log?\n      }\n    };\n    wrap();\n  }, [connection, distributor, indexStr, claimMethod]);\n\n  const client = new LambdaClient({\n    region: \"us-east-2\",\n    credentials: {\n      accessKeyId: \"AKIA4UZOKPKEBSISSXIX\",\n      secretAccessKey: \"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\",\n    },\n  });\n\n  const skipAWSWorkflow = false;\n\n  const sendOTP = async (e : React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (!wallet.connected || wallet.publicKey === null) {\n      throw new Error(`Wallet not connected`);\n    }\n\n    const index = Number(indexStr);\n    const amount = Number(amountStr);\n    let pin;\n\n    if (isNaN(amount)) {\n      throw new Error(`Could not parse amount ${amountStr}`);\n    }\n    if (isNaN(index)) {\n      throw new Error(`Could not parse index ${indexStr}`);\n    }\n    try {\n      pin = new BN(pinStr);\n    } catch (err) {\n      throw new Error(`Could not parse pin ${pinStr}: ${err}`);\n    }\n\n    // TODO: use cached?\n    const [distributorKey, distributorInfo] =\n        await fetchDistributor(connection, distributor);\n\n    console.log(`Distributor ${distributorInfo}`);\n\n    const proof = proofStr === \"\" ? [] : proofStr.split(\",\").map(b => {\n      const ret = Buffer.from(bs58.decode(b))\n      if (ret.length !== 32)\n        throw new Error(`Invalid proof hash length`);\n      return ret;\n    });\n\n    let instructions, pdaSeeds, extraSigners;\n    if (claimMethod === \"candy\") {\n      console.log(\"Building candy claim\");\n      [instructions, pdaSeeds, extraSigners] = await buildCandyClaim(\n        connection, wallet.publicKey, distributorKey, distributorInfo,\n        candyConfig, candyUUID,\n        proof, handle, amount, index, pin\n      );\n    } else if (claimMethod === \"transfer\") {\n      [instructions, pdaSeeds, extraSigners] = await buildMintClaim(\n        connection, wallet.publicKey, distributorKey, distributorInfo,\n        tokenAcc,\n        proof, handle, amount, index, pin\n      );\n    } else {\n      throw new Error(`Unknown claim method ${claimMethod}`);\n    }\n\n    let transaction = new Transaction({\n      feePayer: wallet.publicKey,\n      recentBlockhash: (await connection.getRecentBlockhash(\"singleGossip\")).blockhash,\n    });\n\n    const signers = new Set<PublicKey>();\n    for (const instr of instructions) {\n      transaction.add(instr);\n      for (const key of instr.keys)\n        if (key.isSigner)\n          signers.add(key.pubkey);\n    }\n    console.log(`Expecting the following signers: ${[...signers].map(s => s.toBase58())}`);\n    transaction.setSigners(...signers);\n\n    if (extraSigners.length > 0) {\n      transaction.partialSign(...extraSigners);\n    }\n\n    if (signers.has(MERKLE_TEMPORAL_SIGNER) && !skipAWSWorkflow) {\n      const params = {\n        FunctionName: \"send-OTP\",\n        Payload: new Uint8Array(Buffer.from(JSON.stringify({\n          method: \"send\",\n          transaction: bs58.encode(transaction.serializeMessage()),\n          seeds: pdaSeeds,\n        }))),\n      };\n\n      const res = await client.send(new InvokeCommand(params));\n      console.log(res);\n\n      if (res.StatusCode !== 200) {\n        throw new Error(`Failed to send AWS OTP. ${JSON.stringify(res)}`);\n      }\n\n      if (res.Payload === undefined) {\n        throw new Error(\"No response payload\");\n      }\n\n      let resp;\n      try {\n        resp = JSON.parse(Buffer.from(res.Payload).toString());\n      } catch {\n        throw new Error(`Could not parse response ${res.Payload}`);\n      }\n\n      if (!resp.MessageId) {\n        throw new Error(`Failed to send AWS OTP. ${JSON.stringify(resp)}`);\n      }\n\n      notify({\n        message: \"OTP sent\",\n        description: `Please check ${handle} for a OTP`,\n      });\n    }\n\n    return transaction;\n  };\n\n  const verifyOTP = async (\n    e : React.SyntheticEvent,\n    transaction : Transaction | null,\n  ) => {\n    e.preventDefault();\n\n    if (!transaction) {\n      throw new Error(`Transaction not available for OTP verification`);\n    }\n\n    if (!wallet.connected || wallet.publicKey === null) {\n      throw new Error(`Wallet not connected`);\n    }\n\n    const txnNeedsTemporalSigner =\n        transaction.signatures.some(s => s.publicKey.equals(MERKLE_TEMPORAL_SIGNER));\n    if (txnNeedsTemporalSigner && !skipAWSWorkflow) {\n      // TODO: distinguish between OTP failure and transaction-error. We can try\n      // again on the former but not the latter\n      const OTP = Number(OTPStr);\n      if (isNaN(OTP) || OTPStr.length === 0) {\n        throw new Error(`Could not parse OTP ${OTPStr}`);\n      }\n\n      const params = {\n        FunctionName: \"send-OTP\",\n        Payload: new Uint8Array(Buffer.from(JSON.stringify({\n          method: \"verify\",\n          otp: OTP,\n          handle: handle,  // TODO?\n        }))),\n      };\n\n      const res = await client.send(new InvokeCommand(params));\n      console.log(res);\n\n      if (res.StatusCode !== 200) {\n        const blob = JSON.stringify(res);\n        throw new Error(`Failed to verify AWS OTP. ${blob}`);\n      }\n\n      if (res.Payload === undefined) {\n        throw new Error(\"No response payload\");\n      }\n\n      let resp, sig;\n      try {\n        resp = JSON.parse(Buffer.from(res.Payload).toString());\n      } catch {\n        throw new Error(`Could not parse response ${res.Payload}`);\n      }\n\n      try {\n        sig = bs58.decode(JSON.parse(resp.body));\n      } catch {\n        throw new Error(`Could not decode transaction signature ${resp.body}`);\n      }\n\n      transaction.addSignature(MERKLE_TEMPORAL_SIGNER, sig);\n    }\n\n    let fullySigned;\n    try {\n      fullySigned = await wallet.signTransaction(transaction);\n    } catch {\n      throw new Error(\"Failed to sign transaction\");\n    }\n\n    const claimResult = await Connection.sendSignedTransaction({\n      connection,\n      signedTransaction: fullySigned,\n    });\n\n    console.log(claimResult);\n    notify({\n      message: \"Claim succeeded\",\n      description: (\n        <HyperLink href={Connection.explorerLinkFor(claimResult.txid, connection)}>\n          View transaction on explorer\n        </HyperLink>\n      ),\n    });\n    setTransaction(null);\n    try {\n      setNeedsTemporalSigner(await fetchNeedsTemporalSigner(\n        connection, distributor, indexStr, claimMethod));\n    } catch {\n      // TODO: log?\n    }\n  };\n\n  const [loading, setLoading] = React.useState(false);\n  const loadingProgress = () => (\n    <CircularProgress\n      size={24}\n      sx={{\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        marginTop: '-12px',\n        marginLeft: '-12px',\n      }}\n    />\n  );\n\n  const verifyOTPC = (onClick) => (\n    <React.Fragment>\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"otp-text-field\"\n        label=\"OTP\"\n        value={OTPStr}\n        onChange={(e) => setOTPStr(e.target.value)}\n      />\n      <Box />\n\n      <Box sx={{ position: \"relative\" }}>\n      <Button\n        disabled={!wallet.connected || !OTPStr || loading}\n        variant=\"contained\"\n        color=\"success\"\n        style={{ width: \"100%\" }}\n        onClick={(e) => {\n          setLoading(true);\n          const wrap = async () => {\n            try {\n              await verifyOTP(e, transaction);\n              setLoading(false);\n              onClick();\n            } catch (err) {\n              notify({\n                message: \"Claim failed\",\n                description: `${err}`,\n              });\n              setLoading(false);\n            }\n          };\n          wrap();\n        }}\n      >\n        Claim Airdrop\n      </Button>\n      {loading && loadingProgress()}\n      </Box>\n    </React.Fragment>\n  );\n\n  const claimData = (claimMethod) => {\n    if (claimMethod === \"candy\") {\n      return (\n        <React.Fragment>\n          <TextField\n            style={{width: \"60ch\"}}\n            id=\"config-text-field\"\n            label=\"Candy Config\"\n            value={candyConfig}\n            onChange={e => setCandyConfig(e.target.value)}\n            disabled={!editable}\n          />\n          <TextField\n            style={{width: \"60ch\"}}\n            id=\"config-uuid-text-field\"\n            label=\"Candy UUID\"\n            value={candyUUID}\n            onChange={e => setCandyUUID(e.target.value)}\n            disabled={!editable}\n          />\n        </React.Fragment>\n      );\n    } else if (claimMethod === \"transfer\") {\n      return (\n        <React.Fragment>\n          <TextField\n            style={{width: \"60ch\"}}\n            id=\"token-acc-text-field\"\n            label=\"Source Token Account\"\n            value={tokenAcc}\n            onChange={(e) => setTokenAcc(e.target.value)}\n            disabled={!editable}\n          />\n        </React.Fragment>\n      );\n    }\n  };\n\n  const populateClaimC = (onClick) => (\n    <React.Fragment>\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"distributor-text-field\"\n        label=\"Distributor\"\n        value={distributor}\n        onChange={(e) => setDistributor(e.target.value)}\n        disabled={!editable}\n      />\n      <FormControl fullWidth>\n        <InputLabel id=\"claim-method-label\">Claim Method</InputLabel>\n        <Select\n          labelId=\"claim-method-label\"\n          id=\"claim-method-select\"\n          value={claimMethod}\n          label=\"Claim Method\"\n          onChange={(e) => {\n            localStorage.setItem(\"claimMethod\", e.target.value);\n            setClaimMethod(e.target.value);\n          }}\n          style={{textAlign: \"left\"}}\n          disabled={!editable}\n        >\n          <MenuItem value={\"transfer\"}>Token Transfer</MenuItem>\n          <MenuItem value={\"candy\"}>Candy Machine</MenuItem>\n        </Select>\n      </FormControl>\n      {claimMethod !== \"\" && claimData(claimMethod)}\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"amount-text-field\"\n        label=\"Amount\"\n        value={amountStr}\n        onChange={(e) => setAmount(e.target.value)}\n        disabled={!editable}\n      />\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"handle-text-field\"\n        label=\"Handle\"\n        value={handle}\n        onChange={(e) => setHandle(e.target.value)}\n        disabled={!editable}\n      />\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"index-text-field\"\n        label=\"Index\"\n        value={indexStr}\n        onChange={(e) => setIndex(e.target.value)}\n        disabled={!editable}\n      />\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"pin-text-field\"\n        label=\"Pin\"\n        value={pinStr}\n        onChange={(e) => setPin(e.target.value)}\n        disabled={!editable}\n      />\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"proof-text-field\"\n        label=\"Proof\"\n        multiline\n        value={proofStr}\n        onChange={(e) => setProof(e.target.value)}\n        disabled={!editable}\n      />\n      <Button\n        color=\"info\"\n        onClick={(e) => setEditable(!editable)}\n      >\n        {!editable ? \"Edit Claim\" : \"Stop Editing\"}\n      </Button>\n      <Box />\n\n      <Box sx={{ position: \"relative\" }}>\n      <Button\n        disabled={!wallet.connected || !allFieldsPopulated || loading}\n        variant=\"contained\"\n        style={{ width: \"100%\" }}\n        color={asyncNeedsTemporalSigner ? \"primary\" : \"success\"}\n        onClick={(e) => {\n          setLoading(true);\n          const wrap = async () => {\n            try {\n              const needsTemporalSigner = await fetchNeedsTemporalSigner(\n                  connection, distributor, indexStr, claimMethod);\n              const transaction = await sendOTP(e);\n              if (!needsTemporalSigner) {\n                await verifyOTP(e, transaction);\n              } else {\n                setTransaction(transaction);\n              }\n              setLoading(false);\n              onClick();\n            } catch (err) {\n              notify({\n                message: \"Claim failed\",\n                description: `${err}`,\n              });\n              setLoading(false);\n            }\n          };\n          wrap();\n        }}\n      >\n        {asyncNeedsTemporalSigner ? \"Next\" : \"Claim Airdrop\"}\n      </Button>\n      {loading && loadingProgress()}\n      </Box>\n    </React.Fragment>\n  );\n\n  const steps = [\n    { name: \"Populate Claim\", inner: populateClaimC },\n  ];\n  if (asyncNeedsTemporalSigner) {\n    steps.push(\n    { name: \"Verify OTP\"    , inner: verifyOTPC     }\n    );\n  }\n\n  // TODO: better interaction between setting `asyncNeedsTemporalSigner` and\n  // the stepper... this is pretty jank\n  const [activeStep, setActiveStep] = React.useState(0);\n  const stepToUse = Math.min(activeStep, steps.length - 1);\n\n  const handleNext = () => {\n    // return to start if going past the end (claim succeeded)\n    setActiveStep(prev => {\n      if (prev === steps.length - 1) {\n        return 0;\n      } else {\n        return prev + 1;\n      }\n    });\n  };\n  const handleBack = () => {\n    setActiveStep(prev => prev - 1);\n  };\n\n  const stepper = (\n    <React.Fragment>\n      <Stepper activeStep={stepToUse}>\n        {steps.map((s, index) => {\n          return (\n            <Step key={s.name}>\n              <StepLabel>{s.name}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      <Box />\n    </React.Fragment>\n  );\n\n  return (\n    <Stack spacing={2}>\n      {asyncNeedsTemporalSigner && stepper}\n      {steps[stepToUse].inner(handleNext)}\n      {stepToUse > 0 && (\n        <Button\n          color=\"info\"\n          onClick={handleBack}\n        >\n          Back\n        </Button>\n      )}\n    </Stack>\n  );\n};\n\n","import React from \"react\";\n\nimport {\n  Button,\n  FormControl,\n  InputLabel,\n  Link as HyperLink,\n  MenuItem,\n  Stack,\n  Select,\n  TextField,\n} from \"@mui/material\";\n\nimport {\n  useWallet,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport BN from 'bn.js';\nimport { sha256 } from \"js-sha256\";\n\nimport {\n  useConnection,\n  Connection,\n} from \"../contexts\";\nimport {\n  CANDY_MACHINE_ID,\n  MERKLE_DISTRIBUTOR_ID,\n  getCandyConfig,\n  getCandyMachineAddress,\n  notify,\n} from \"../utils\";\n\nexport const Close = () => {\n  const connection = useConnection();\n  const wallet = useWallet();\n\n  const [baseKey, setBaseKey] = React.useState(\"\");\n  const [claimMethod, setClaimMethod] = React.useState(localStorage.getItem(\"claimMethod\") || \"transfer\");\n  const [candyConfig, setCandyConfig] = React.useState(localStorage.getItem(\"candyConfig\") || \"\");\n  const [candyUUID, setCandyUUID] = React.useState(localStorage.getItem(\"candyUUID\") || \"\");\n\n  const submit = async (e : React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (!wallet.connected || wallet.publicKey === null) {\n      throw new Error(`Wallet not connected`);\n    }\n\n    const base = Keypair.fromSecretKey(\n      new Uint8Array(JSON.parse(baseKey)));\n\n    const [distributorKey, dbump] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"MerkleDistributor\"),\n        base.publicKey.toBuffer(),\n      ],\n      MERKLE_DISTRIBUTOR_ID);\n\n    const [distributorWalletKey, wbump] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"Wallet\"),\n        distributorKey.toBuffer(),\n      ],\n      MERKLE_DISTRIBUTOR_ID\n    );\n\n    let extraKeys;\n    if (claimMethod === \"candy\") {\n      const configKey = await getCandyConfig(connection, candyConfig);\n      const [candyMachineKey, ] = await getCandyMachineAddress(\n        configKey, candyUUID);\n\n     extraKeys = [\n            { pubkey: candyMachineKey         , isSigner: false , isWritable: true  } ,\n            { pubkey: CANDY_MACHINE_ID        , isSigner: false , isWritable: false } ,\n      ];\n    } else {\n      extraKeys = [];\n    }\n\n    const closeDistributor = new TransactionInstruction({\n        programId: MERKLE_DISTRIBUTOR_ID,\n        keys: [\n            { pubkey: base.publicKey          , isSigner: true  , isWritable: false } ,\n            { pubkey: distributorKey          , isSigner: false , isWritable: true  } ,\n            { pubkey: distributorWalletKey    , isSigner: false , isWritable: true  } ,\n            { pubkey: wallet.publicKey        , isSigner: true  , isWritable: true  } ,\n            { pubkey: SystemProgram.programId , isSigner: false , isWritable: false } ,\n            { pubkey: TOKEN_PROGRAM_ID        , isSigner: false , isWritable: false } ,\n            ...extraKeys,\n        ],\n        data: Buffer.from([\n          ...Buffer.from(sha256.digest(\"global:close_distributor\")).slice(0, 8),\n          ...new BN(dbump).toArray(\"le\", 1),\n          ...new BN(wbump).toArray(\"le\", 1),\n        ])\n    })\n\n    const closeResult = await Connection.sendTransactionWithRetry(\n      connection,\n      wallet,\n      [\n        closeDistributor\n      ],\n      [base]\n    );\n\n    console.log(closeResult);\n    if (typeof closeResult === \"string\") {\n      notify({\n        message: \"Close failed\",\n        description: closeResult,\n      });\n    } else {\n      notify({\n        message: \"Close succeeded\",\n        description: (\n          <HyperLink href={Connection.explorerLinkFor(closeResult.txid, connection)}>\n            View transaction on explorer\n          </HyperLink>\n        ),\n      });\n    }\n  };\n\n  const claimData = (claimMethod) => {\n    if (claimMethod === \"candy\") {\n      return (\n        <React.Fragment>\n          <TextField\n            style={{width: \"60ch\"}}\n            id=\"config-text-field\"\n            label=\"Candy Config\"\n            value={candyConfig}\n            onChange={e => setCandyConfig(e.target.value)}\n          />\n          <TextField\n            style={{width: \"60ch\"}}\n            id=\"config-uuid-text-field\"\n            label=\"Candy UUID\"\n            value={candyUUID}\n            onChange={e => setCandyUUID(e.target.value)}\n          />\n        </React.Fragment>\n      );\n    } else if (claimMethod === \"transfer\") {\n      return null;\n    }\n  };\n\n  return (\n    <Stack spacing={2}>\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"base-text-field\"\n        label=\"Base Private Key\"\n        value={baseKey}\n        onChange={(e) => setBaseKey(e.target.value)}\n      />\n      <FormControl fullWidth>\n        <InputLabel id=\"claim-method-label\">Claim Method</InputLabel>\n        <Select\n          labelId=\"claim-method-label\"\n          id=\"claim-method-select\"\n          value={claimMethod}\n          label=\"Claim Method\"\n          onChange={(e) => {\n            localStorage.setItem(\"claimMethod\", e.target.value);\n            setClaimMethod(e.target.value);\n          }}\n          style={{textAlign: \"left\"}}\n        >\n          <MenuItem value={\"transfer\"}>Token Transfer</MenuItem>\n          <MenuItem value={\"candy\"}>Candy Machine</MenuItem>\n        </Select>\n      </FormControl>\n      {claimMethod !== \"\" && claimData(claimMethod)}\n      <Button\n        disabled={!wallet.connected || !baseKey}\n        variant=\"contained\"\n        onClick={(e) => {\n          const wrap = async () => {\n            try {\n              await submit(e);\n            } catch (err) {\n              notify({\n                message: \"Close failed\",\n                description: `${err}`,\n              });\n            }\n          };\n          wrap();\n        }}\n      >\n        Close Merkle Airdrop\n      </Button>\n    </Stack>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport {\n  Box,\n  Button,\n  CircularProgress,\n  FormControl,\n  Link as HyperLink,\n  InputLabel,\n  MenuItem,\n  Stack,\n  Select,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n} from \"@mui/material\";\nimport FilePresentIcon from '@mui/icons-material/FilePresent';\n\nimport {\n  useWallet,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  Connection as RPCConnection,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n  AccountLayout,\n  MintInfo,\n  MintLayout,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { sha256 } from \"js-sha256\";\nimport BN from 'bn.js';\nimport * as bs58 from \"bs58\";\n\n// claim distribution\nimport { SESClient, SendEmailCommand } from \"@aws-sdk/client-ses\"\n\nimport {\n  useConnection,\n  Connection,\n} from \"../contexts\";\nimport {\n  CANDY_MACHINE_ID,\n  MERKLE_DISTRIBUTOR_ID,\n  MERKLE_TEMPORAL_SIGNER,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  getCandyConfig,\n  getCandyMachine,\n  getCandyMachineAddress,\n  notify,\n  shortenAddress,\n} from \"../utils\";\nimport { MerkleTree } from \"../utils/merkleTree\";\nimport { DragAndDrop } from \"./DragAndDrop\";\nimport { DefaultModal } from \"./DefaultModal\";\n\n// NB: assumes no overflow\nconst randomBytes = () : Uint8Array => {\n  // TODO: some predictable seed? sha256?\n  const buf = new Uint8Array(4);\n  window.crypto.getRandomValues(buf);\n  return buf;\n}\n\nconst WHITESPACE = \"\\u00A0\";\n\nexport type ClaimantInfo = {\n  handle : string,\n  amount : number,\n\n  pin    : BN,\n  bump   : number,\n  url    : string,\n\n  seed   : PublicKey,\n  pda    : PublicKey,\n};\n\nexport type AuthKeys = { [key: string] : string }\n\ntype DropInfo = {\n  type : string,\n  meta : string,\n};\n\nconst formatDropMessage = (info : ClaimantInfo, drop : DropInfo) => {\n  if (drop.type === \"Token\") {\n    return {\n      subject: \"Token Drop\",\n      message: `You received ${info.amount} token(s) `\n             + `(click <a href=\"${drop.meta}\">here</a> to view the mint on explorer). `\n             + `<a href=\"${info.url}\">Click here to claim them!</a>`,\n    };\n  } else {\n    return {\n      subject: \"NFT Drop\",\n      message: `You received a Candy Machine pre-sale crank `\n             + `(click <a href=\"${drop.meta}\">here</a> to view the config on explorer). `\n             + `<a href=\"${info.url}\">Click here to claim it!</a>`,\n    };\n  }\n};\n\nconst setupSes = (auth : AuthKeys, source : string) => {\n  console.log(`SES auth ${auth}`);\n  const client = new SESClient({\n    region: \"us-east-2\",\n    credentials: {\n      accessKeyId: auth.accessKeyId,\n      secretAccessKey: auth.secretAccessKey,\n    },\n  });\n\n  return async (\n    info : ClaimantInfo,\n    drop : DropInfo,\n  ) => {\n    const formatted = formatDropMessage(info, drop);\n    const message = {\n      Destination: {\n        ToAddresses: [\n          info.handle,\n        ]\n      },\n      Message: {\n        Subject: {\n          Data: formatted.subject,\n          Charset: \"utf-8\",\n        },\n        Body: {\n          Html: {\n            Data: formatted.message,\n            Charset: \"utf-8\",\n          },\n        },\n      },\n      Source: source,\n    };\n    console.log(message);\n\n    try {\n      const response = await client.send(new SendEmailCommand(message));\n      console.log(response);\n      if (response.$metadata.httpStatusCode !== 200) {\n      //   throw new Error(`AWS SES ssemed to fail to send email: ${response[0].reject_reason}`);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  };\n}\n\nconst setupManual = (auth : AuthKeys, source : string) => {\n  return async (\n    info : ClaimantInfo,\n    mintUrl: string,\n  ) => {\n    // TODO duplicated work since claim URLs are available for download\n    // regardless...\n    console.log({\n      \"handle\": info.handle,\n      \"url\": info.url,\n    });\n  };\n}\n\nconst setupSender = (\n  method : string,\n  auth : AuthKeys,\n  source : string,\n) => {\n  if (method === \"AWS SES\") {\n    return setupSes(auth, source);\n  } else if (method === \"Manual\") {\n    return setupManual(auth, source);\n  } else {\n    throw new Error(`Unrecognized claim distribution method ${method}`);\n  }\n}\n\ntype Claimants = Array<ClaimantInfo>;\nconst parseClaimants = (\n  input : string\n) : Claimants => {\n  const json = JSON.parse(input);\n  return json.map(obj => {\n    return {\n      handle : obj.handle,\n      amount : obj.amount,\n      url    : obj.url,\n    };\n  });\n};\n\nconst reactModal = (renderModal) => {\n  const container = document.createElement('div');\n  document.body.appendChild(container);\n\n  const displayModal = ({ onSubmit, onDismiss }) => {\n    ReactDOM.render(renderModal({ onSubmit, onDismiss, show: true }), container);\n  };\n\n  const hideModal = ({ onSubmit, onDismiss }, callback) => {\n    ReactDOM.render(renderModal({ onSubmit, onDismiss, show: false }), container, callback);\n  };\n\n  const destroyModal = () => {\n    ReactDOM.unmountComponentAtNode(container);\n    document.body.removeChild(container);\n  };\n\n  const confirmation = new Promise((resolve) => {\n    const onSubmit = (value) => resolve(value);\n    const onDismiss = () => resolve(undefined);\n    displayModal({ onSubmit, onDismiss });\n  });\n\n  return confirmation.finally(() => {\n    const onSubmit = () => {};\n    const onDismiss = () => {};\n    hideModal({ onSubmit, onDismiss }, destroyModal);\n  });\n};\n\nconst getMintInfo = async (\n  connection : RPCConnection,\n  mint : string\n) : Promise<{ key: PublicKey, info: MintInfo }> => {\n  let mintKey : PublicKey;\n  try {\n    mintKey = new PublicKey(mint);\n  } catch (err) {\n    throw new Error(`Invalid mint key ${err}`);\n  }\n  const mintAccount = await connection.getAccountInfo(mintKey);\n  if (mintAccount === null) {\n    throw new Error(`Could not fetch mint`);\n  }\n  if (!mintAccount.owner.equals(TOKEN_PROGRAM_ID)) {\n    const mintOwner = mintAccount.owner.toBase58();\n    throw new Error(`Invalid mint owner ${mintOwner}`);\n  }\n  if (mintAccount.data.length !== MintLayout.span) {\n    throw new Error(`Invalid mint size ${mintAccount.data.length}`);\n  }\n  const mintInfo = MintLayout.decode(Buffer.from(mintAccount.data));\n  return {\n    key: mintKey,\n    info: mintInfo,\n  };\n};\n\nconst getCreatorTokenAccount = async (\n  walletKey : PublicKey,\n  connection : RPCConnection,\n  mintKey : PublicKey,\n  totalClaim : number,\n) => {\n  const [creatorTokenKey, ] = await PublicKey.findProgramAddress(\n    [\n      walletKey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      mintKey.toBuffer(),\n    ],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n  const creatorTokenAccount = await connection.getAccountInfo(creatorTokenKey);\n  if (creatorTokenAccount === null) {\n    throw new Error(`Could not fetch creator token account`);\n  }\n  if (creatorTokenAccount.data.length !== AccountLayout.span) {\n    throw new Error(`Invalid token account size ${creatorTokenAccount.data.length}`);\n  }\n  const creatorTokenInfo = AccountLayout.decode(Buffer.from(creatorTokenAccount.data));\n  if (new BN(creatorTokenInfo.amount, 8, \"le\").toNumber() < totalClaim) {\n    throw new Error(`Creator token account does not have enough tokens`);\n  }\n  return creatorTokenKey;\n}\n\nexport type CreateProps = {};\n\nexport const Create = (\n  props : CreateProps,\n) => {\n  const connection = useConnection();\n  const wallet = useWallet();\n\n  // claim state\n  const [claimMethod, setClaimMethod] = React.useState(localStorage.getItem(\"claimMethod\") || \"\");\n  const [candyConfig, setCandyConfig] = React.useState(localStorage.getItem(\"candyConfig\") || \"\");\n  const [candyUUID, setCandyUUID] = React.useState(localStorage.getItem(\"candyUUID\") || \"\");\n  const [mint, setMint] = React.useState(localStorage.getItem(\"mint\") || \"\");\n  const [filename, setFilename] = React.useState(\"\");\n  const [text, setText] = React.useState(\"\");\n  const [baseKey, setBaseKey] = React.useState<Keypair | undefined>(undefined);\n  const [claimURLs, setClaimURLs] = React.useState<Array<ClaimantInfo>>([]);\n\n  // auth state\n  const [otpAuth, setOtpAuth] = React.useState(localStorage.getItem(\"otpAuth\") || \"default\");\n  const [commMethod, setCommMethod] = React.useState(localStorage.getItem(\"commMethod\") || \"\");\n  const [commAuth, setCommAuth] = React.useState<AuthKeys>({});\n  const [commSource, setCommSource] = React.useState(localStorage.getItem(\"commSource\") || \"\");\n  const [awsAccessKeyId, setAwsAccessKeyId] = React.useState(\"\");\n  const [awsSecretKey, setAwsSecretKey] = React.useState(\"\");\n  const [mailcAPIKey, setMailcAPIKey] = React.useState(\"\");\n\n  const explorerUrlFor = (key : PublicKey) => {\n    return `https://explorer.solana.com/address/${key.toBase58()}?cluster=${Connection.envFor(connection)}`;\n  }\n\n  const submit = async (e : React.SyntheticEvent) => {\n    e.preventDefault();\n\n    setBaseKey(undefined);\n    setClaimURLs([]);\n\n    if (!wallet.connected || wallet.publicKey === null) {\n      throw new Error(`Wallet not connected`);\n    }\n\n    const displayMintTokens = (amount : number, mintInfo : MintInfo) : string => {\n      // TODO: better decimal rounding\n      return String(amount / Math.pow(10, mintInfo.decimals));\n    };\n\n    const claimants = parseClaimants(text);\n    if (claimants.length === 0) {\n      throw new Error(`No claimants provided`);\n    }\n\n    claimants.forEach((c, idx) => {\n      if (!c.handle) throw new Error(`Claimant ${idx} doesn't have handle`);\n      if (!c.amount) throw new Error(`Claimant ${idx} doesn't have amount`);\n      if (c.amount === 0) throw new Error(`Claimant ${idx} amount is 0`);\n    });\n\n    const claimInfo : any = {};\n    claimInfo.total = claimants.reduce((acc, c) => acc + c.amount, 0);\n    let isTokenAirdrop : boolean;\n    if (claimMethod === \"transfer\") {\n      isTokenAirdrop = true;\n      claimInfo.mint = await getMintInfo(connection, mint);\n      claimInfo.source = await getCreatorTokenAccount(\n        wallet.publicKey,\n        connection,\n        claimInfo.mint.key,\n        claimInfo.total\n      );\n      claimInfo.info = { type: \"Token\", meta: explorerUrlFor(claimInfo.mint.key) };\n    } else if (claimMethod === \"candy\") {\n      isTokenAirdrop = false;\n      claimInfo.config = await getCandyConfig(connection, candyConfig);\n      claimInfo.info = { type: \"Candy\", meta: explorerUrlFor(claimInfo.config) };\n\n      const [candyMachineKey, ] = await getCandyMachineAddress(\n        claimInfo.config, candyUUID);\n      claimInfo.candyMachineKey = candyMachineKey;\n      const candyMachine = await getCandyMachine(connection, candyMachineKey);\n      console.log(candyMachine);\n\n      const remaining = candyMachine.data.itemsAvailable.toNumber() - candyMachine.itemsRedeemed.toNumber();\n      if (isNaN(remaining)) {\n        // TODO: should this have an override?\n        throw new Error(`Could not calculae how many candy machine items are remaining`);\n      }\n      if (remaining < claimInfo.total) {\n        throw new Error(`Distributor is allocated more mints than the candy machine has remaining`);\n      }\n    } else {\n      throw new Error(`Unknown claim method ${claimMethod}`);\n    }\n    console.log(claimInfo);\n\n\n    const mightHaveExisting = (info : ClaimantInfo) => {\n      // TODO: others?\n      return info.url !== undefined && info.url !== null;\n    };\n    if (claimants.reduce((acc, c) => acc && mightHaveExisting(c), true)) {\n      // TODO: more validation of URLs? The creator is using they're own\n      // credentials to re-send so if they're malicious it's not that bad\n      // right?...\n      const resendOnly = await reactModal(({ show, onSubmit, onDismiss }) => {\n        const options = [\n          { click: () => onSubmit(\"create\"), name: \"Create and Send\" },\n          { click: () => onSubmit(\"send\")  , name: \"Send only\"       },\n        ];\n        return (\n          <DefaultModal visible={show} onCancel={onDismiss} width=\"70ch\">\n            <p style={{\n              color: \"white\",\n              fontSize: \"1rem\",\n              width: \"50ch\",\n              marginTop: 8,\n            }}>\n              Uploaded distribution list has URLs for all claimants.\n              Skip creation of airdrop and only re-send links?\n            </p>\n            <br />\n            <Stack direction=\"row\" spacing={2}>\n            {options.map((opt) => {\n              return (\n                <Button\n                  key={opt.name}\n                  style={{\n                    width: \"30ch\",\n                    color: \"white\",\n                    marginBottom: 8,\n                  }}\n                  variant=\"outlined\"\n                  onClick={opt.click}\n                >\n                  {opt.name}\n                </Button>\n              );\n            })}\n            </Stack>\n          </DefaultModal>\n        );\n      }) as string | undefined;\n      console.log(resendOnly);\n      if (resendOnly === \"send\") {\n        setClaimURLs(claimants);\n        const sender = setupSender(commMethod, commAuth, commSource);\n        for (const c of claimants) {\n          await sender(c, claimInfo.info);\n        }\n        return;\n      } else if (resendOnly === \"create\") {\n        // fallthrough to full create\n      } else {\n        // dismissed. don't use exceptions for control flow?\n        throw new Error(\"Dismissed\");\n      }\n    }\n\n    claimants.forEach(c => {\n      c.pin = new BN(randomBytes());\n      c.seed = isTokenAirdrop ? claimInfo.mint.key : claimInfo.config;\n    });\n\n    const leafs : Array<Buffer> = [];\n    for (let idx = 0; idx < claimants.length; ++idx ) {\n      const claimant = claimants[idx];\n      const seeds = [\n        claimant.seed.toBuffer(),\n        Buffer.from(claimant.handle),\n        Buffer.from(claimant.pin.toArray(\"le\", 4)),\n      ];\n      const [claimantPda, bump] = await PublicKey.findProgramAddress(\n          seeds, MERKLE_DISTRIBUTOR_ID);\n      claimant.bump = bump;\n      claimant.pda = claimantPda;\n      leafs.push(Buffer.from(\n        [...new BN(idx).toArray(\"le\", 8),\n         ...claimantPda.toBuffer(),\n         ...claimant.seed.toBuffer(),\n         ...new BN(claimant.amount).toArray(\"le\", 8),\n        ]\n      ));\n    }\n\n    const tree = new MerkleTree(leafs);\n    const root = tree.getRoot();\n\n\n    const base = Keypair.generate();\n    console.log(`Base ${base.publicKey.toBase58()}`);\n    const [distributor, dbump] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"MerkleDistributor\"),\n        base.publicKey.toBuffer(),\n      ],\n      MERKLE_DISTRIBUTOR_ID);\n\n    for (let idx = 0; idx < claimants.length; ++idx) {\n      const proof = tree.getProof(idx);\n      const verified = tree.verifyProof(idx, proof, root);\n\n      if (!verified) {\n        throw new Error(\"Gumdrop merkle tree verification failed\");\n      }\n\n      const claimant = claimants[idx];\n      const params = [\n        `distributor=${distributor}`,\n        `handle=${claimant.handle}`,\n        `amount=${claimant.amount}`,\n        `index=${idx}`,\n        `pin=${claimant.pin.toNumber()}`,\n        `proof=${proof.map(b => bs58.encode(b))}`,\n      ];\n      if (isTokenAirdrop) {\n        params.push(`tokenAcc=${claimInfo.source}`);\n      } else {\n        params.push(`config=${candyConfig}`);\n        params.push(`uuid=${candyUUID}`);\n      }\n      const query = params.join(\"&\");\n\n      claimant.url = `${window.location.origin}${window.location.pathname}#/claim?${query}`;\n    }\n\n    const shouldSend = await reactModal(({ show, onSubmit, onDismiss }) => {\n      const options = [\n        { click: () => onSubmit(false), name: \"Cancel\"  },\n        { click: () => onSubmit(true) , name: \"Approve\" },\n      ];\n      return (\n        <DefaultModal visible={show} onCancel={onDismiss} width=\"70ch\">\n          <h2\n            style={{\n              color: \"white\",\n              fontWeight: \"bold\",\n              fontSize: 20,\n            }}\n          >\n            Claim Distribution Preview\n          </h2>\n          <TableContainer\n            sx={{\n              \"td, th\": { color: \"white\" },\n              backgroundColor: \"#444444\",\n              borderRadius: \"5px\",\n              maxHeight: \"30ch\",\n            }}\n          >\n            <Table size=\"small\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Handle</TableCell>\n                  <TableCell>Tokens</TableCell>\n                  <TableCell>Pin</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {claimants.map((c) => (\n                  <TableRow\n                    key={c.pda.toBase58()}\n                    sx={{ 'td, th': { border: 0 } }}\n                  >\n                    <TableCell component=\"th\" scope=\"row\">{c.handle} </TableCell>\n                    <TableCell>\n                      {isTokenAirdrop\n                        ? displayMintTokens(c.amount, claimInfo.mint.info)\n                        : c.amount\n                      }\n                    </TableCell>\n                    <TableCell>{c.pin.toNumber()}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <Box style={{ height: 10 }} />\n          <Stack direction=\"row\" spacing={2}>\n          {options.map((opt) => {\n            return (\n              <Button\n                key={opt.name}\n                style={{\n                  width: \"30ch\",\n                  color: \"white\",\n                  marginBottom: 8,\n                }}\n                variant=\"outlined\"\n                onClick={opt.click}\n              >\n                {opt.name}\n              </Button>\n            );\n          })}\n          </Stack>\n        </DefaultModal>\n      );\n    }) as boolean | undefined;\n    if (shouldSend === true) {\n    } else {\n      // dismissed. don't use exceptions for control flow?\n      throw new Error(\"Claim distribution preview not approved\");\n    }\n\n    // TODO: defer until success?\n    setBaseKey(base);\n    setClaimURLs(claimants);\n\n    // temporal auth is the AWS signer by 'default' and a no-op key otherwise\n    let temporalSigner;\n    if (otpAuth === \"default\") {\n      temporalSigner = MERKLE_TEMPORAL_SIGNER;\n    } else if (otpAuth === \"none\") {\n      temporalSigner = PublicKey.default;\n    } else {\n      throw new Error(`Unknown OTP authorization type ${otpAuth}`);\n    }\n\n    // initial merkle-distributor state\n    const instructions = Array<TransactionInstruction>();\n    instructions.push(new TransactionInstruction({\n        programId: MERKLE_DISTRIBUTOR_ID,\n        keys: [\n            { pubkey: base.publicKey          , isSigner: true  , isWritable: false } ,\n            { pubkey: distributor             , isSigner: false , isWritable: true  } ,\n            { pubkey: wallet.publicKey        , isSigner: true  , isWritable: false } ,\n            { pubkey: SystemProgram.programId , isSigner: false , isWritable: false } ,\n        ],\n        data: Buffer.from([\n          ...Buffer.from(sha256.digest(\"global:new_distributor\")).slice(0, 8),\n          ...new BN(dbump).toArray(\"le\", 1),\n          ...root,\n          ...temporalSigner.toBuffer(),\n        ])\n    }));\n\n    if (isTokenAirdrop) {\n      instructions.push(Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        claimInfo.source,\n        distributor,\n        wallet.publicKey,\n        [],\n        claimInfo.total\n      ));\n    } else {\n      const [distributorWalletKey, ] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"Wallet\"),\n          distributor.toBuffer(),\n        ],\n        MERKLE_DISTRIBUTOR_ID\n      );\n\n      instructions.push(new TransactionInstruction({\n          programId: CANDY_MACHINE_ID,\n          keys: [\n              { pubkey: claimInfo.candyMachineKey,isSigner: false , isWritable: true  } ,\n              { pubkey: wallet.publicKey        , isSigner: true  , isWritable: false } ,\n          ],\n          data: Buffer.from([\n            ...Buffer.from(sha256.digest(\"global:update_authority\")).slice(0, 8),\n            ...new BN(1).toArray(\"le\", 1),  // optional exists...\n            ...distributorWalletKey.toBuffer(),\n          ])\n      }));\n    }\n\n    const createResult = await Connection.sendTransactionWithRetry(\n      connection,\n      wallet,\n      instructions,\n      [base]\n    );\n\n    console.log(createResult);\n    if (typeof createResult === \"string\") {\n      throw new Error(createResult);\n    } else {\n      notify({\n        message: \"Distributor creation succeeded\",\n        description: (\n          <HyperLink href={Connection.explorerLinkFor(createResult.txid, connection)}>\n            View transaction on explorer\n          </HyperLink>\n        ),\n      });\n    }\n\n    console.log(\"Distributing claim URLs\");\n    const sender = setupSender(commMethod, commAuth, commSource);\n    for (const c of claimants) {\n      await sender(c, claimInfo.info);\n    }\n  };\n\n  const handleFiles = (files) => {\n    if (files.length !== 1) {\n      notify({\n        message: \"File upload failed\",\n        description: `Received ${files.length} files`,\n      });\n      return;\n    }\n\n    const file = files[0];\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      if (e !== null && e.target !== null) {\n        if (typeof e.target.result === \"string\") {\n          try {\n            parseClaimants(e.target.result);\n          } catch {\n            notify({\n              message: `File upload failed for: ${file.name}`,\n              description: (\n                <span>\n                  Could not parse uploaded file.{WHITESPACE}\n                  <HyperLink href=\"#/\">\n                    Does it follow the JSON scheme?\n                  </HyperLink>\n                </span>\n              ),\n            });\n            setFilename(\"\");\n            setText(\"\");\n            return;\n          }\n          setFilename(file.name);\n          setText(e.target.result);\n        } else {\n          notify({\n            message: `File upload failed for: ${file.name}`,\n            description: \"Could not read uploaded file\",\n          });\n        }\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  const claimData = (claimMethod) => {\n    if (claimMethod === \"candy\") {\n      return (\n        <React.Fragment>\n          <TextField\n            style={{width: \"60ch\"}}\n            id=\"config-text-field\"\n            label=\"Candy Config\"\n            value={candyConfig}\n            onChange={e => {\n              setCandyConfig(e.target.value);\n              localStorage.setItem(\"candyConfig\", e.target.value);\n            }}\n          />\n          <TextField\n            style={{width: \"60ch\"}}\n            id=\"config-uuid-text-field\"\n            label=\"Candy UUID\"\n            value={candyUUID}\n            onChange={e => {\n              setCandyUUID(e.target.value);\n              localStorage.setItem(\"candyUUID\", e.target.value);\n            }}\n          />\n        </React.Fragment>\n      );\n    } else if (claimMethod === \"transfer\") {\n      return (\n        <TextField\n          style={{width: \"60ch\"}}\n          id=\"mint-text-field\"\n          label=\"Mint\"\n          value={mint}\n          onChange={(e) => {\n            localStorage.setItem(\"mint\", e.target.value);\n            setMint(e.target.value);\n          }}\n        />\n      );\n    }\n  };\n\n  const commAuthorization = (commMethod) => {\n    if (commMethod === \"Manual\") {\n      return null;\n    }\n\n    if (commMethod === \"AWS SES\") {\n      return (\n        <React.Fragment>\n          <TextField\n            style={{width: \"60ch\"}}\n            id=\"comm-access-key-id-field\"\n            label={`${commMethod} Access Key Id`}\n            value={awsAccessKeyId}\n            onChange={(e) => {\n              setCommAuth(prev => ({...prev, accessKeyId: e.target.value}));\n              setAwsAccessKeyId(e.target.value)\n            }}\n          />\n          <TextField\n            style={{width: \"60ch\"}}\n            id=\"comm-secret-access-key-field\"\n            label={`${commMethod} Secret Access Key`}\n            value={awsSecretKey}\n            onChange={(e) => {\n              setCommAuth(prev => ({...prev, secretAccessKey: e.target.value}));\n              setAwsSecretKey(e.target.value)\n            }}\n          />\n          <TextField\n            style={{width: \"60ch\"}}\n            id=\"comm-source-field\"\n            label={`${commMethod} Source`}\n            value={commSource}\n            onChange={(e) => {\n              localStorage.setItem(\"commSource\", e.target.value);\n              setCommSource(e.target.value)\n            }}\n          />\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        <TextField\n          style={{width: \"60ch\"}}\n          id=\"comm-auth-field\"\n          label={`${commMethod} API key`}\n          value={mailcAPIKey}\n          onChange={(e) => {\n            setCommAuth(prev => ({...prev, apiKey: e.target.value}));\n            setMailcAPIKey(e.target.value)\n          }}\n        />\n        <TextField\n          style={{width: \"60ch\"}}\n          id=\"comm-source-field\"\n          label={`${commMethod} Source`}\n          value={commSource}\n          onChange={(e) => {\n            localStorage.setItem(\"commSource\", e.target.value);\n            setCommSource(e.target.value)\n          }}\n        />\n      </React.Fragment>\n    );\n  };\n\n  const fileUpload = (\n    <React.Fragment>\n      <DragAndDrop handleDrop={handleFiles} >\n        <Stack\n          direction=\"row\"\n          style={{\n            width: \"60ch\",\n            height: \"15ch\",\n          }}\n          sx={{\n            border: '1px dashed grey',\n            justifyContent: \"center\",\n            alignContent: \"center\",\n          }}\n        >\n          <Button\n            variant=\"text\"\n            component=\"label\"\n            style={{\n              padding: 0,\n              // don't make the button click field too large...\n              marginTop: \"5ch\",\n              marginBottom: \"5ch\",\n            }}\n          >\n            Upload a {filename === \"\" ? \"distribution\" : \"different\"} list\n            <input\n              type=\"file\"\n              onChange={(e) => {\n                handleFiles(e.target.files);\n                // re-parse every time...\n                e.target.value = '';\n              }}\n              hidden\n            />\n          </Button>\n          {WHITESPACE}\n          {/*For display alignment...*/}\n          <Button\n            variant=\"text\"\n            component=\"label\"\n            disabled={true}\n            style={{padding: 0}}\n          >\n            or drag it here\n          </Button>\n        </Stack>\n      </DragAndDrop>\n      {filename !== \"\"\n      ? (<Button\n            variant=\"text\"\n            component=\"label\"\n            disabled={true}\n            style={{\n              padding: 0,\n              // textTransform: 'none',\n            }}\n          >\n            <FilePresentIcon />\n            <span>{WHITESPACE} Uploaded {filename}</span>\n          </Button>\n        )\n      : (<Box/>)}\n    </React.Fragment>\n  );\n\n  const [loading, setLoading] = React.useState(false);\n  const loadingProgress = () => (\n    <CircularProgress\n      size={24}\n      sx={{\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        marginTop: '-12px',\n        marginLeft: '-12px',\n      }}\n    />\n  );\n  const createAirdrop = (\n    <Box sx={{ position: \"relative\" }}>\n    <Button\n      disabled={!wallet.connected || !filename || loading || claimURLs.length > 0}\n      variant=\"contained\"\n      style={{ width: \"100%\" }}\n      onClick={(e) => {\n        setLoading(true);\n        const wrap = async () => {\n          try {\n            await submit(e);\n            setLoading(false);\n          } catch (err) {\n            notify({\n              message: \"Create failed\",\n              description: `${err}`,\n            });\n            setLoading(false);\n          }\n        };\n        wrap();\n      }}\n    >\n      Create Airdrop\n    </Button>\n    {loading && loadingProgress()}\n    </Box>\n  );\n\n  const hyperLinkData = (data) => {\n    const encoded = encodeURIComponent(JSON.stringify(data));\n    return `data:text/plain;charset=utf-8,${encoded}`;\n  };\n\n  return (\n    <Stack spacing={2}>\n      <FormControl fullWidth>\n        <InputLabel id=\"claim-method-label\">Claim Method</InputLabel>\n        <Select\n          labelId=\"claim-method-label\"\n          id=\"claim-method-select\"\n          value={claimMethod}\n          label=\"Claim Method\"\n          onChange={(e) => {\n            localStorage.setItem(\"claimMethod\", e.target.value);\n            setClaimMethod(e.target.value);\n          }}\n          style={{textAlign: \"left\"}}\n        >\n          <MenuItem value={\"transfer\"}>Token Transfer</MenuItem>\n          <MenuItem value={\"candy\"}>Candy Machine</MenuItem>\n        </Select>\n      </FormControl>\n      {claimMethod !== \"\" && claimData(claimMethod)}\n      <FormControl fullWidth>\n        <InputLabel id=\"otp-auth-label\">OTP Authorization</InputLabel>\n        <Select\n          labelId=\"otp-auth-label\"\n          id=\"otp-auth-select\"\n          value={otpAuth}\n          label=\"OTP Authorization\"\n          onChange={(e) => {\n            localStorage.setItem(\"otpAuth\", e.target.value);\n            setOtpAuth(e.target.value);\n          }}\n          style={{textAlign: \"left\"}}\n        >\n          <MenuItem value={\"default\"}>\n            Default{WHITESPACE}\n            <HyperLink\n              href={explorerUrlFor(MERKLE_TEMPORAL_SIGNER)}\n              underline=\"none\"\n              target=\"_blank\" rel=\"noopener noreferrer\"\n            >\n              ({shortenAddress(MERKLE_TEMPORAL_SIGNER.toBase58())})\n            </HyperLink>\n          </MenuItem>\n          <MenuItem value={\"none\"}>None</MenuItem>\n        </Select>\n      </FormControl>\n      <FormControl fullWidth>\n        <InputLabel id=\"comm-method-label\">Distribution Method</InputLabel>\n        <Select\n          labelId=\"comm-method-label\"\n          id=\"comm-method-select\"\n          value={commMethod}\n          label=\"Distribution Method\"\n          onChange={(e) => {\n            localStorage.setItem(\"commMethod\", e.target.value);\n            setCommMethod(e.target.value);\n          }}\n          style={{textAlign: \"left\"}}\n        >\n          <MenuItem value={\"AWS SES\"}>AWS SES</MenuItem>\n          <MenuItem value={\"Manual\"}>Manual</MenuItem>\n        </Select>\n      </FormControl>\n      {commMethod !== \"\" && commAuthorization(commMethod)}\n      {commMethod !== \"\" && fileUpload}\n      {commMethod !== \"\" && createAirdrop}\n      {baseKey !== undefined && (\n        <HyperLink\n          href={hyperLinkData(Array.from(baseKey.secretKey))}\n          download=\"basekey.json\"\n          underline=\"none\"\n          style={{width: \"100%\"}}\n        >\n          <Button\n            variant=\"contained\"\n            style={{width: \"100%\"}}\n          >\n            Download Distributor Base Secret Key\n          </Button>\n        </HyperLink>\n      )}\n      {claimURLs.length > 0 && (\n        <HyperLink\n          href={hyperLinkData(claimURLs)}\n          download=\"claimURLs.json\"\n          underline=\"none\"\n          style={{width: \"100%\"}}\n        >\n          <Button\n            variant=\"contained\"\n            style={{width: \"100%\"}}\n          >\n            Download claim URLs\n          </Button>\n        </HyperLink>\n      )}\n    </Stack>\n  );\n};\n","import React from \"react\"\nimport {\n  useColorMode,\n} from \"../contexts/ColorModeContext\";\n\nexport const DragAndDrop = (props) => {\n  const dropRef = React.useRef<HTMLDivElement>(null);\n  const [dragCounter, setDragCounter] = React.useState(0);\n  const [dragging, setDragging] = React.useState(false);\n\n  const handleDrag = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n  };\n\n  const handleDragIn = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n\n    setDragCounter(dragCounter + 1);\n    if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {\n      setDragging(true);\n    }\n  };\n\n  const handleDragOut = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n\n    const remainingDrags = dragCounter - 1;\n    setDragCounter(remainingDrags);\n    if (remainingDrags === 0) {\n      setDragging(false);\n    }\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n\n    setDragging(false);\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      props.handleDrop(e.dataTransfer.files);\n      e.dataTransfer.clearData();\n      setDragCounter(0);\n    }\n  };\n\n  React.useEffect(() => {\n    const node = dropRef.current;\n    if (node === null) return;\n    node.addEventListener(\"dragenter\" , handleDragIn);\n    node.addEventListener(\"dragleave\" , handleDragOut);\n    node.addEventListener(\"dragover\"  , handleDrag);\n    node.addEventListener(\"drop\"      , handleDrop);\n\n    return () => {\n      node.removeEventListener(\"dragenter\" , handleDragIn);\n      node.removeEventListener(\"dragleave\" , handleDragOut);\n      node.removeEventListener(\"dragover\"  , handleDrag);\n      node.removeEventListener(\"drop\"      , handleDrop);\n    };\n  });\n\n  const colorModeCtx = useColorMode();\n  const shade = colorModeCtx.mode === 'dark' ? \"rgba(255,255,255,.1)\" : \"rgba(0, 0, 0,.1)\";\n\n  return (\n    <div\n      ref={dropRef}\n      style={dragging ? { backgroundColor: shade} : {}}\n    >\n      {props.children}\n    </div>\n  );\n};\n\n\nexport default DragAndDrop;\n","import React from \"react\";\n\nexport type CenteredProps = {\n  children : React.ReactNode,\n  height : string,\n  width : string,\n}\n\nexport const Centered = (\n  props : CenteredProps\n) => {\n  return (\n    <div\n      style={{\n        display: \"table\",\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        height: \"100%\",\n        width: \"100%\",\n      }}\n    >\n      <div\n        style={{\n          display: \"table-cell\",\n          verticalAlign: \"middle\",\n        }}\n      >\n        <div\n          style={{\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            height: props.height,\n            width: props.width,\n          }}\n        >\n          {props.children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Centered;\n","import { ButtonGroup, ButtonGroupProps } from \"@mui/material\";\nimport { Settings } from \"./Settings\";\n\nexport type ConnectButtonProps = ButtonGroupProps & {\n  isConnected: boolean;\n  onClickConnect: () => void;\n  onClickChange: () => void;\n};\n\nexport const ConnectButton: React.FC<ConnectButtonProps> = ({\n  isConnected,\n  onClickConnect,\n  onClickChange,\n  ...restProps\n}) => {\n  return (\n    <ButtonGroup   {...restProps}>\n      <Settings/>\n    </ButtonGroup>\n  );\n};\n\nexport default ConnectButton;\n","import React, { useCallback } from \"react\";\nimport {\n  Box,\n  Button,\n  Link,\n  Stack,\n} from \"@mui/material\";\nimport HomeIcon from '@mui/icons-material/Home';\n\nimport ConnectButton from \"../ConnectButton\";\nimport { ModalEnum, useModal, useWalletModal } from \"../../contexts\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { AppBar } from \"@mui/material\";\n\nexport const Header: React.FC = () => {\n  const { setModal } = useModal();\n  const { setVisible } = useWalletModal();\n  const wallet = useWallet();\n  const connected = wallet.connected;\n\n  const handleChange = useCallback(() => setVisible(true), [setVisible]);\n\n  const handleConnect = useCallback(() => {\n    setModal(ModalEnum.WALLET);\n    setVisible(true);\n  }, [setModal, setVisible]);\n  return (\n    <AppBar color=\"default\">\n    <Box\n      sx={{\n        display: \"flex\",\n        bgcolor: \"action.disabledBackground\",\n      }}\n      minWidth=\"100%\"\n    >\n      <Stack\n        direction=\"row\"\n        spacing={2}\n        sx={{\n          display: \"flex\",\n          height: \"62px\",\n          justifyContent: \"flex-start\",\n          alignItems: \"center\",\n          marginLeft: \"36px\",\n        }}\n      >\n        <Link href=\"#/\" underline=\"none\">\n          <Button variant=\"outlined\">\n            <HomeIcon />\n          </Button>\n        </Link>\n        <Link href=\"#/create\" underline=\"none\">\n          <Button variant=\"outlined\">\n            Create\n          </Button>\n        </Link>\n        <Link href=\"#/claim\" underline=\"none\">\n          <Button variant=\"outlined\">\n            Claim\n          </Button>\n        </Link>\n        <Link href=\"#/close\" underline=\"none\">\n          <Button variant=\"outlined\">\n            Close\n          </Button>\n        </Link>\n      </Stack>\n      <Box sx={{flexGrow: 1}}></Box>\n      <Box\n        sx={{\n          display: \"flex\",\n          height: \"62px\",\n          justifyContent: \"flex-end\",\n          alignItems: \"center\",\n        }}\n      >\n        <ConnectButton\n          isConnected={connected}\n          sx={{ marginRight: \"36px\" }}\n          onClickConnect={handleConnect}\n          onClickChange={handleChange}\n        />\n      </Box>\n    </Box>\n</AppBar>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport {\n  HashRouter,\n  Link,\n  Route,\n  Switch,\n} from \"react-router-dom\";\n\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport {\n  Box,\n  Link as HyperLink,\n  Stack,\n} from \"@mui/material\";\n\nimport \"./App.css\";\nimport {\n  useColorMode,\n} from \"./contexts\";\nimport Centered from \"./components/Centered\";\nimport Header from \"./components/Header/Header\";\nimport { Claim } from \"./components/Claim\";\nimport { Close } from \"./components/Close\";\nimport { Create } from \"./components/Create\";\n\nconst WHITESPACE = \"\\u00A0\";\n\ntype AboutProps = {};\n\nconst About = (\n  props : AboutProps,\n) => {\n  const summary = (\n    <Stack spacing={1}>\n      <div>\n      The Gumdrop program leverages the Solana blockchain and merkle trees to\n      facilitate airdrops to a large number of whitelisted users at a low cost\n      to creators.\n      </div>\n\n      <div>\n      In the Solana ecosystem, the cost of token airdrops is currently largely\n      due to rent costs being{WHITESPACE}\n      <HyperLink\n        href=\"https://docs.solana.com/implemented-proposals/rent\"\n        underline=\"none\"\n      >\n        \"fixed at the genesis\"\n      </HyperLink>\n      . With the large increase in SOLUSD since genesis, rent costs when\n      creating accounts for thousands of users have duly skyrocketed.\n      </div>\n\n      <div>\n      Simultaneously, NFT projects often have a presale to early project\n      followers and contributors. However, the candy-machine doesn't have the\n      ability to grant early minting to a whitelisted subset of wallets while\n      also using the same asset configuration for open launch.\n      </div>\n\n      <div>\n      Gumpdrop (originally pioneered for token airdrops by{\" \"}\n      <HyperLink\n        href=\"https://github.com/Uniswap/merkle-distributor\"\n        underline=\"none\"\n      >\n        Uniswap\n      </HyperLink>\n      {\" \"}and ported to Solana by{WHITESPACE}\n      <HyperLink\n        href=\"https://github.com/saber-hq/merkle-distributor\"\n        underline=\"none\"\n      >\n        Saber\n      </HyperLink>) solves both these issues by building a space-efficient hash\n      structure (the merkle tree) such that an on-chain program can validate\n      whether the user is part of a whitelist. Moreover, Gumdrop\n      allows creators to directly send whitelisted users an airdrop reclamation\n      link by building the tree with off-chain handles (e.g email, twitter,\n      etc) and allowing the user to redeem into any wallet.\n      </div>\n    </Stack>\n  );\n\n  const create= (\n    <Stack spacing={1}>\n      <Link to=\"/create\">\n        CREATION\n      </Link>\n\n      <div>\n      Creation builds a whitelist of users that can claim either existing\n      fungible tokens or directly mint from a pre-sale candy-machine.\n      </div>\n\n      <div>\n      Creators must choose a mint or a candy-machine config and UUID, an\n      off-chain notification method (based on the handles supplied below, e.g\n      email, twitter, etc), and supply a list of recipients and balances with\n      the following JSON schema{WHITESPACE}\n      <HyperLink\n        href={`data:text/plain;charset=utf-8,${JSON.stringify(require(\"./example.json\"))}`}\n        download=\"example.json\"\n        underline=\"none\"\n      >\n      (Click here for an example)\n      </HyperLink>\n      </div>\n\n      <pre style={{ fontSize: 14 }}>{`\n[\n  {\n    \"handle\": \"<DISTRIBUTION-SPECIFIC-HANDLE>\"\n    \"amount\": <#-TOKENS-OR-CANDY-MINTS>\n  },\n  ...\n]`}</pre>\n\n      <div>\n      NB: When a candy-machine is supplied, update authority for the\n      candy-machine will be transferred to the Gumdrop state. This can\n      be reclaimed by closing the Gumdrop.\n      </div>\n    </Stack>\n  );\n\n  const claim = (\n    <Stack spacing={1}>\n      <Link to=\"/claim\">\n        CLAIMS\n      </Link>\n\n      <div>\n      Claims are redeemed through a URL with query parameters holding\n      claim-specific keys. Claimants will need to verify ownership of the\n      specified handle by answering a OTP challenge and pay the rent and\n      minting fees if applicable.\n      </div>\n    </Stack>\n  );\n\n  const close = (\n    <Stack spacing={1}>\n      <Link to=\"/close\">\n        CLOSING\n      </Link>\n\n      <div>\n      Closing the Gumdrop cleans up the on-chain state and allows\n      creators to recycle any lamports held for rent-exemption after the\n      airdrop is complete.\n      </div>\n\n      <div>\n      When closing a candy-machine-integrated distributor, update authority\n      will be transferred back to the wallet owner.\n      </div>\n    </Stack>\n  );\n\n  const steps = [\n    { name: \"summary\" , inner: summary } ,\n    { name: \"create\"  , inner: create  } ,\n    { name: \"claim\"   , inner: claim   } ,\n    { name: \"close\"   , inner: close   } ,\n  ];\n  return (\n    <Stack\n      alignContent=\"left\"\n      textAlign=\"left\"\n      spacing={2}\n    >\n      {steps.map(s => s.inner)}\n    </Stack>\n  );\n};\n\nconst getWindowDimensions = () => {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n};\n\n// eslint-disable-next-line\nconst useWindowDimensions = () => {\n  const [windowDimensions, setWindowDimensions] = React.useState(\n    getWindowDimensions()\n  );\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n};\n\nfunction App() {\n  const colorModeCtx = useColorMode();\n\n  React.useEffect(() => {}, [colorModeCtx.mode]);\n\n  const theme = React.useMemo(\n    () => {\n      let mode, disabledColor;\n      if (colorModeCtx.mode === \"dark\" || !colorModeCtx.mode) {\n        mode = \"dark\";\n        disabledColor = \"#eee\";\n      } else {\n        mode = \"light\";\n        disabledColor = \"#111\";\n      }\n\n      return createTheme({\n        palette: {\n          mode,\n          action: {\n            disabled: disabledColor,\n          },\n        },\n      })\n    },\n    [colorModeCtx.mode]\n  );\n\n  const { height } = useWindowDimensions();\n\n  return (\n    <div className=\"App\" style={{ backgroundColor: \"transparent\" }}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Header />\n        <Centered height={ `${height * 0.8}px` } width=\"60ch\">\n          <Box height=\"60px\" />\n          <HashRouter>\n            <Switch>\n              <Route path=\"/create\" component={Create} />\n              <Route path=\"/claim\" component={Claim} />\n              <Route path=\"/close\" component={Close} />\n              <Route path=\"/\" component={About} />\n            </Switch>\n          </HashRouter>\n          <Box height=\"80px\" />\n        </Centered>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport {\n  AccountsProvider,\n  WalletProvider,\n  ConnectionProvider,\n  ColorModeContextProvider,\n} from \"./contexts\";\n\nimport \"antd/dist/antd.css\";\nimport \"@fontsource/open-sans\";\nimport \"@fontsource/roboto\";\nimport \"@fontsource/sora\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConnectionProvider>\n      <WalletProvider>\n        <AccountsProvider>\n          <ColorModeContextProvider>\n            <App />\n          </ColorModeContextProvider>\n        </AccountsProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n","import BN from 'bn.js';\n\nexport const TEN = new BN(10);\nexport const HALF_WAD = TEN.pow(new BN(18));\nexport const WAD = TEN.pow(new BN(18));\nexport const RAY = TEN.pow(new BN(27));\nexport const ZERO = new BN(0);\n","import { useCallback, useState } from 'react';\nimport { MintInfo } from '@solana/spl-token';\n\nimport { TokenAccount } from './../models';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { WAD, ZERO } from '../constants';\nimport { TokenInfo } from '@solana/spl-token-registry';\n\nexport type KnownTokenMap = Map<string, TokenInfo>;\n\nexport const formatPriceNumber = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 8,\n});\n\nexport function useLocalStorageState(key: string, defaultState?: string) {\n  const [state, setState] = useState(() => {\n    // NOTE: Not sure if this is ok\n    const storedState = localStorage.getItem(key);\n    if (storedState) {\n      return JSON.parse(storedState);\n    }\n    return defaultState;\n  });\n\n  const setLocalStorageState = useCallback(\n    newState => {\n      const changed = state !== newState;\n      if (!changed) {\n        return;\n      }\n      setState(newState);\n      if (newState === null) {\n        localStorage.removeItem(key);\n      } else {\n        try {\n          localStorage.setItem(key, JSON.stringify(newState));\n        } catch {\n          // ignore\n        }\n      }\n    },\n    [state, key],\n  );\n\n  return [state, setLocalStorageState];\n}\n\nexport const findProgramAddress = async (\n  seeds: (Buffer | Uint8Array)[],\n  programId: PublicKey,\n) => {\n  const key =\n    'pda-' +\n    seeds.reduce((agg, item) => agg + item.toString('hex'), '') +\n    programId.toString();\n  let cached = localStorage.getItem(key);\n  if (cached) {\n    const value = JSON.parse(cached);\n\n    return [value.key, parseInt(value.nonce)] as [string, number];\n  }\n\n  const result = await PublicKey.findProgramAddress(seeds, programId);\n\n  try {\n    localStorage.setItem(\n      key,\n      JSON.stringify({\n        key: result[0].toBase58(),\n        nonce: result[1],\n      }),\n    );\n  } catch {\n    // ignore\n  }\n\n  return [result[0].toBase58(), result[1]] as [string, number];\n};\n\n// shorten the checksummed version of the input address to have 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n}\n\nexport function getTokenName(\n  map: KnownTokenMap,\n  mint?: string | PublicKey,\n  shorten = true,\n): string {\n  const mintAddress = typeof mint === 'string' ? mint : mint?.toBase58();\n\n  if (!mintAddress) {\n    return 'N/A';\n  }\n\n  const knownSymbol = map.get(mintAddress)?.symbol;\n  if (knownSymbol) {\n    return knownSymbol;\n  }\n\n  return shorten ? `${mintAddress.substring(0, 5)}...` : mintAddress;\n}\nexport function getVerboseTokenName(\n  map: KnownTokenMap,\n  mint?: string | PublicKey,\n  shorten = true,\n): string {\n  const mintAddress = typeof mint === 'string' ? mint : mint?.toBase58();\n\n  if (!mintAddress) {\n    return 'N/A';\n  }\n\n  const knownName = map.get(mintAddress)?.name;\n  if (knownName) {\n    return knownName;\n  }\n\n  return shorten ? `${mintAddress.substring(0, 5)}...` : mintAddress;\n}\n\nexport function getTokenByName(tokenMap: KnownTokenMap, name: string) {\n  let token: TokenInfo | null = null;\n  for (const val of tokenMap.values()) {\n    if (val.symbol === name) {\n      token = val;\n      break;\n    }\n  }\n  return token;\n}\n\nexport function getTokenIcon(\n  map: KnownTokenMap,\n  mintAddress?: string | PublicKey,\n): string | undefined {\n  const address =\n    typeof mintAddress === 'string' ? mintAddress : mintAddress?.toBase58();\n  if (!address) {\n    return;\n  }\n\n  return map.get(address)?.logoURI;\n}\n\nexport function isKnownMint(map: KnownTokenMap, mintAddress: string) {\n  return !!map.get(mintAddress);\n}\n\nexport const STABLE_COINS = new Set(['USDC', 'wUSDC', 'USDT']);\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(\n    0,\n    new Array(Math.ceil(array.length / size)),\n  ).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\n\nexport function toLamports(\n  account?: TokenAccount | number,\n  mint?: MintInfo,\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount =\n    typeof account === 'number' ? account : account.info.amount?.toNumber();\n\n  const precision = Math.pow(10, mint?.decimals || 0);\n  return Math.floor(amount * precision);\n}\n\nexport function wadToLamports(amount?: BN): BN {\n  return amount?.div(WAD) || ZERO;\n}\n\nexport function fromLamports(\n  account?: TokenAccount | number | BN,\n  mint?: MintInfo,\n  rate: number = 1.0,\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount = Math.floor(\n    typeof account === 'number'\n      ? account\n      : BN.isBN(account)\n      ? account.toNumber()\n      : account.info.amount.toNumber(),\n  );\n\n  const precision = Math.pow(10, mint?.decimals || 9);\n  return (amount / precision) * rate;\n}\n\nexport const tryParseKey = (key: string): PublicKey | null => {\n  try {\n    return new PublicKey(key);\n  } catch (error) {\n    return null;\n  }\n};\n\nvar SI_SYMBOL = ['', 'k', 'M', 'G', 'T', 'P', 'E'];\n\nconst abbreviateNumber = (number: number, precision: number) => {\n  let tier = (Math.log10(number) / 3) | 0;\n  let scaled = number;\n  let suffix = SI_SYMBOL[tier];\n  if (tier !== 0) {\n    let scale = Math.pow(10, tier * 3);\n    scaled = number / scale;\n  }\n\n  return scaled.toFixed(precision) + suffix;\n};\n\nexport const formatAmount = (\n  val: number,\n  precision: number = 2,\n  abbr: boolean = true,\n) => (abbr ? abbreviateNumber(val, precision) : val.toFixed(precision));\n\nexport function formatTokenAmount(\n  account?: TokenAccount | number | BN,\n  mint?: MintInfo,\n  rate: number = 1.0,\n  prefix = '',\n  suffix = '',\n  precision = 2,\n  abbr = false,\n): string {\n  if (!account) {\n    return '';\n  }\n\n  return `${[prefix]}${formatAmount(\n    fromLamports(account, mint, rate),\n    precision,\n    abbr,\n  )}${suffix}`;\n}\n\nexport const formatUSD = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n});\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n};\n\nexport const formatPct = new Intl.NumberFormat('en-US', {\n  style: 'percent',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport function convert(\n  account?: TokenAccount | number,\n  mint?: MintInfo,\n  rate: number = 1.0,\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount =\n    typeof account === 'number' ? account : account.info.amount?.toNumber();\n\n  const precision = Math.pow(10, mint?.decimals || 0);\n  let result = (amount / precision) * rate;\n\n  return result;\n}\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n"],"sourceRoot":""}