{"version":3,"sources":["utils/ids.ts","contexts/ConnectionContext.tsx","utils/programIds.ts","contexts/AccountContext.tsx","utils/notifications.tsx","components/ExplorerLink/index.tsx","utils/eventEmitter.ts","components/Settings/index.tsx","utils/merkle-tree.ts","App.tsx","components/DragAndDrop.tsx","components/ConnectButton.tsx","components/Header/Header.tsx","components/DefaultModal/index.tsx","contexts/WalletContext/WalletContext.tsx","contexts/WalletContext/wallet.less","contexts/ModalContext.tsx","contexts/ColorModeContext.tsx","utils/borsh.ts","reportWebVitals.ts","index.tsx","constants/math.ts","utils/utils.ts"],"names":["WRAPPED_SOL_MINT","Map","PublicKey","TOKEN_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","BPF_UPGRADE_LOADER_ID","MEMO_ID","SYSTEM","ENDPOINTS","name","endpoint","ChainId","MainnetBeta","Devnet","DEFAULT","ConnectionContext","React","createContext","setEndpoint","connection","Connection","env","tokens","tokenMap","ConnectionProvider","children","undefined","useLocalStorageState","useMemo","find","end","useState","setTokens","setTokenMap","useEffect","TokenListProvider","resolve","then","container","list","excludeByTag","filterByChainId","getList","knownMints","reduce","map","item","set","address","id","onAccountChange","Keypair","generate","publicKey","removeAccountChangeListener","onSlotChange","removeSlotChangeListener","Provider","value","useConnection","useContext","useConnectionConfig","context","SequenceType","getErrorForTransaction","txid","a","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","forEach","log","m","regex","exec","index","lastIndex","length","push","sendTransactionsWithManualRetry","wallet","instructions","signers","stopPoint","tries","lastInstructionsLength","toRemoveSigners","filter","instr","i","filteredSigners","_","slice","sendTransactionWithRetry","sendTransactions","StopOnFailure","console","error","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","transaction","Transaction","instruction","add","recentBlockhash","blockhash","setSigners","s","partialSign","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","slot","catch","reason","Promise","all","sendTransaction","awaitConfirmation","includesFeePayer","signTransaction","rawTransaction","serialize","options","skipPreflight","sendRawTransaction","awaitTransactionSignatureConfirmation","DEFAULT_TIMEOUT","confirmation","Error","err","notify","message","description","type","beforeSend","getUnixTs","Date","getTime","timeout","startTime","done","sleep","simulateResult","simulateTransaction","logs","line","startsWith","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","result","envFor","_rpcEndpoint","cfg","explorerLinkFor","queryStatus","status","confirmations","subId","reject","setTimeout","onSignature","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","programIds","token","associatedToken","bpf_upgrade_loader","system","memo","AccountsContext","pendingCalls","genericCache","pendingMintCalls","mintCache","getMintInfo","pubKey","getAccountInfo","info","data","Buffer","from","deserializeMint","TokenAccountParser","buffer","deserializeAccount","pubkey","account","keyToAccountParser","cache","emitter","EventEmitter","query","parser","toBase58","get","obj","isActive","deserialize","registerParser","delete","Function","isNew","has","raiseCacheUpdated","key","raiseCacheDeleted","byParser","keys","queryMint","mint","getMint","addMint","UseNativeAccount","useWallet","nativeAccount","setNativeAccount","updateCache","useCallback","wrapped","owner","amount","u64","lamports","delegate","delegatedAmount","isInitialized","isFrozen","isNative","rentExemptReserve","closeAuthority","wrapNativeAccount","updateAccount","PRECACHED_OWNERS","Set","precacheUserTokenAccounts","getTokenAccountsByOwner","programId","AccountsProvider","tokenAccounts","setTokenAccounts","userAccounts","setUserAccounts","walletKey","selectUserAccounts","accounts","subs","onCache","tokenSubID","onProgramAccountChange","accountId","accountInfo","AccountLayout","span","removeProgramAccountChangeListener","decode","fromBuffer","delegateOption","state","isNativeOption","closeAuthorityOption","MintLayout","mintInfo","mintAuthorityOption","mintAuthority","supply","freezeAuthorityOption","freezeAuthority","placement","notification","style","color","opacity","backgroundColor","ExplorerLink","props","code","href","target","rel","title","Text","shortenAddress","CacheUpdateEvent","this","CacheDeleteEvent","MarketUpdateEvent","ids","Emitter","callback","on","removeListener","emit","Settings","additionalSettings","connected","disconnect","setVisible","useWalletModal","open","setModal","useModal","theme","useTheme","colorModeCtx","useColorMode","handleConnect","ModalEnum","WALLET","sx","display","minWidth","marginBottom","onChange","variant","onClick","marginLeft","navigator","clipboard","writeText","ml","toggleColorMode","palette","mode","MerkleTree","leafs","layers","hashes","nodeHash","acc","cur","idx","arr","nxt","internalHash","Array","proof","layer","sibling","Math","floor","getRoot","getProof","el","root","pair","equals","keccak_256","digest","first","second","sort","compare","fst","snd","leaf","randomBytes","buf","Uint8Array","window","crypto","getRandomValues","MERKLE_DISTRIBUTOR_ID","idl","require","coder","Coder","setupMailchimp","auth","source","mailchimp","Mailchimp","handle","mintUrl","from_email","subject","text","location","origin","to","email","messages","send","response","reject_reason","Create","localStorage","getItem","setMint","commMethod","setMethod","commAuth","setCommAuth","commSource","setCommSource","filename","setFilename","setText","submit","preventDefault","claimants","parse","totalClaim","c","pins","mintKey","mintAccount","findProgramAddress","toBuffer","creatorTokenKey","creatorTokenAccount","creatorTokenInfo","BN","toNumber","claimant","seeds","claimantPda","bump","pda","toArray","tree","base","distributor","dbump","distributorTokenKey","sender","verifyProof","params","b","bs58","join","createDistributorTokenAccount","TransactionInstruction","isSigner","isWritable","SystemProgram","SYSVAR_RENT_PUBKEY","initDistributor","sha256","transferToATA","Token","createTransferInstruction","createResult","handleFiles","files","file","reader","FileReader","onload","alert","readAsText","fileUpload","Fragment","handleDrop","direction","width","height","border","justifyContent","alignContent","component","padding","marginTop","hidden","disabled","createAirdrop","wrap","marginRight","spacing","label","setItem","fullWidth","labelId","textAlign","commAuthorization","Claim","editable","setEditable","queryString","search","setDistributor","setHandle","amountStr","setAmount","indexStr","setIndex","pin","pinStr","setPin","proofStr","setProof","Number","split","isNaN","distributorKey","distributorAccount","distributorInfo","ret","verifyClaim","claimStatus","cbump","walletTokenKey","setup","claimAirdrop","concat","claimResult","multiline","Home","getWindowDimensions","innerWidth","innerHeight","App","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","createTheme","className","flexGrow","pt","px","alignSelf","path","DragAndDrop","dropRef","useRef","dragCounter","setDragCounter","dragging","setDragging","handleDrag","stopPropagation","handleDragIn","dataTransfer","items","handleDragOut","remainingDrags","clearData","node","current","ref","ConnectButton","isConnected","onClickConnect","onClickChange","restProps","ButtonGroup","Header","handleChange","AppBar","Box","bgcolor","alignItems","DefaultModal","bodyStyle","closeIcon","rest","background","borderRadius","flexDirection","footer","WalletModalContext","WalletModal","wallets","selected","select","visible","setShowWallets","close","onCancel","verticalAlign","fontWeight","fontSize","lineHeight","size","icon","alt","src","float","WalletModalProvider","setConnected","base58","keyToDisplay","substring","WalletProvider","getPhantomWallet","getSolflareWallet","getTorusWallet","clientId","getLedgerWallet","getSolongWallet","getMathWallet","getSolletWallet","onError","autoConnect","ModalContext","removeModal","ColorModeContext","ColorModeContextProvider","setMode","prevMode","BinaryReader","prototype","readPubkey","array","readFixedArray","BinaryWriter","writePubkey","writeFixedArray","readPubkeyAsString","encode","writePubkeyAsString","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","TEN","pow","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","defaultState","storedState","setState","setLocalStorageState","newState","removeItem","chars","chunks","apply","ceil","currency","ms"],"mappings":"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","file":"static/js/main.5275efee.chunk.js","sourcesContent":["import { PublicKey, AccountInfo } from '@solana/web3.js';\n\nexport type StringPublicKey = string;\n\nexport class LazyAccountInfoProxy<T> {\n  executable: boolean = false;\n  owner: StringPublicKey = '';\n  lamports: number = 0;\n\n  get data() {\n    //\n    return undefined as unknown as T;\n  }\n}\n\nexport interface LazyAccountInfo {\n  executable: boolean;\n  owner: StringPublicKey;\n  lamports: number;\n  data: [string, string];\n}\n\nconst PubKeysInternedMap = new Map<string, PublicKey>();\n\nexport const toPublicKey = (key: string | PublicKey) => {\n  if (typeof key !== 'string') {\n    return key;\n  }\n\n  let result = PubKeysInternedMap.get(key);\n  if (!result) {\n    result = new PublicKey(key);\n    PubKeysInternedMap.set(key, result);\n  }\n\n  return result;\n};\n\nexport interface PublicKeyStringAndAccount<T> {\n  pubkey: string;\n  account: AccountInfo<T>;\n}\n\nexport const WRAPPED_SOL_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n\nexport const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const BPF_UPGRADE_LOADER_ID = new PublicKey('BPFLoaderUpgradeab1e11111111111111111111111');\n\nexport const MEMO_ID = new PublicKey('MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr');\n\nexport const SYSTEM = new PublicKey('11111111111111111111111111111111');\n","import { sleep, useLocalStorageState } from \"../utils/utils\";\nimport {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from \"@solana/web3.js\";\nimport React, { useContext, useEffect, useMemo, useState } from \"react\";\nimport { notify } from \"../utils/notifications\";\nimport { ExplorerLink } from \"../components/ExplorerLink\";\nimport {\n  TokenInfo,\n  TokenListProvider,\n  ENV as ChainId,\n} from \"@solana/spl-token-registry\";\nimport { WalletSigner } from \"./WalletContext/WalletContext\";\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport type ENV = \"mainnet-beta\" | \"testnet\" | \"devnet\" | \"localnet\";\n\nexport const ENDPOINTS = [\n  {\n    name: \"mainnet-beta\" as ENV,\n    endpoint: \"https://api.mainnet-beta.solana.com\",\n    ChainId: ChainId.MainnetBeta,\n  },\n  {\n    name: \"devnet\" as ENV,\n    endpoint: \"https://api.devnet.solana.com\",\n    ChainId: ChainId.Devnet,\n  },\n];\n\nconst DEFAULT = ENDPOINTS[0].endpoint;\n\ninterface ConnectionConfig {\n  connection: Connection;\n  endpoint: string;\n  env: ENV;\n  setEndpoint: (val: string) => void;\n  tokens: TokenInfo[];\n  tokenMap: Map<string, TokenInfo>;\n}\n\nconst ConnectionContext = React.createContext<ConnectionConfig>({\n  endpoint: DEFAULT,\n  setEndpoint: () => {},\n  connection: new Connection(DEFAULT, \"recent\"),\n  env: ENDPOINTS[0].name,\n  tokens: [],\n  tokenMap: new Map<string, TokenInfo>(),\n});\n\nexport function ConnectionProvider({ children = undefined as any }) {\n  const [endpoint, setEndpoint] = useLocalStorageState(\n    \"connectionEndpoint\",\n    ENDPOINTS[0].endpoint\n  );\n\n  const connection = useMemo(\n    () => new Connection(endpoint, \"recent\"),\n    [endpoint]\n  );\n\n  const env =\n    ENDPOINTS.find((end) => end.endpoint === endpoint)?.name ||\n    ENDPOINTS[0].name;\n\n  const [tokens, setTokens] = useState<TokenInfo[]>([]);\n  const [tokenMap, setTokenMap] = useState<Map<string, TokenInfo>>(new Map());\n  useEffect(() => {\n    // fetch token files\n    new TokenListProvider().resolve().then((container) => {\n      const list = container\n        .excludeByTag(\"nft\")\n        .filterByChainId(\n          ENDPOINTS.find((end) => end.endpoint === endpoint)?.ChainId ||\n            ChainId.MainnetBeta\n        )\n        .getList();\n\n      const knownMints = [...list].reduce((map, item) => {\n        map.set(item.address, item);\n        return map;\n      }, new Map<string, TokenInfo>());\n\n      setTokenMap(knownMints);\n      setTokens(list);\n    });\n  }, [env, endpoint]);\n\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n  // This is a hack to prevent the list from every getting empty\n  useEffect(() => {\n    const id = connection.onAccountChange(\n      Keypair.generate().publicKey,\n      () => {}\n    );\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = connection.onSlotChange(() => null);\n    return () => {\n      connection.removeSlotChangeListener(id);\n    };\n  }, [connection]);\n\n  return (\n    <ConnectionContext.Provider\n      value={{\n        endpoint,\n        setEndpoint,\n        connection,\n        tokens,\n        tokenMap,\n        env,\n      }}\n    >\n      {children}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport function useConnection() {\n  return useContext(ConnectionContext).connection as Connection;\n}\n\nexport function useConnectionConfig() {\n  const context = useContext(ConnectionContext);\n  return {\n    endpoint: context.endpoint,\n    setEndpoint: context.setEndpoint,\n    env: context.env,\n    tokens: context.tokens,\n    tokenMap: context.tokenMap,\n  };\n}\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: WalletSigner,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][]\n) {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength: any = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n\n \n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          \"single\"\n        );\n        stopPoint = 1;\n      } else {\n        stopPoint = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          \"single\"\n        );\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      \"Died on \",\n      stopPoint,\n      \"retrying from instruction\",\n      instructions[stopPoint],\n      \"instructions length is\",\n      instructions.length\n    );\n    lastInstructionsLength = instructions.length;\n  }\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: WalletSigner,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = \"singleGossip\",\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator\n): Promise<number> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = [];\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  let breakEarlyObject = { breakEarly: false, i: 0 };\n  console.log(\n    \"Signed txns length\",\n    signedTxns.length,\n    \"vs handed in length\",\n    instructionSet.length\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    signedTxnPromise\n      .then(({ txid, slot }) => {\n        successCallback(txid, i);\n      })\n      .catch((reason) => {\n        // @ts-ignore\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          breakEarlyObject.breakEarly = true;\n          breakEarlyObject.i = i;\n        }\n      });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise;\n      } catch (e) {\n        console.log(\"Caught failure\", e);\n        if (breakEarlyObject.breakEarly) {\n          console.log(\"Died on \", breakEarlyObject.i);\n          return breakEarlyObject.i; // Return the txn we failed on by index\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    await Promise.all(pendingTxns);\n  }\n\n  return signedTxns.length;\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: WalletSigner,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n      notify({\n        message: \"Transaction failed...\",\n        description: (\n          <>\n            {errors.map((err) => (\n              <div>{err}</div>\n            ))}\n            <ExplorerLink address={txid} type=\"transaction\" />\n          </>\n        ),\n        type: \"error\",\n      });\n\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: WalletSigner,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void\n) : Promise<string| { txid: string; slot: number }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    try {\n      transaction = await wallet.signTransaction(transaction);\n    } catch {\n      return \"Failed to sign transaction\";\n    }\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n  console.log(\"About to send\");\n  try {\n    const { txid, slot } = await sendSignedTransaction({\n      connection,\n      signedTransaction: transaction,\n    });\n\n    return { txid, slot };\n  } catch (error) {\n    console.error(error);\n    return \"See console logs\";\n  }\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    }\n  );\n\n  console.log(\"Started awaiting confirmation for\", txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      \"recent\",\n      true\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error(\"Transaction failed: Custom instruction error\");\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err) {\n    console.error(\"Timeout Error caught\", err);\n    if ((err as any).timeout) {\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, \"single\")\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith(\"Program log: \")) {\n            throw new Error(\n              \"Transaction failed: \" + line.slice(\"Program log: \".length)\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log(\"Latency\", txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config: any = { encoding: \"base64\", commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\n  if (res.error) {\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\n  }\n  return res.result;\n}\n\nexport const envFor = (\n  connection: Connection\n) : string => {\n  let endpoint = (connection as any)._rpcEndpoint;\n  let env = \"mainnet-beta\";\n  for (const cfg of ENDPOINTS) {\n    if (cfg.endpoint === endpoint) {\n      env = cfg.name;\n      break;\n    }\n  }\n  return env;\n}\n\nexport const explorerLinkFor = (\n  txid: TransactionSignature,\n  connection: Connection\n) : string => {\n  return `https://explorer.solana.com/tx/${txid}?cluster=${envFor(connection)}`;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = \"recent\",\n  queryStatus = false\n): Promise<SignatureStatus | null | void> {\n\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          console.log(explorerLinkFor(txid, connection));\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\n","import {\n  TOKEN_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  BPF_UPGRADE_LOADER_ID,\n  SYSTEM,\n  MEMO_ID,\n} from './ids';\n\nexport const setProgramIds = async () => {};\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n    associatedToken: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    bpf_upgrade_loader: BPF_UPGRADE_LOADER_ID,\n    system: SYSTEM,\n    memo: MEMO_ID,\n    // store: STORE,\n  };\n};\n","import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport { useConnection } from './ConnectionContext';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport { AccountLayout, MintInfo, MintLayout, u64 } from '@solana/spl-token';\nimport { TokenAccount } from '../models';\nimport { chunks } from '../utils/utils';\nimport { EventEmitter } from '../utils/eventEmitter';\nimport { StringPublicKey, WRAPPED_SOL_MINT } from '../utils/ids';\nimport { programIds } from '../utils/programIds';\n\nconst AccountsContext = React.createContext<any>(null);\n\nconst pendingCalls = new Map<string, Promise<ParsedAccountBase>>();\nconst genericCache = new Map<string, ParsedAccountBase>();\nconst pendingMintCalls = new Map<string, Promise<MintInfo>>();\nconst mintCache = new Map<string, MintInfo>();\n\nexport interface ParsedAccountBase {\n  pubkey: StringPublicKey;\n  account: AccountInfo<Buffer>;\n  info: any; // TODO: change to unknown\n}\n\nexport type AccountParser = (\n  pubkey: StringPublicKey,\n  data: AccountInfo<Buffer>,\n) => ParsedAccountBase | undefined;\n\nexport interface ParsedAccount<T> extends ParsedAccountBase {\n  info: T;\n}\n\nconst getMintInfo = async (connection: Connection, pubKey: PublicKey) => {\n  const info = await connection.getAccountInfo(pubKey);\n  if (info === null) {\n    throw new Error('Failed to find mint account');\n  }\n\n  const data = Buffer.from(info.data);\n\n  return deserializeMint(data);\n};\n\nexport const MintParser = (pubKey: string, info: AccountInfo<Buffer>) => {\n  const buffer = Buffer.from(info.data);\n\n  const data = deserializeMint(buffer);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: data,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const TokenAccountParser = (\n  pubKey: string,\n  info: AccountInfo<Buffer>,\n) => {\n  // Sometimes a wrapped sol account gets closed, goes to 0 length,\n  // triggers an update over wss which triggers this guy to get called\n  // since your UI already logged that pubkey as a token account. Check for length.\n  if (info.data.length > 0) {\n    const buffer = Buffer.from(info.data);\n    const data = deserializeAccount(buffer);\n\n    const details = {\n      pubkey: pubKey,\n      account: {\n        ...info,\n      },\n      info: data,\n    } as TokenAccount;\n\n    return details;\n  }\n};\n\nexport const GenericAccountParser = (\n  pubKey: string,\n  info: AccountInfo<Buffer>,\n) => {\n  const buffer = Buffer.from(info.data);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: buffer,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const keyToAccountParser = new Map<string, AccountParser>();\n\nexport const cache = {\n  emitter: new EventEmitter(),\n  query: async (\n    connection: Connection,\n    pubKey: string | PublicKey,\n    parser?: AccountParser,\n  ) => {\n    let id: PublicKey;\n    if (typeof pubKey === 'string') {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n\n    let account = genericCache.get(address);\n    if (account) {\n      return account;\n    }\n\n    let query = pendingCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    // TODO: refactor to use multiple accounts query with flush like behavior\n    query = connection.getAccountInfo(id).then(data => {\n      if (!data) {\n        throw new Error('Account not found');\n      }\n\n      return cache.add(id, data, parser);\n    }) as Promise<TokenAccount>;\n    pendingCalls.set(address, query as any);\n\n    return query;\n  },\n  add: (\n    id: PublicKey | string,\n    obj: AccountInfo<Buffer>,\n    parser?: AccountParser,\n    isActive?: boolean | undefined | ((parsed: any) => boolean),\n  ) => {\n    const address = typeof id === 'string' ? id : id?.toBase58();\n    const deserialize = parser ? parser : keyToAccountParser.get(address);\n    if (!deserialize) {\n      throw new Error(\n        'Deserializer needs to be registered or passed as a parameter',\n      );\n    }\n\n    cache.registerParser(id, deserialize);\n    pendingCalls.delete(address);\n    const account = deserialize(address, obj);\n    if (!account) {\n      return;\n    }\n\n    if (isActive === undefined) isActive = true;\n    else if (isActive instanceof Function) isActive = isActive(account);\n\n    const isNew = !genericCache.has(address);\n\n    genericCache.set(address, account);\n    cache.emitter.raiseCacheUpdated(address, isNew, deserialize, isActive);\n    return account;\n  },\n  get: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== 'string') {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return genericCache.get(key);\n  },\n  delete: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== 'string') {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    if (genericCache.get(key)) {\n      genericCache.delete(key);\n      cache.emitter.raiseCacheDeleted(key);\n      return true;\n    }\n    return false;\n  },\n\n  byParser: (parser: AccountParser) => {\n    const result: string[] = [];\n    for (const id of keyToAccountParser.keys()) {\n      if (keyToAccountParser.get(id) === parser) {\n        result.push(id);\n      }\n    }\n\n    return result;\n  },\n  registerParser: (pubkey: PublicKey | string, parser: AccountParser) => {\n    if (pubkey) {\n      const address = typeof pubkey === 'string' ? pubkey : pubkey?.toBase58();\n      keyToAccountParser.set(address, parser);\n    }\n\n    return pubkey;\n  },\n  queryMint: async (connection: Connection, pubKey: string | PublicKey) => {\n    let id: PublicKey;\n    if (typeof pubKey === 'string') {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n    let mint = mintCache.get(address);\n    if (mint) {\n      return mint;\n    }\n\n    let query = pendingMintCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    query = getMintInfo(connection, id).then(data => {\n      pendingMintCalls.delete(address);\n\n      mintCache.set(address, data);\n      return data;\n    }) as Promise<MintInfo>;\n    pendingMintCalls.set(address, query as any);\n\n    return query;\n  },\n  getMint: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== 'string') {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return mintCache.get(key);\n  },\n  addMint: (pubKey: PublicKey, obj: AccountInfo<Buffer>) => {\n    const mint = deserializeMint(obj.data);\n    const id = pubKey.toBase58();\n    mintCache.set(id, mint);\n    return mint;\n  },\n};\n\nexport const useAccountsContext = () => {\n  const context = useContext(AccountsContext);\n\n  return context;\n};\n\nfunction wrapNativeAccount(\n  pubkey: string,\n  account?: AccountInfo<Buffer>,\n): TokenAccount | undefined {\n  if (!account) {\n    return undefined;\n  }\n\n  const key = new PublicKey(pubkey);\n\n  return {\n    pubkey: pubkey,\n    account,\n    info: {\n      address: key,\n      mint: WRAPPED_SOL_MINT,\n      owner: key,\n      amount: new u64(account.lamports),\n      delegate: null,\n      delegatedAmount: new u64(0),\n      isInitialized: true,\n      isFrozen: false,\n      isNative: true,\n      rentExemptReserve: null,\n      closeAuthority: null,\n    },\n  };\n}\n\nexport const getCachedAccount = (\n  predicate: (account: TokenAccount) => boolean,\n) => {\n  for (const account of genericCache.values()) {\n    if (predicate(account)) {\n      return account as TokenAccount;\n    }\n  }\n};\n\nconst UseNativeAccount = () => {\n  const connection = useConnection();\n  const { publicKey } = useWallet();\n\n  const [nativeAccount, setNativeAccount] = useState<AccountInfo<Buffer>>();\n\n  const updateCache = useCallback(\n    account => {\n      if (publicKey) {\n        const wrapped = wrapNativeAccount(publicKey.toBase58(), account);\n        if (wrapped !== undefined) {\n          const id = publicKey.toBase58();\n          cache.registerParser(id, TokenAccountParser);\n          genericCache.set(id, wrapped as TokenAccount);\n          cache.emitter.raiseCacheUpdated(id, false, TokenAccountParser, true);\n        }\n      }\n    },\n    [publicKey],\n  );\n\n  useEffect(() => {\n    let subId = 0;\n    const updateAccount = (account: AccountInfo<Buffer> | null) => {\n      if (account) {\n        updateCache(account);\n        setNativeAccount(account);\n      }\n    };\n\n    (async () => {\n      if (!connection || !publicKey) {\n        return;\n      }\n\n      try {\n        const account = await connection.getAccountInfo(publicKey);\n        updateAccount(account);\n      } catch {\n        return;\n      }\n\n      subId = connection.onAccountChange(publicKey, updateAccount);\n    })();\n\n    return () => {\n      if (subId) {\n        connection.removeAccountChangeListener(subId);\n      }\n    };\n  }, [setNativeAccount, publicKey, connection, updateCache]);\n\n  return { nativeAccount };\n};\n\nconst PRECACHED_OWNERS = new Set<string>();\nconst precacheUserTokenAccounts = async (\n  connection: Connection,\n  owner?: PublicKey,\n) => {\n  if (!owner) {\n    return;\n  }\n\n  // used for filtering account updates over websocket\n  PRECACHED_OWNERS.add(owner.toBase58());\n\n  // user accounts are updated via ws subscription\n  const accounts = await connection.getTokenAccountsByOwner(owner, {\n    programId: programIds().token,\n  });\n\n  accounts.value.forEach(info => {\n    cache.add(info.pubkey.toBase58(), info.account, TokenAccountParser);\n  });\n};\n\nexport function AccountsProvider({ children = null as any }) {\n  const connection = useConnection();\n  const { publicKey } = useWallet();\n  const [tokenAccounts, setTokenAccounts] = useState<TokenAccount[]>([]);\n  const [userAccounts, setUserAccounts] = useState<TokenAccount[]>([]);\n  const { nativeAccount } = UseNativeAccount();\n  const walletKey = publicKey?.toBase58();\n\n  const selectUserAccounts = useCallback(() => {\n    return cache\n      .byParser(TokenAccountParser)\n      .map(id => cache.get(id))\n      .filter(a => a && a.info.owner.toBase58() === walletKey)\n      .map(a => a as TokenAccount);\n  }, [walletKey]);\n\n  useEffect(() => {\n    const accounts = selectUserAccounts().filter(\n      a => a !== undefined,\n    ) as TokenAccount[];\n    setUserAccounts(accounts);\n  }, [nativeAccount, tokenAccounts, selectUserAccounts]);\n\n  useEffect(() => {\n    const subs: number[] = [];\n    cache.emitter.onCache(args => {\n      if (args.isNew && args.isActive) {\n        let id = args.id;\n        let deserialize = args.parser;\n        connection.onAccountChange(new PublicKey(id), info => {\n          cache.add(id, info, deserialize);\n        });\n      }\n    });\n\n    return () => {\n      subs.forEach(id => connection.removeAccountChangeListener(id));\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    if (!connection || !publicKey) {\n      setTokenAccounts([]);\n    } else {\n      precacheUserTokenAccounts(connection, publicKey).then(() => {\n        setTokenAccounts(selectUserAccounts());\n      });\n\n      // This can return different types of accounts: token-account, mint, multisig\n      // TODO: web3.js expose ability to filter.\n      // this should use only filter syntax to only get accounts that are owned by user\n      const tokenSubID = connection.onProgramAccountChange(\n        programIds().token,\n        info => {\n          // TODO: fix type in web3.js\n          const id = info.accountId as unknown as string;\n          // TODO: do we need a better way to identify layout (maybe a enum identifing type?)\n          if (info.accountInfo.data.length === AccountLayout.span) {\n            const data = deserializeAccount(info.accountInfo.data);\n\n            if (PRECACHED_OWNERS.has(data.owner.toBase58())) {\n              cache.add(id, info.accountInfo, TokenAccountParser);\n              setTokenAccounts(selectUserAccounts());\n            }\n          }\n        },\n        'singleGossip',\n      );\n\n      return () => {\n        connection.removeProgramAccountChangeListener(tokenSubID);\n      };\n    }\n  }, [connection, publicKey, selectUserAccounts]);\n\n  return (\n    <AccountsContext.Provider\n      value={{\n        userAccounts,\n        nativeAccount,\n      }}\n    >\n      {children}\n    </AccountsContext.Provider>\n  );\n}\n\nexport function useNativeAccount() {\n  const context = useContext(AccountsContext);\n  return {\n    account: context.nativeAccount as AccountInfo<Buffer>,\n  };\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const result = await Promise.all(\n    chunks(keys, 99).map(chunk =>\n      getMultipleAccountsCore(connection, chunk, commitment),\n    ),\n  );\n\n  const array = result\n    .map(\n      a =>\n        a.array.map(acc => {\n          if (!acc) {\n            return undefined;\n          }\n\n          const { data, ...rest } = acc;\n          const obj = {\n            ...rest,\n            data: Buffer.from(data[0], 'base64'),\n          } as AccountInfo<Buffer>;\n          return obj;\n        }) as AccountInfo<Buffer>[],\n    )\n    .flat();\n  return { keys, array };\n};\n\nconst getMultipleAccountsCore = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const args = connection._buildArgs([keys], commitment, 'base64');\n\n  const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\n  if (unsafeRes.error) {\n    throw new Error(\n      'failed to get info about account ' + unsafeRes.error.message,\n    );\n  }\n\n  if (unsafeRes.result.value) {\n    const array = unsafeRes.result.value as AccountInfo<string[]>[];\n    return { keys, array };\n  }\n\n  // TODO: fix\n  throw new Error();\n};\n\nexport function useMint(key?: string | PublicKey) {\n  const connection = useConnection();\n  const [mint, setMint] = useState<MintInfo>();\n\n  const id = typeof key === 'string' ? key : key?.toBase58();\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n\n    cache\n      .query(connection, id, MintParser)\n      .then(acc => setMint(acc.info as any))\n      .catch(err => console.log(err));\n\n    const dispose = cache.emitter.onCache(e => {\n      const event = e;\n      if (event.id === id) {\n        cache\n          .query(connection, id, MintParser)\n          .then(mint => setMint(mint.info as any));\n      }\n    });\n    return () => {\n      dispose();\n    };\n  }, [connection, id]);\n\n  return mint;\n}\n\nexport function useAccount(pubKey?: PublicKey) {\n  const connection = useConnection();\n  const [account, setAccount] = useState<TokenAccount>();\n\n  const key = pubKey?.toBase58();\n  useEffect(() => {\n    const query = async () => {\n      try {\n        if (!key) {\n          return;\n        }\n\n        const acc = await cache\n          .query(connection, key, TokenAccountParser)\n          .catch(err => console.log(err));\n        if (acc) {\n          setAccount(acc);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    query();\n\n    const dispose = cache.emitter.onCache(e => {\n      const event = e;\n      if (event.id === key) {\n        query();\n      }\n    });\n    return () => {\n      dispose();\n    };\n  }, [connection, key]);\n\n  return account;\n}\n\n// TODO: expose in spl package\nexport const deserializeAccount = (data: Buffer) => {\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n\n// TODO: expose in spl package\nexport const deserializeMint = (data: Buffer) => {\n  if (data.length !== MintLayout.span) {\n    throw new Error('Not a valid Mint');\n  }\n\n  const mintInfo = MintLayout.decode(data);\n\n  if (mintInfo.mintAuthorityOption === 0) {\n    mintInfo.mintAuthority = null;\n  } else {\n    mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\n  }\n\n  mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n  mintInfo.isInitialized = mintInfo.isInitialized !== 0;\n\n  if (mintInfo.freezeAuthorityOption === 0) {\n    mintInfo.freezeAuthority = null;\n  } else {\n    mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n  }\n\n  return mintInfo as MintInfo;\n};\n","import React from 'react';\nimport { notification } from 'antd';\n// import Link from '../components/Link';\n\nexport function notify({\n  message = '',\n  description = undefined as any,\n  txid = '',\n  type = 'info',\n  placement = 'bottomLeft',\n}) {\n  if (txid) {\n    //   <Link\n    //     external\n    //     to={'https://explorer.solana.com/tx/' + txid}\n    //     style={{ color: '#0000ff' }}\n    //   >\n    //     View transaction {txid.slice(0, 8)}...{txid.slice(txid.length - 8)}\n    //   </Link>\n\n    description = <></>;\n  }\n  (notification as any)[type]({\n    message: <span style={{ color: 'black' }}>{message}</span>,\n    description: (\n      <span style={{ color: 'black', opacity: 0.5 }}>{description}</span>\n    ),\n    placement,\n    style: {\n      backgroundColor: 'white',\n    },\n  });\n}\n","import React from 'react';\nimport { Typography } from 'antd';\nimport { shortenAddress } from '../../utils/utils';\nimport { PublicKey } from '@solana/web3.js';\n\nexport const ExplorerLink = (props: {\n  address: string | PublicKey;\n  type: string;\n  code?: boolean;\n  style?: React.CSSProperties;\n  length?: number;\n}) => {\n  const { type, code } = props;\n\n  const address =\n    typeof props.address === 'string'\n      ? props.address\n      : props.address?.toBase58();\n\n  if (!address) {\n    return null;\n  }\n\n  const length = props.length ?? 9;\n\n  return (\n    <a\n      href={`https://explorer.solana.com/${type}/${address}`}\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      title={address}\n      style={props.style}\n    >\n      {code ? (\n        <Typography.Text style={props.style} code>\n          {shortenAddress(address, length)}\n        </Typography.Text>\n      ) : (\n        shortenAddress(address, length)\n      )}\n    </a>\n  );\n};\n","import { EventEmitter as Emitter } from 'eventemitter3';\n\nexport class CacheUpdateEvent {\n  static type = 'CacheUpdate';\n  id: string;\n  parser: any;\n  isNew: boolean;\n  isActive: boolean;\n  constructor(id: string, isNew: boolean, parser: any, isActive: boolean) {\n    this.id = id;\n    this.parser = parser;\n    this.isNew = isNew;\n    this.isActive = isActive;\n  }\n}\n\nexport class CacheDeleteEvent {\n  static type = 'CacheUpdate';\n  id: string;\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport class MarketUpdateEvent {\n  static type = 'MarketUpdate';\n  ids: Set<string>;\n  constructor(ids: Set<string>) {\n    this.ids = ids;\n  }\n}\n\nexport class EventEmitter {\n  private emitter = new Emitter();\n\n  onMarket(callback: (args: MarketUpdateEvent) => void) {\n    this.emitter.on(MarketUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(MarketUpdateEvent.type, callback);\n  }\n\n  onCache(callback: (args: CacheUpdateEvent) => void) {\n    this.emitter.on(CacheUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(CacheUpdateEvent.type, callback);\n  }\n\n  raiseMarketUpdated(ids: Set<string>) {\n    this.emitter.emit(MarketUpdateEvent.type, new MarketUpdateEvent(ids));\n  }\n\n  raiseCacheUpdated(\n    id: string,\n    isNew: boolean,\n    parser: any,\n    isActive: boolean,\n  ) {\n    this.emitter.emit(\n      CacheUpdateEvent.type,\n      new CacheUpdateEvent(id, isNew, parser, isActive),\n    );\n  }\n\n  raiseCacheDeleted(id: string) {\n    this.emitter.emit(CacheDeleteEvent.type, new CacheDeleteEvent(id));\n  }\n}\n","import { useCallback } from \"react\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { ENDPOINTS, useColorMode, useConnectionConfig } from \"../../contexts\";\nimport { notify, shortenAddress } from \"../../utils\";\nimport { CopyOutlined } from \"@ant-design/icons\";\nimport { ModalEnum, useModal, useWalletModal } from \"../../contexts\";\nimport { Box } from \"@mui/system\";\nimport { Button, FormControl, NativeSelect } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Brightness4Icon from \"@mui/icons-material/Brightness4\";\nimport Brightness7Icon from \"@mui/icons-material/Brightness7\";\n\nexport const Settings = ({\n  additionalSettings,\n}: {\n  additionalSettings?: JSX.Element;\n}) => {\n  const { connected, disconnect, publicKey } = useWallet();\n  const { setEndpoint, env, endpoint } = useConnectionConfig();\n  const { setVisible } = useWalletModal();\n  const open = useCallback(() => setVisible(true), [setVisible]);\n  const { setModal } = useModal();\n  const theme = useTheme();\n  const colorModeCtx = useColorMode();\n\n  const handleConnect = useCallback(() => {\n    setModal(ModalEnum.WALLET);\n    setVisible(true);\n  }, [setModal, setVisible]);\n\n  return (\n    <>\n      <Box sx={{ display: \"flex\", minWidth: \"100%\" }}>\n        {!connected && (\n          <>\n            <FormControl>\n              <NativeSelect\n                style={{ marginBottom: 5 }}\n                onChange={(e) => {\n                  setEndpoint(e.target.value);\n                }}\n                value={endpoint}\n              >\n                {ENDPOINTS.map(({ name, endpoint }) => (\n                  <option key={name} value={endpoint}>{name}</option>\n                ))}\n              </NativeSelect>\n            </FormControl>\n            <Button\n              variant=\"contained\"\n              onClick={handleConnect}\n              sx={{ marginLeft: \"10px\" }}\n            >\n              Connect\n            </Button>\n          </>\n        )}\n        {connected && (\n          <>\n            {publicKey && (\n              <Button\n                variant=\"outlined\"\n                onClick={async () => {\n                  if (publicKey) {\n                    await navigator.clipboard.writeText(publicKey.toBase58());\n                    notify({\n                      message: \"Wallet update\",\n                      description: \"Address copied to clipboard\",\n                    });\n                  }\n                }}\n              >\n                <CopyOutlined />\n                {shortenAddress(publicKey.toBase58())}\n              </Button>\n            )}\n            <Button\n              variant=\"outlined\"\n              onClick={open}\n              sx={{ marginLeft: \"10px\" }}\n            >\n              Change Wallet\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"error\"\n              onClick={() => disconnect().catch()}\n              sx={{ marginLeft: \"10px\" }}\n            >\n              Disconnect ({env})\n            </Button>\n          </>\n        )}\n        <IconButton\n          sx={{ ml: 1 }}\n          onClick={colorModeCtx.toggleColorMode}\n          color=\"inherit\"\n        >\n          {theme.palette.mode === \"dark\" ? (\n            <Brightness7Icon />\n          ) : (\n            <Brightness4Icon />\n          )}\n        </IconButton>\n        {additionalSettings}\n      </Box>\n    </>\n  );\n};\n","import { keccak_256 } from \"js-sha3\";\n\nexport class MerkleTree {\n  leafs: Array<Buffer>;\n  layers: Array<Array<Buffer>>;\n\n  constructor(leafs : Array<Buffer>) {\n    this.leafs = leafs.slice();\n    this.layers = [];\n\n    let hashes = this.leafs.map(MerkleTree.nodeHash);\n    while (hashes.length > 0) {\n      console.log(\"Hashes\", this.layers.length, hashes);\n      this.layers.push(hashes.slice());\n      if (hashes.length === 1) break;\n      hashes = hashes.reduce((acc, cur, idx, arr) => {\n        if (idx % 2 === 0) {\n          const nxt = arr[idx + 1];\n          acc.push(MerkleTree.internalHash(cur, nxt));\n        }\n        return acc;\n      }, Array<Buffer>());\n    }\n  }\n\n  static nodeHash(\n    data : Buffer,\n  ) : Buffer {\n    return Buffer.from(keccak_256.digest([0x00, ...data]));\n  }\n\n\n  static internalHash(\n    first : Buffer,\n    second : Buffer | undefined,\n  ) : Buffer {\n    if (!second) return first;\n    const [fst, snd] = [first, second].sort(Buffer.compare)\n    return Buffer.from(\n      keccak_256.digest([0x01, ...fst, ...snd])\n    );\n  }\n\n  getRoot() : Buffer {\n    return this.layers[this.layers.length - 1][0];\n  }\n\n  getProof(idx : number) : Buffer[] {\n    return this.layers.reduce((proof, layer) => {\n      const sibling = idx ^ 1;\n      if (sibling < layer.length) {\n        proof.push(layer[sibling]);\n      }\n\n      idx = Math.floor(idx / 2);\n\n      return proof;\n    }, []);\n  }\n\n  getHexRoot(): string {\n    return this.getRoot().toString(\"hex\");\n  }\n\n  getHexProof(idx : number) : string[] {\n    return this.getProof(idx).map((el) => el.toString(\"hex\"));\n  }\n\n  verifyProof(\n    idx : number,\n    proof : Buffer[],\n    root : Buffer\n  ): boolean {\n    let pair = MerkleTree.nodeHash(this.leafs[idx]);\n    for (const item of proof) {\n      pair = MerkleTree.internalHash(pair, item);\n    }\n\n    return pair.equals(root);\n  }\n\n  static verifyClaim(\n    leaf : Buffer,\n    proof : Buffer[],\n    root : Buffer\n  ): boolean {\n    let pair = MerkleTree.nodeHash(leaf);\n    for (const item of proof) {\n      pair = MerkleTree.internalHash(pair, item);\n    }\n\n    return pair.equals(root);\n  }\n\n}\n","import React, { useEffect, useState } from \"react\";\nimport {\n  BrowserRouter,\n  Link,\n  Route,\n  RouteComponentProps,\n  Switch,\n} from \"react-router-dom\";\nimport queryString from 'query-string';\n\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport {\n  Box,\n  Button,\n  FormControl,\n  Link as HyperLink,\n  InputLabel,\n  MenuItem,\n  Stack,\n  Select,\n  TextField,\n} from \"@mui/material\";\nimport FilePresentIcon from '@mui/icons-material/FilePresent';\n\nimport {\n  useWallet,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n  SYSVAR_RENT_PUBKEY,\n} from \"@solana/web3.js\";\nimport {\n  AccountLayout,\n  MintLayout,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport {\n  Coder,\n} from \"@project-serum/anchor\"\nimport { keccak_256 } from \"js-sha3\";\nimport { sha256 } from \"js-sha256\";\nimport BN from 'bn.js';\nimport * as bs58 from \"bs58\";\n\n// claim distribution\nimport Mailchimp from \"@mailchimp/mailchimp_transactional\"\n\nimport \"./App.css\";\nimport {\n  useConnection,\n  useColorMode,\n  Connection,\n} from \"./contexts\";\nimport { SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID, notify } from \"./utils\";\nimport Header from \"./components/Header/Header\";\nimport { DragAndDrop } from \"./components/DragAndDrop\";\nimport { MerkleTree } from \"./utils/merkle-tree\";\n\ntype CreateProps = {};\ntype ClaimProps = {};\ntype HomeProps = {};\n\n// type PhoneNumber = string;\n// type TwitterHandle = string;\n// type DiscordId = string;\n// type Handle = PhoneNumber | TwitterHandle | DiscordId;\n\n// NB: assumes no overflow\nconst randomBytes = () : Uint8Array => {\n  // TODO: some predictable seed? sha256?\n  const buf = new Uint8Array(4);\n  window.crypto.getRandomValues(buf);\n  return buf;\n}\n\nconst MERKLE_DISTRIBUTOR_ID = new PublicKey(\"2BXKBuQPRVjV9e9qC2wAVJgFLWDH8MULRQ5W5ABmJj45\");\nconst WHITESPACE = \"\\u00A0\";\n\nconst idl = require(\"./utils/merkle_distributor.json\");\nconst coder = new Coder(idl);\n\nconst setupMailchimp = (auth : string, source : string) => {\n  const mailchimp = Mailchimp(auth);\n\n  return async (\n    amount: number,\n    handle: string,\n    mintUrl: string,\n    query: string\n  ) => {\n    console.log(`Link: claim?${query}`);\n\n    const message = {\n      from_email: source,\n      subject: \"Merkle Airdrop\",\n      text: `You received ${amount} airdropped token(s) (${mintUrl}). `\n          + `Claim them at ${window.location.origin}/claim?${query}`,\n      to: [\n        {\n          email: handle,\n          type: \"to\"\n        }\n      ]\n    };\n\n    const response = await mailchimp.messages.send({ message });\n\n    console.log(response);\n    if (!response[0] || response[0].status !== \"sent\") {\n      throw new Error(`Mailchimp failed to send email: ${response[0].reject_reason}`);\n    }\n  };\n}\n\nconst Create = (\n  props : CreateProps,\n) => {\n  const connection = useConnection();\n  const wallet = useWallet();\n  const [mint, setMint] = React.useState(localStorage.getItem(\"mint\") || \"\");\n  const [commMethod, setMethod] = React.useState(localStorage.getItem(\"commMethod\") || \"\");\n  const [commAuth, setCommAuth] = React.useState(\"\");\n  const [commSource, setCommSource] = React.useState(\"\");\n  const [filename, setFilename] = React.useState(\"\");\n  const [text, setText] = React.useState(\"\");\n\n  const submit = async (e : React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (!wallet.connected || wallet.publicKey === null) {\n      throw new Error(`Wallet not connected`);\n    }\n\n    const claimants = JSON.parse(text);\n    const totalClaim = claimants.reduce((acc, c) => acc + c.amount, 0);\n    const pins = claimants.map(() => randomBytes());\n    console.log(claimants, pins);\n\n    if (claimants.length === 0) {\n      throw new Error(`No claimants provided`);\n    }\n\n    let mintKey : PublicKey;\n    try {\n      mintKey = new PublicKey(mint);\n    } catch (err) {\n      throw new Error(`Invalid mint key ${err}`);\n    }\n    const mintAccount = await connection.getAccountInfo(mintKey);\n    if (mintAccount === null) {\n      throw new Error(`Could not fetch mint`);\n    }\n    if (!mintAccount.owner.equals(TOKEN_PROGRAM_ID)) {\n      throw new Error(`Invalid mint owner ${mintAccount.owner.toBase58()}`);\n    }\n    if (mintAccount.data.length !== MintLayout.span) {\n      throw new Error(`Invalid mint size ${mintAccount.data.length}`);\n    }\n    const mintInfo = MintLayout.decode(Buffer.from(mintAccount.data));\n\n\n    const [creatorTokenKey, ] = await PublicKey.findProgramAddress(\n      [\n        wallet.publicKey.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        mintKey.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    );\n    const creatorTokenAccount = await connection.getAccountInfo(creatorTokenKey);\n    if (creatorTokenAccount === null) {\n      throw new Error(`Could not fetch creator token account`);\n    }\n    if (creatorTokenAccount.data.length !== AccountLayout.span) {\n      throw new Error(`Invalid token account size ${creatorTokenAccount.data.length}`);\n    }\n    const creatorTokenInfo = AccountLayout.decode(Buffer.from(creatorTokenAccount.data));\n    if (new BN(creatorTokenInfo.amount, 8, \"le\").toNumber() < totalClaim) {\n      throw new Error(`Creator token account does not have enough tokens`);\n    }\n\n\n    const leafs : Array<Buffer> = [];\n    for (let idx = 0; idx < claimants.length; ++idx ) {\n      const claimant = claimants[idx];\n      const seeds = [\n        mintKey.toBuffer(),\n        Buffer.from(claimant.handle),\n        Buffer.from(pins[idx]),\n      ];\n      const [claimantPda, bump] = await PublicKey.findProgramAddress(seeds, MERKLE_DISTRIBUTOR_ID);\n      claimant.bump = bump;\n      claimant.pda = claimantPda;\n      leafs.push(Buffer.from(\n        keccak_256.digest(\n          [...new BN(idx).toArray(\"le\", 8),\n           ...claimantPda.toBuffer(),\n           ...new BN(claimant.amount).toArray(\"le\", 8),\n          ]\n        )\n      ));\n    }\n\n    const tree = new MerkleTree(leafs);\n    const root = tree.getRoot();\n\n\n    const base = new Keypair();\n    const [distributor, dbump] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"MerkleDistributor\"),\n        base.publicKey.toBuffer(),\n      ],\n      MERKLE_DISTRIBUTOR_ID);\n\n    const [distributorTokenKey, ] = await PublicKey.findProgramAddress(\n      [\n        distributor.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        mintKey.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    );\n\n    const mintUrl = `https://explorer.solana.com/address/${mintKey.toBase58()}?cluster=${Connection.envFor(connection)}`;\n\n    let sender;\n    if (commMethod === \"Mailchimp\") {\n      sender = setupMailchimp(commAuth, commSource);\n    } else if (commMethod === \"Manual\") {\n      console.log(mintUrl);\n      sender = async (\n          amount: number,\n          handle: string,\n          mint: PublicKey,\n          query: string\n        ) => {\n          console.log({\n            \"handle\": handle,\n            \"claim\": `${window.location.origin}/claim?${query}`\n          });\n        };\n    } else {\n      throw new Error(`Unrecognized claim distribution method ${commMethod}`);\n    }\n\n    for (let idx = 0; idx < claimants.length; ++idx) {\n      const proof = tree.getProof(idx);\n      const verified = tree.verifyProof(idx, proof, root);\n\n      if (!verified) {\n        throw new Error(\"Merkle tree verification failed\");\n      }\n\n      const claimant = claimants[idx];\n      const params = [\n        `distributor=${distributor}`,\n        `handle=${claimant.handle}`,\n        `amount=${claimant.amount}`,\n        `index=${idx}`,\n        `pin=${pins[idx]}`,\n        `proof=${proof.map(b => bs58.encode(b))}`,\n      ];\n      const query = params.join(\"&\");\n\n      await sender(claimant.amount, claimant.handle, mintUrl, query);\n    }\n\n    const createDistributorTokenAccount = new TransactionInstruction({\n        programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        keys: [\n            { pubkey: wallet.publicKey        , isSigner: true  , isWritable: true  } ,\n            { pubkey: distributorTokenKey     , isSigner: false , isWritable: true  } ,\n            { pubkey: distributor             , isSigner: false , isWritable: false } ,\n            { pubkey: mintKey                 , isSigner: false , isWritable: false } ,\n            { pubkey: SystemProgram.programId , isSigner: false , isWritable: false } ,\n            { pubkey: TOKEN_PROGRAM_ID        , isSigner: false , isWritable: false } ,\n            { pubkey: SYSVAR_RENT_PUBKEY      , isSigner: false , isWritable: false } ,\n        ],\n        data: Buffer.from([])\n    });\n\n    // initial merkle-distributor state\n    const initDistributor = new TransactionInstruction({\n        programId: MERKLE_DISTRIBUTOR_ID,\n        keys: [\n            { pubkey: base.publicKey          , isSigner: true  , isWritable: false } ,\n            { pubkey: distributor             , isSigner: false , isWritable: true  } ,\n            { pubkey: mintKey                 , isSigner: false , isWritable: false } ,\n            { pubkey: wallet.publicKey        , isSigner: true  , isWritable: false } ,\n            { pubkey: SystemProgram.programId , isSigner: false , isWritable: false } ,\n        ],\n        data: Buffer.from([\n          ...Buffer.from(sha256.digest(\"global:new_distributor\")).slice(0, 8),\n          ...new BN(dbump).toArray(\"le\", 1),\n          ...root,\n          ...new BN(totalClaim).toArray(\"le\", 8),\n          ...new BN(claimants.length).toArray(\"le\", 8),\n        ])\n    })\n\n    const transferToATA = Token.createTransferInstruction(\n        TOKEN_PROGRAM_ID,\n        creatorTokenKey,\n        distributorTokenKey,\n        wallet.publicKey,\n        [],\n        totalClaim\n      );\n\n\n    const createResult = await Connection.sendTransactionWithRetry(\n      connection,\n      wallet,\n      [\n        createDistributorTokenAccount,\n        initDistributor,\n        transferToATA,\n      ],\n      [base]\n    );\n\n    console.log(createResult);\n    if (typeof createResult === \"string\") {\n      notify({\n        message: \"Create failed\",\n        description: createResult,\n      });\n    } else {\n      notify({\n        message: \"Create succeeded\",\n        description: (\n          <HyperLink href={Connection.explorerLinkFor(createResult.txid, connection)}>\n            View transaction on explorer\n          </HyperLink>\n        ),\n      });\n    }\n  };\n\n  const handleFiles = (files) => {\n    if (files.length !== 1) {\n      alert(\"Expecting exactly one handle-file upload\");\n      return;\n    }\n\n    const file = files[0];\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      if (e !== null && e.target !== null) {\n        if (typeof e.target.result === \"string\") {\n          setFilename(file.name);\n          setText(e.target.result);\n        } else {\n          alert(`Could not read uploaded file ${file}`);\n        }\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  const commAuthorization = (commMethod) => {\n    if (commMethod === \"Manual\") {\n      return null;\n    }\n    return (\n      <React.Fragment>\n        <TextField\n          style={{width: \"60ch\"}}\n          id=\"comm-auth-field\"\n          label={`${commMethod} API key`}\n          value={commAuth}\n          onChange={(e) => setCommAuth(e.target.value)}\n        />\n        <TextField\n          style={{width: \"60ch\"}}\n          id=\"comm-source-field\"\n          label={`${commMethod} Source`}\n          value={commSource}\n          onChange={(e) => setCommSource(e.target.value)}\n        />\n      </React.Fragment>\n    );\n  };\n\n  const fileUpload = (\n    <React.Fragment>\n      <DragAndDrop handleDrop={handleFiles} >\n        <Stack\n          direction=\"row\"\n          style={{\n            width: \"60ch\",\n            height: \"15ch\",\n          }}\n          sx={{\n            border: '1px dashed grey',\n            justifyContent: \"center\",\n            alignContent: \"center\",\n          }}\n        >\n          <Button\n            variant=\"text\"\n            component=\"label\"\n            style={{\n              padding: 0,\n              // don't make the button click field too large...\n              marginTop: \"5ch\",\n              marginBottom: \"5ch\",\n            }}\n          >\n            Upload a distribution list\n            <input\n              type=\"file\"\n              onChange={(e) => handleFiles(e.target.files)}\n              hidden\n            />\n          </Button>\n          {WHITESPACE}\n          {/*For display alignment...*/}\n          <Button\n            variant=\"text\"\n            component=\"label\"\n            disabled={true}\n            style={{color: \"white\", padding: 0}}\n          >\n            or drag it here\n          </Button>\n        </Stack>\n      </DragAndDrop>\n      {filename !== \"\"\n      ? (<Box style={{\n            display: 'flex',\n            justifyContent: 'center',\n            width: \"60ch\",\n            color: \"rgba(255,255,255,.8)\",\n          }}>\n            <FilePresentIcon />\n            <span>{WHITESPACE} Uploaded {filename}</span>\n          </Box>\n        )\n      : (<Box/>)}\n    </React.Fragment>\n  );\n\n  const createAirdrop = (\n    <Button\n      disabled={!wallet.connected}\n      variant=\"contained\"\n      color=\"success\"\n      onClick={(e) => {\n        const wrap = async () => {\n          try {\n            await submit(e);\n          } catch (err) {\n            notify({\n              message: \"Create failed\",\n              description: `${err}`,\n            });\n          }\n        };\n        wrap();\n      }}\n      sx={{ marginRight: \"4px\" }}\n    >\n      Create Merkle Airdrop\n    </Button>\n  );\n\n  return (\n    <Stack spacing={2}>\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"mint-text-field\"\n        label=\"Mint\"\n        value={mint}\n        onChange={(e) => {\n          localStorage.setItem(\"mint\", e.target.value);\n          setMint(e.target.value);\n        }}\n      />\n      <FormControl fullWidth>\n        <InputLabel id=\"comm-method-label\">Claim Distribution Method</InputLabel>\n        <Select\n          labelId=\"comm-method-label\"\n          id=\"comm-method-select\"\n          value={commMethod}\n          label=\"Claim Distribution Method\"\n          onChange={(e) => {\n            localStorage.setItem(\"commMethod\", e.target.value);\n            setMethod(e.target.value);\n          }}\n          style={{textAlign: \"left\"}}\n        >\n          <MenuItem value={\"Mailchimp\"}>Mailchimp</MenuItem>\n          <MenuItem value={\"Manual\"}>Manual</MenuItem>\n        </Select>\n      </FormControl>\n      {commMethod !== \"\" && commAuthorization(commMethod)}\n      {commMethod !== \"\" && mint !== \"\" && fileUpload}\n      {filename !== \"\" && createAirdrop}\n    </Stack>\n  );\n};\n\nconst Claim = (\n  props : RouteComponentProps<ClaimProps>,\n) => {\n  const connection = useConnection();\n  const wallet = useWallet();\n  const [editable, setEditable] = React.useState(false);\n\n  let params = queryString.parse(props.location.search);\n  const [distributor, setDistributor] = React.useState(params.distributor as string);\n  const [handle, setHandle] = React.useState(params.handle as string);\n  const [amountStr, setAmount] = React.useState(params.amount as string);\n  const [indexStr, setIndex] = React.useState(params.index as string);\n  const [pinStr, setPin] = React.useState(params.pin as string);\n  const [proofStr, setProof] = React.useState(params.proof as string);\n\n  const submit = async (e : React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (!wallet.connected || wallet.publicKey === null) {\n      throw new Error(`Wallet not connected`);\n    }\n\n    const amount = Number(amountStr);\n    const index = Number(indexStr);\n    const pin = pinStr.split(\",\").map(Number);\n\n    if (isNaN(amount)) {\n      throw new Error(`Could not parse amount ${amountStr}`);\n    }\n    if (isNaN(index)) {\n      throw new Error(`Could not parse index ${indexStr}`);\n    }\n\n    let distributorKey : PublicKey;\n    try {\n      distributorKey = new PublicKey(distributor);\n    } catch (err) {\n      throw new Error(`Invalid distributor key ${err}`);\n    }\n    const distributorAccount = await connection.getAccountInfo(distributorKey);\n    if (distributorAccount === null) {\n      throw new Error(`Could not fetch distributor`);\n    }\n\n    const distributorInfo = coder.accounts.decode(\n      \"MerkleDistributor\", distributorAccount.data);\n\n    const proof = proofStr === \"\" ? [] : proofStr.split(\",\").map(b => {\n      const ret = Buffer.from(bs58.decode(b))\n      if (ret.length !== 32)\n        throw new Error(`Invalid proof hash length`);\n      return ret;\n    });\n\n    console.log(\"Proof\", proof);\n\n    console.log(distributorInfo.mint.toBase58(), handle, pin);\n\n    const [claimantPda, ] = await PublicKey.findProgramAddress(\n      [\n        distributorInfo.mint.toBuffer(),\n        Buffer.from(handle),\n        Buffer.from(pin),\n      ],\n      MERKLE_DISTRIBUTOR_ID\n    );\n\n    const leaf = Buffer.from(keccak_256.digest(\n      [...new BN(index).toArray(\"le\", 8),\n       ...claimantPda.toBuffer(),\n       ...new BN(amount).toArray(\"le\", 8),\n      ]\n    ));\n\n    console.log(leaf, claimantPda.toBase58(), MerkleTree.nodeHash(leaf));\n\n    const matches = MerkleTree.verifyClaim(\n      Buffer.from(keccak_256.digest(\n        [...new BN(index).toArray(\"le\", 8),\n         ...claimantPda.toBuffer(),\n         ...new BN(amount).toArray(\"le\", 8),\n        ]\n      )),\n      proof,\n      Buffer.from(distributorInfo.root)\n    );\n\n    if (!matches) {\n      throw new Error(\"Merkle proof does not match\");\n    }\n\n    const [claimStatus, cbump] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"ClaimStatus\"),\n        Buffer.from(new BN(index).toArray(\"le\", 8)),\n        distributorKey.toBuffer(),\n      ],\n      MERKLE_DISTRIBUTOR_ID\n    );\n\n    const [distributorTokenKey, ] = await PublicKey.findProgramAddress(\n      [\n        distributorKey.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        distributorInfo.mint.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    );\n\n    const [walletTokenKey, ] = await PublicKey.findProgramAddress(\n      [\n        wallet.publicKey.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        distributorInfo.mint.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    );\n\n    const setup : Array<TransactionInstruction> = [];\n\n    if (await connection.getAccountInfo(walletTokenKey) === null) {\n      setup.push(new TransactionInstruction({\n          programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n          keys: [\n              { pubkey: wallet.publicKey        , isSigner: true  , isWritable: true  } ,\n              { pubkey: walletTokenKey          , isSigner: false , isWritable: true  } ,\n              { pubkey: wallet.publicKey        , isSigner: false , isWritable: false } ,\n              { pubkey: distributorInfo.mint    , isSigner: false , isWritable: false } ,\n              { pubkey: SystemProgram.programId , isSigner: false , isWritable: false } ,\n              { pubkey: TOKEN_PROGRAM_ID        , isSigner: false , isWritable: false } ,\n              { pubkey: SYSVAR_RENT_PUBKEY      , isSigner: false , isWritable: false } ,\n          ],\n          data: Buffer.from([])\n      }));\n    }\n\n    const claimAirdrop = new TransactionInstruction({\n        programId: MERKLE_DISTRIBUTOR_ID,\n        keys: [\n            { pubkey: distributorKey          , isSigner: false , isWritable: true  } ,\n            { pubkey: claimStatus             , isSigner: false , isWritable: true  } ,\n            { pubkey: distributorTokenKey     , isSigner: false , isWritable: true  } ,\n            { pubkey: walletTokenKey          , isSigner: false , isWritable: true  } ,\n            { pubkey: wallet.publicKey        , isSigner: true  , isWritable: false } ,  // payer\n            { pubkey: SystemProgram.programId , isSigner: false , isWritable: false } ,\n            { pubkey: TOKEN_PROGRAM_ID        , isSigner: false , isWritable: false } ,\n        ],\n        data: Buffer.from([\n          ...Buffer.from(sha256.digest(\"global:claim\")).slice(0, 8),\n          ...new BN(cbump).toArray(\"le\", 1),\n          ...new BN(index).toArray(\"le\", 8),\n          ...new BN(amount).toArray(\"le\", 8),\n          ...claimantPda.toBuffer(),\n          ...new BN(proof.length).toArray(\"le\", 4),\n          ...Buffer.concat(proof),\n        ])\n    })\n\n    const claimResult = await Connection.sendTransactionWithRetry(\n      connection,\n      wallet,\n      [\n        ...setup,\n        claimAirdrop\n      ],\n      []\n    );\n\n    console.log(claimResult);\n    if (typeof claimResult === \"string\") {\n      notify({\n        message: \"Claim failed\",\n        description: claimResult,\n      });\n    } else {\n      notify({\n        message: \"Claim succeeded\",\n        description: (\n          <HyperLink href={Connection.explorerLinkFor(claimResult.txid, connection)}>\n            View transaction on explorer\n          </HyperLink>\n        ),\n      });\n    }\n  };\n\n  return (\n    <Stack spacing={2}>\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"distributor-text-field\"\n        label=\"Distributor\"\n        value={distributor}\n        onChange={(e) => setDistributor(e.target.value)}\n        disabled={!editable}\n      />\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"handle-text-field\"\n        label=\"Handle\"\n        value={handle}\n        onChange={(e) => setHandle(e.target.value)}\n        disabled={!editable}\n      />\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"amount-text-field\"\n        label=\"Amount\"\n        value={amountStr}\n        onChange={(e) => setAmount(e.target.value)}\n        disabled={!editable}\n      />\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"index-text-field\"\n        label=\"Index\"\n        value={indexStr}\n        onChange={(e) => setIndex(e.target.value)}\n        disabled={!editable}\n      />\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"pin-text-field\"\n        label=\"Pin\"\n        value={pinStr}\n        onChange={(e) => setPin(e.target.value)}\n        disabled={!editable}\n      />\n      <TextField\n        style={{width: \"60ch\"}}\n        id=\"proof-text-field\"\n        label=\"Proof\"\n        multiline\n        value={proofStr}\n        onChange={(e) => setProof(e.target.value)}\n        disabled={!editable}\n      />\n      <Box />\n      <div>\n        <Button\n          style={{width: \"15ch\"}}\n          color=\"info\"\n          onClick={(e) => setEditable(!editable)}\n        >\n          {!editable ? \"Edit Claim\" : \"Stop Editing\"}\n        </Button>\n        <Button\n          style={{width: \"45ch\"}}\n          disabled={!wallet.connected}\n          variant=\"contained\"\n          color=\"success\"\n          onClick={(e) => {\n            const wrap = async () => {\n              try {\n                await submit(e);\n              } catch (err) {\n                notify({\n                  message: \"Claim failed\",\n                  description: `${err}`,\n                });\n              }\n            };\n            wrap();\n          }}\n        >\n          Claim Merkle Airdrop\n        </Button>\n      </div>\n    </Stack>\n  );\n};\n\nconst Home = (\n  props : HomeProps,\n) => {\n  return (\n    <Stack\n      direction=\"row\"\n      spacing={2}\n    >\n      <Link to=\"/create\">\n        <Button\n          style={{width: \"30ch\"}}\n          variant=\"contained\"\n          color=\"info\"\n        >\n          Create\n        </Button>\n      </Link>\n      <Link to=\"/claim\">\n        <Button\n          style={{width: \"30ch\"}}\n          variant=\"contained\"\n          color=\"info\"\n        >\n          claim\n        </Button>\n      </Link>\n    </Stack>\n  );\n};\n\nconst getWindowDimensions = () => {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n};\n\nconst useWindowDimensions = () => {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n};\n\nfunction App() {\n  const colorModeCtx = useColorMode();\n\n  const mode =\n    colorModeCtx.mode === \"dark\" || !colorModeCtx.mode ? \"dark\" : \"light\";\n\n  useEffect(() => {}, [colorModeCtx.mode]);\n\n  const { height } = useWindowDimensions();\n\n  const theme = React.useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode,\n        },\n      }),\n    [colorModeCtx.mode]\n  );\n\n  return (\n    <div className=\"App\" style={{ backgroundColor: \"transparent\" }}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Header />\n        <Box\n          sx={{\n            width: 600,\n            height: \"100%\",\n            flexGrow: 1,\n            pt: `${Math.floor(0.2 * height)}px`,\n            px: \"50%\",\n            display: \"flex\",\n            alignSelf: \"center\",\n            justifyContent: \"center\",\n            alignContent: \"center\",\n          }}\n        >\n          <BrowserRouter>\n            <Switch>\n              <Route path=\"/create\" component={Create} />\n              <Route path=\"/claim\" component={Claim} />\n              <Route path=\"/\" component={Home} />\n            </Switch>\n          </BrowserRouter>\n        </Box>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\"\nimport {\n  Stack,\n} from \"@mui/material\";\n\nexport const DragAndDrop = (props) => {\n  const dropRef = React.useRef<HTMLDivElement>(null);\n  const [dragCounter, setDragCounter] = React.useState(0);\n  const [dragging, setDragging] = React.useState(false);\n\n  const handleDrag = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n  };\n\n  const handleDragIn = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n\n    setDragCounter(dragCounter + 1);\n    if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {\n      setDragging(true);\n    }\n  };\n\n  const handleDragOut = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n\n    const remainingDrags = dragCounter - 1;\n    setDragCounter(remainingDrags);\n    if (remainingDrags === 0) {\n      setDragging(false);\n    }\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n\n    setDragging(false);\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      props.handleDrop(e.dataTransfer.files);\n      e.dataTransfer.clearData();\n      setDragCounter(0);\n    }\n  };\n\n  React.useEffect(() => {\n    const node = dropRef.current;\n    if (node === null) return;\n    node.addEventListener(\"dragenter\" , handleDragIn);\n    node.addEventListener(\"dragleave\" , handleDragOut);\n    node.addEventListener(\"dragover\"  , handleDrag);\n    node.addEventListener(\"drop\"      , handleDrop);\n\n    return () => {\n      node.removeEventListener(\"dragenter\" , handleDragIn);\n      node.removeEventListener(\"dragleave\" , handleDragOut);\n      node.removeEventListener(\"dragover\"  , handleDrag);\n      node.removeEventListener(\"drop\"      , handleDrop);\n    };\n  });\n\n  return (\n    <div\n      ref={dropRef}\n      style={dragging ? { backgroundColor: \"rgba(255,255,255,.3)\"} : {}}\n    >\n      {props.children}\n    </div>\n  );\n};\n\n\nexport default DragAndDrop;\n","import { ButtonGroup, ButtonGroupProps } from \"@mui/material\";\nimport { Settings } from \"./Settings\";\n\nexport type ConnectButtonProps = ButtonGroupProps & {\n  isConnected: boolean;\n  onClickConnect: () => void;\n  onClickChange: () => void;\n};\n\nexport const ConnectButton: React.FC<ConnectButtonProps> = ({\n  isConnected,\n  onClickConnect,\n  onClickChange,\n  ...restProps\n}) => {\n  return (\n    <ButtonGroup   {...restProps}>\n      <Settings/>\n    </ButtonGroup>\n  );\n};\n\nexport default ConnectButton;\n","import React, { useCallback } from \"react\";\nimport { Box } from \"@mui/system\";\n\nimport ConnectButton from \"../ConnectButton\";\nimport { ModalEnum, useModal, useWalletModal } from \"../../contexts\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { AppBar } from \"@mui/material\";\n\nexport const Header: React.FC = () => {\n  const { setModal } = useModal();\n  const { setVisible } = useWalletModal();\n  const wallet = useWallet();\n  const connected = wallet.connected;\n\n  const handleChange = useCallback(() => setVisible(true), [setVisible]);\n\n  const handleConnect = useCallback(() => {\n    setModal(ModalEnum.WALLET);\n    setVisible(true);\n  }, [setModal, setVisible]);\n  return (\n    <AppBar color=\"transparent\">\n    <Box\n      sx={{\n        display: \"flex\",\n        bgcolor: \"action.disabledBackground\",\n      }}\n      minWidth=\"100%\"\n    >\n      <Box sx={{flexGrow: 1}}></Box>\n      <Box\n        sx={{\n          display: \"flex\",\n          height: \"62px\",\n          justifyContent: \"flex-end\",\n          alignItems: \"center\",\n        }}\n      >\n        <ConnectButton\n          isConnected={connected}\n          sx={{ marginRight: \"36px\" }}\n          onClickConnect={handleConnect}\n          onClickChange={handleChange}\n        />\n      </Box>\n    </Box>\n</AppBar>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { Modal } from \"antd\";\n\nimport \"./index.css\";\n\nexport const DefaultModal = (props: any) => {\n  const { children, closeIcon, bodyStyle, style, ...rest } = props;\n\n  return (\n    <Modal\n      style={{ background: \"transparent\", borderRadius: 16 }}\n      bodyStyle={{\n        background: \"#333333\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        ...bodyStyle,\n      }}\n      footer={null}\n      width={400}\n      {...rest}\n    >\n      {children}\n    </Modal>\n  );\n};\n","import { WalletAdapter, WalletError } from \"@solana/wallet-adapter-base\";\nimport {\n  useWallet,\n  WalletProvider as BaseWalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  getLedgerWallet,\n  getMathWallet,\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolongWallet,\n  getTorusWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport { Button } from \"antd\";\nimport React, {\n  createContext,\n  FC,\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { notify } from \"../../utils\";\nimport { DefaultModal } from \"../../components\";\n\nimport \"./wallet.less\";\n\nexport interface WalletModalContextState {\n  visible: boolean;\n  setVisible: (open: boolean) => void;\n}\n\nexport const WalletModalContext = createContext<WalletModalContextState>(\n  {} as WalletModalContextState\n);\n\nexport function useWalletModal(): WalletModalContextState {\n  return useContext(WalletModalContext);\n}\n\nexport const WalletModal: FC = () => {\n  const { wallets, wallet: selected, select } = useWallet();\n  const { visible, setVisible } = useWalletModal();\n  const [ , setShowWallets] = useState(false);\n  const close = useCallback(() => {\n    setVisible(false);\n    setShowWallets(false);\n  }, [setVisible, setShowWallets]);\n\n  return (\n    <DefaultModal visible={visible} onCancel={close}>\n      <div\n        style={{\n          background:\n            \"linear-gradient(180deg, #D329FC 0%, #8F6DDE 49.48%, #19E6AD 100%)\",\n          borderRadius: 36,\n          width: 50,\n          height: 50,\n          textAlign: \"center\",\n          verticalAlign: \"middle\",\n          fontWeight: 700,\n          fontSize: \"1.3rem\",\n          lineHeight: 2.4,\n          marginBottom: 10,\n        }}\n      ></div>\n      <h2\n        style={{\n          color: \"white\",\n          fontWeight: \"bold\",\n          fontSize: 20,\n        }}\n      >\n        {selected ? \"Change provider\" : \"\"}\n      </h2>\n      <p style={{ color: \"white\", fontSize: 14 }}>\n        {selected\n          ? \"Choose from the following options:\"\n          : \"Please sign into your wallet\"}\n      </p>\n\n      <br />\n      {wallets.map((wallet) => {\n        return (\n          <Button\n            key={wallet.name}\n            size=\"large\"\n            type={wallet === selected ? \"primary\" : \"ghost\"}\n            onClick={() => {\n              select(wallet.name);\n              close();\n            }}\n            icon={\n              <img\n                alt={`${wallet.name}`}\n                width={20}\n                height={20}\n                src={wallet.icon}\n                style={{ marginRight: 30, float: \"left\" }}\n              />\n            }\n            style={{\n              display: \"block\",\n              width: \"100%\",\n              textAlign: \"left\",\n              marginBottom: 8,\n              color: \"white\",\n            }}\n          >\n            {wallet.name}\n          </Button>\n        );\n      })}\n    </DefaultModal>\n  );\n};\n\nexport const WalletModalProvider: FC<{ children: ReactNode }> = ({\n  children,\n}) => {\n  const { publicKey } = useWallet();\n  const [connected, setConnected] = useState(!!publicKey);\n  const [visible, setVisible] = useState(false);\n\n  useEffect(() => {\n    if (publicKey) {\n      const base58 = publicKey.toBase58();\n      const keyToDisplay =\n        base58.length > 20\n          ? `${base58.substring(0, 7)}.....${base58.substring(\n              base58.length - 7,\n              base58.length\n            )}`\n          : base58;\n\n      notify({\n        message: \"Wallet update\",\n        description: \"Connected to wallet \" + keyToDisplay,\n      });\n    }\n  }, [publicKey]);\n\n  useEffect(() => {\n    if (!publicKey && connected) {\n      notify({\n        message: \"Wallet update\",\n        description: \"Disconnected from wallet\",\n      });\n    }\n    setConnected(!!publicKey);\n  }, [publicKey, connected, setConnected]);\n\n  return (\n    <WalletModalContext.Provider\n      value={{\n        visible,\n        setVisible,\n      }}\n    >\n      {children}\n      <WalletModal />\n    </WalletModalContext.Provider>\n  );\n};\n\nexport const WalletProvider: FC<{ children: ReactNode }> = ({ children }) => {\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getTorusWallet({\n        options: {\n          // @FIXME: this should be changed for Default, and by each Default storefront\n          clientId:\n            \"BOM5Cl7PXgE9Ylq1Z1tqzhpydY0RVr8k90QQ85N7AKI5QGSrr9iDC-3rvmy0K_hF0JfpLMiXoDhta68JwcxS1LQ\",\n        },\n      }),\n      getLedgerWallet(),\n      getSolongWallet(),\n      getMathWallet(),\n      getSolletWallet(),\n    ],\n    []\n  );\n\n  const onError = useCallback((error: WalletError) => {\n    console.error(error);\n    notify({\n      message: \"Wallet error\",\n      description: error.message,\n    });\n  }, []);\n\n  return (\n    <BaseWalletProvider wallets={wallets} onError={onError} autoConnect>\n      <WalletModalProvider>{children}</WalletModalProvider>\n    </BaseWalletProvider>\n  );\n};\n\nexport type WalletSigner = Pick<\n  WalletAdapter,\n  \"publicKey\" | \"signTransaction\" | \"signAllTransactions\"\n>;\n","export default __webpack_public_path__ + \"static/media/wallet.c746d144.less\";","import React, { useState, useContext, useCallback } from 'react';\n\nimport { WalletModal } from './WalletContext/WalletContext';\n\nexport enum ModalEnum {\n  WALLET = 'wallet',\n}\n\ntype ModalContextProps = {\n  setModal: (modal: ModalEnum | undefined) => void;\n  removeModal: () => void;\n};\n\nexport const ModalContext = React.createContext<ModalContextProps>({\n  setModal: () => null,\n  removeModal: () => null,\n});\n\nexport const ModalProvider: React.FC = ({ children }) => {\n  const [modal, setModal] = useState<ModalEnum | undefined>(undefined);\n\n  const removeModal = useCallback(() => {\n    setModal(undefined);\n  }, [setModal]);\n\n  return (\n    <ModalContext.Provider\n      value={{\n        setModal,\n        removeModal,\n      }}\n    >\n      {children}\n      {modal === ModalEnum.WALLET && <WalletModal />}\n    </ModalContext.Provider>\n  );\n};\n\nexport const useModal = (): ModalContextProps => {\n  const context = useContext(ModalContext);\n  if (context === undefined) {\n    throw new Error('useModal must be used within a ModalProvider');\n  }\n  return context;\n};\n","import { useTheme } from \"@mui/material\";\nimport React, { useContext } from \"react\";\n\nexport const ColorModeContext = React.createContext({});\n\nexport const ColorModeContextProvider = ({children=null as any }) => {\n  const [mode, setMode] = React.useState<'light' | 'dark'>('dark'); \n  const theme = useTheme();\n  const toggleColorMode = () => {\n    setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n  }\n  return (\n    <ColorModeContext.Provider\n      value={{\n        toggleColorMode,\n        mode,\n        theme,\n      }}\n    >\n      {children}\n    </ColorModeContext.Provider>\n  );\n};\n\nexport const useColorMode = (): any => {\n  const context = useContext(ColorModeContext);\n  return context;\n};\n","import { PublicKey } from '@solana/web3.js';\nimport { BinaryReader, BinaryWriter } from 'borsh';\nimport base58 from 'bs58';\nimport { StringPublicKey } from './ids';\n\nexport const extendBorsh = () => {\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array) as StringPublicKey;\n  };\n\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: StringPublicKey,\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\n\nextendBorsh();\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport {\n  AccountsProvider,\n  WalletProvider,\n  ConnectionProvider,\n  ColorModeContextProvider,\n} from \"./contexts\";\n\nimport \"antd/dist/antd.css\";\nimport \"@fontsource/open-sans\";\nimport \"@fontsource/roboto\";\nimport \"@fontsource/sora\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConnectionProvider>\n      <WalletProvider>\n        <AccountsProvider>\n          <ColorModeContextProvider>\n            <App />\n          </ColorModeContextProvider>\n        </AccountsProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n","import BN from 'bn.js';\n\nexport const TEN = new BN(10);\nexport const HALF_WAD = TEN.pow(new BN(18));\nexport const WAD = TEN.pow(new BN(18));\nexport const RAY = TEN.pow(new BN(27));\nexport const ZERO = new BN(0);\n","import { useCallback, useState } from 'react';\nimport { MintInfo } from '@solana/spl-token';\n\nimport { TokenAccount } from './../models';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { WAD, ZERO } from '../constants';\nimport { TokenInfo } from '@solana/spl-token-registry';\n\nexport type KnownTokenMap = Map<string, TokenInfo>;\n\nexport const formatPriceNumber = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 8,\n});\n\nexport function useLocalStorageState(key: string, defaultState?: string) {\n  const [state, setState] = useState(() => {\n    // NOTE: Not sure if this is ok\n    const storedState = localStorage.getItem(key);\n    if (storedState) {\n      return JSON.parse(storedState);\n    }\n    return defaultState;\n  });\n\n  const setLocalStorageState = useCallback(\n    newState => {\n      const changed = state !== newState;\n      if (!changed) {\n        return;\n      }\n      setState(newState);\n      if (newState === null) {\n        localStorage.removeItem(key);\n      } else {\n        try {\n          localStorage.setItem(key, JSON.stringify(newState));\n        } catch {\n          // ignore\n        }\n      }\n    },\n    [state, key],\n  );\n\n  return [state, setLocalStorageState];\n}\n\nexport const findProgramAddress = async (\n  seeds: (Buffer | Uint8Array)[],\n  programId: PublicKey,\n) => {\n  const key =\n    'pda-' +\n    seeds.reduce((agg, item) => agg + item.toString('hex'), '') +\n    programId.toString();\n  let cached = localStorage.getItem(key);\n  if (cached) {\n    const value = JSON.parse(cached);\n\n    return [value.key, parseInt(value.nonce)] as [string, number];\n  }\n\n  const result = await PublicKey.findProgramAddress(seeds, programId);\n\n  try {\n    localStorage.setItem(\n      key,\n      JSON.stringify({\n        key: result[0].toBase58(),\n        nonce: result[1],\n      }),\n    );\n  } catch {\n    // ignore\n  }\n\n  return [result[0].toBase58(), result[1]] as [string, number];\n};\n\n// shorten the checksummed version of the input address to have 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n}\n\nexport function getTokenName(\n  map: KnownTokenMap,\n  mint?: string | PublicKey,\n  shorten = true,\n): string {\n  const mintAddress = typeof mint === 'string' ? mint : mint?.toBase58();\n\n  if (!mintAddress) {\n    return 'N/A';\n  }\n\n  const knownSymbol = map.get(mintAddress)?.symbol;\n  if (knownSymbol) {\n    return knownSymbol;\n  }\n\n  return shorten ? `${mintAddress.substring(0, 5)}...` : mintAddress;\n}\nexport function getVerboseTokenName(\n  map: KnownTokenMap,\n  mint?: string | PublicKey,\n  shorten = true,\n): string {\n  const mintAddress = typeof mint === 'string' ? mint : mint?.toBase58();\n\n  if (!mintAddress) {\n    return 'N/A';\n  }\n\n  const knownName = map.get(mintAddress)?.name;\n  if (knownName) {\n    return knownName;\n  }\n\n  return shorten ? `${mintAddress.substring(0, 5)}...` : mintAddress;\n}\n\nexport function getTokenByName(tokenMap: KnownTokenMap, name: string) {\n  let token: TokenInfo | null = null;\n  for (const val of tokenMap.values()) {\n    if (val.symbol === name) {\n      token = val;\n      break;\n    }\n  }\n  return token;\n}\n\nexport function getTokenIcon(\n  map: KnownTokenMap,\n  mintAddress?: string | PublicKey,\n): string | undefined {\n  const address =\n    typeof mintAddress === 'string' ? mintAddress : mintAddress?.toBase58();\n  if (!address) {\n    return;\n  }\n\n  return map.get(address)?.logoURI;\n}\n\nexport function isKnownMint(map: KnownTokenMap, mintAddress: string) {\n  return !!map.get(mintAddress);\n}\n\nexport const STABLE_COINS = new Set(['USDC', 'wUSDC', 'USDT']);\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(\n    0,\n    new Array(Math.ceil(array.length / size)),\n  ).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\n\nexport function toLamports(\n  account?: TokenAccount | number,\n  mint?: MintInfo,\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount =\n    typeof account === 'number' ? account : account.info.amount?.toNumber();\n\n  const precision = Math.pow(10, mint?.decimals || 0);\n  return Math.floor(amount * precision);\n}\n\nexport function wadToLamports(amount?: BN): BN {\n  return amount?.div(WAD) || ZERO;\n}\n\nexport function fromLamports(\n  account?: TokenAccount | number | BN,\n  mint?: MintInfo,\n  rate: number = 1.0,\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount = Math.floor(\n    typeof account === 'number'\n      ? account\n      : BN.isBN(account)\n      ? account.toNumber()\n      : account.info.amount.toNumber(),\n  );\n\n  const precision = Math.pow(10, mint?.decimals || 9);\n  return (amount / precision) * rate;\n}\n\nexport const tryParseKey = (key: string): PublicKey | null => {\n  try {\n    return new PublicKey(key);\n  } catch (error) {\n    return null;\n  }\n};\n\nvar SI_SYMBOL = ['', 'k', 'M', 'G', 'T', 'P', 'E'];\n\nconst abbreviateNumber = (number: number, precision: number) => {\n  let tier = (Math.log10(number) / 3) | 0;\n  let scaled = number;\n  let suffix = SI_SYMBOL[tier];\n  if (tier !== 0) {\n    let scale = Math.pow(10, tier * 3);\n    scaled = number / scale;\n  }\n\n  return scaled.toFixed(precision) + suffix;\n};\n\nexport const formatAmount = (\n  val: number,\n  precision: number = 2,\n  abbr: boolean = true,\n) => (abbr ? abbreviateNumber(val, precision) : val.toFixed(precision));\n\nexport function formatTokenAmount(\n  account?: TokenAccount | number | BN,\n  mint?: MintInfo,\n  rate: number = 1.0,\n  prefix = '',\n  suffix = '',\n  precision = 2,\n  abbr = false,\n): string {\n  if (!account) {\n    return '';\n  }\n\n  return `${[prefix]}${formatAmount(\n    fromLamports(account, mint, rate),\n    precision,\n    abbr,\n  )}${suffix}`;\n}\n\nexport const formatUSD = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n});\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n};\n\nexport const formatPct = new Intl.NumberFormat('en-US', {\n  style: 'percent',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport function convert(\n  account?: TokenAccount | number,\n  mint?: MintInfo,\n  rate: number = 1.0,\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount =\n    typeof account === 'number' ? account : account.info.amount?.toNumber();\n\n  const precision = Math.pow(10, mint?.decimals || 0);\n  let result = (amount / precision) * rate;\n\n  return result;\n}\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n"],"sourceRoot":""}