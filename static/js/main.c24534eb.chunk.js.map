{"version":3,"sources":["utils/claimant.ts","utils/transactions.ts","contexts/ConnectionContext.tsx","utils/merkleTree.ts","utils/programIds.ts","components/DefaultModal/index.tsx","contexts/AccountContext.tsx","utils/eventEmitter.ts","components/Settings/index.tsx","contexts/ColorModeContext.tsx","utils/notifications.tsx","utils/borsh.ts","utils/merkleDistributor.ts","utils/ids.ts","components/Claim.tsx","contexts/WalletContext/WalletContext.tsx","contexts/WalletContext/wallet.less","contexts/ModalContext.tsx","utils/accounts.ts","components/Header/Header.tsx","components/Close.tsx","utils/communication.ts","components/DragAndDrop.tsx","components/Create.tsx","App.tsx","reportWebVitals.ts","index.tsx","constants/math.ts","utils/utils.ts"],"names":["parseClaimants","input","filename","method","extension","match","Error","search","arr","strData","objPattern","RegExp","arrMatches","arrData","exec","length","push","replace","csvStringToArray","foundIdx","findIndex","s","includes","numbers","Set","slice","filter","map","n","idx","handle","amount","edition","JSON","parse","obj","url","explorerUrlFor","env","key","dropInfoFor","integration","tokenMint","candyConfig","masterMint","type","meta","validateTransferClaims","connection","walletKey","claimants","mintStr","a","forEach","c","total","reduce","acc","getMintInfo","mint","getCreatorTokenAccount","source","validateCandyClaims","candyUuid","getCandyConfig","configKey","getCandyMachineAddress","candyMachineKey","getCandyMachine","candyMachine","remaining","data","itemsAvailable","toNumber","itemsRedeemed","isNaN","authority","equals","config","uuid","getIndex","offsetFromStart","div","BN","getOffsetFromRight","sub","mod","getIndexAndMask","getOffsetFromStart","index","mask","shln","editionTaken","marker","m","setEditionTaken","validateEditionClaims","masterMintStr","masterTokenAccount","getEdition","masterEditionKey","getAccountInfo","masterEdition","console","log","currentSupply","maxSupply","editions","editionMarkers","undefined","getEditionMarkerPda","markerKey","markerData","find","pm","markerAcc","Array","chunk","len","chunks","i","buildGumdrop","needsPin","claimIntegration","host","baseKey","temporalSigner","claimInfo","extraParams","leafs","claimant","secret","PublicKey","seeds","seed","toBuffer","Buffer","from","pin","toArray","findProgramAddress","GUMDROP_DISTRIBUTOR_ID","claimantPda","extra","tree","MerkleTree","root","getRoot","distributor","dbump","proof","getProof","verifyProof","params","encodeURIComponent","b","bs58","query","join","instructions","TransactionInstruction","programId","keys","pubkey","isSigner","isWritable","SystemProgram","sha256","digest","Token","createApproveInstruction","TOKEN_PROGRAM_ID","distributorWalletKey","CANDY_MACHINE_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","distributorTokenKey","createAssociatedTokenAccountInstruction","createTransferInstruction","closeGumdrop","base","claimMethod","transferMint","publicKey","distributorKey","wbump","createRevokeInstruction","extraKeys","masterMintKey","walletTokenKey","getUnixTs","Date","getTime","envFor","_rpcEndpoint","explorerLinkFor","txid","sendSignedTransaction","signedTransaction","timeout","rawTransaction","serialize","startTime","slot","sendRawTransaction","skipPreflight","debug","done","sleep","awaitTransactionSignatureConfirmation","confirmation","err","error","simulateResult","simulateTransaction","value","logs","line","startsWith","stringify","transaction","commitment","_recentBlockhash","_disableBlockhashCaching","recentBlockhash","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","queryStatus","status","confirmations","subId","Promise","resolve","reject","setTimeout","warn","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ENDPOINTS","name","endpoint","ChainId","MainnetBeta","Devnet","DEFAULT","ConnectionContext","React","createContext","setEndpoint","Connection","tokens","tokenMap","Map","ConnectionProvider","children","useLocalStorageState","useMemo","end","useState","setTokens","setTokenMap","useEffect","TokenListProvider","then","container","list","excludeByTag","filterByChainId","getList","knownMints","item","set","address","id","onAccountChange","Keypair","generate","removeAccountChangeListener","onSlotChange","removeSlotChangeListener","Provider","useConnection","useContext","useConnectionConfig","SequenceType","getErrorForTransaction","confirmTransaction","getParsedConfirmedTransaction","tx","errors","logMessages","regex","lastIndex","sendTransactionWithRetry","wallet","signers","includesFeePayer","block","beforeSend","WalletNotConnectedError","Transaction","instruction","add","getRecentBlockhash","blockhash","setSigners","partialSign","signTransaction","layers","this","hashes","nodeHash","cur","nxt","internalHash","layer","sibling","Math","floor","el","pair","keccak_256","first","second","sort","compare","fst","snd","leaf","programIds","token","associatedToken","bpf_upgrade_loader","BPF_UPGRADE_LOADER_ID","system","SYSTEM","memo","MEMO_ID","DefaultModal","props","bodyStyle","closeIcon","width","rest","style","background","borderRadius","display","flexDirection","alignItems","footer","AccountsContext","pendingCalls","genericCache","pendingMintCalls","mintCache","pubKey","info","deserializeMint","TokenAccountParser","buffer","deserializeAccount","account","keyToAccountParser","cache","emitter","EventEmitter","parser","toBase58","get","isActive","deserialize","registerParser","delete","Function","isNew","has","raiseCacheUpdated","raiseCacheDeleted","byParser","queryMint","getMint","addMint","UseNativeAccount","useWallet","nativeAccount","setNativeAccount","updateCache","useCallback","wrapped","WRAPPED_SOL_MINT","owner","u64","lamports","delegate","delegatedAmount","isInitialized","isFrozen","isNative","rentExemptReserve","closeAuthority","wrapNativeAccount","updateAccount","PRECACHED_OWNERS","precacheUserTokenAccounts","getTokenAccountsByOwner","AccountsProvider","tokenAccounts","setTokenAccounts","userAccounts","setUserAccounts","selectUserAccounts","accounts","subs","onCache","tokenSubID","onProgramAccountChange","accountId","accountInfo","AccountLayout","span","removeProgramAccountChangeListener","decode","fromBuffer","delegateOption","state","isNativeOption","closeAuthorityOption","MintLayout","mintInfo","mintAuthorityOption","mintAuthority","supply","freezeAuthorityOption","freezeAuthority","CacheUpdateEvent","CacheDeleteEvent","MarketUpdateEvent","ids","Emitter","callback","on","removeListener","emit","Settings","narrow","disconnect","setVisible","useWalletModal","open","setModal","useModal","theme","useTheme","colorModeCtx","useColorMode","handleConnect","ModalEnum","WALLET","connectedActions","click","navigator","clipboard","writeText","notify","description","innerNarrow","shortenAddress","inner","Fragment","catch","expandedExtra","color","variant","drawerOpen","setDrawerOpen","envCollapseOpen","setEnvCollapseOpen","hackySkipSet","toggleDrawer","event","target","classList","contains","drawerC","onClick","anchor","onClose","sx","role","onKeyDown","themeSwitch","ml","toggleColorMode","palette","mode","listHead","primary","primaryTypographyProps","fontSize","fontWeight","letterSpacing","className","in","unmountOnExit","component","disablePadding","p","selected","pl","direction","spacing","justifyContent","marginRight","minWidth","onChange","underline","ColorModeContext","ColorModeContextProvider","setMode","prevMode","placement","notification","opacity","backgroundColor","BinaryReader","prototype","readPubkey","array","readFixedArray","BinaryWriter","writePubkey","writeFixedArray","readPubkeyAsString","base58","encode","writePubkeyAsString","idl","require","coder","Coder","TOKEN_METADATA_PROGRAM_ID","GUMDROP_TEMPORAL_SIGNER","walletKeyOrPda","buildMintClaim","distributorInfo","tokenAcc","tokenAccKey","distTokenAccount","tokenAccountInfo","pdaSeeds","verifyClaim","claimStatus","cbump","setup","temporal","default","claimAirdrop","concat","buildCandyClaim","candyUUID","claimCount","claimCountAccount","nftsAlreadyMinted","claimAccountInfo","count","claimantStr","nftsAvailable","candyMachineMints","buildSingleCandyMint","instrs","candyMachineWallet","candyMachineMint","getMetadata","candyMachineMetadata","candyMachineMaster","createMintAndAccount","SYSVAR_RENT_PUBKEY","SYSVAR_CLOCK_PUBKEY","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","createAccount","createInitMintInstruction","createMintToInstruction","buildEditionClaim","newMint","newMetadataKey","masterMetadataKey","newEdition","editionMarkKey","fetchDistributor","distributorStr","ownerStr","fetchNeedsTemporalSigner","indexStr","Number","Claim","location","localStorage","setItem","stored","getItem","queryString","setDistributor","master","setClaimMethod","setTokenAcc","setCandyConfig","setCandyUUID","setMasterMint","editionStr","setEditionStr","setHandle","amountStr","setAmount","setIndex","pinStr","setPin","proofStr","setProof","discordGuild","guild","allFieldsPopulated","editable","setEditable","setTransaction","OTPStr","setOTPStr","asyncNeedsTemporalSigner","setNeedsTemporalSigner","wrap","lambdaAPIEndpoint","sendOTP","preventDefault","connected","split","ret","extraSigners","feePayer","instr","signatures","some","otpQuery","headers","body","fetch","response","json","succeeded","toCheck","MessageId","verifyOTP","OTP","FunctionName","otp","blob","sig","addSignature","fullySigned","claimResult","href","loading","setLoading","loadingProgress","size","position","top","left","marginTop","marginLeft","claimData","label","disabled","steps","fullWidth","labelId","textAlign","multiline","needsTemporalSigner","activeStep","setActiveStep","stepToUse","min","stepper","prev","WalletModalContext","WalletModal","wallets","select","visible","setShowWallets","close","onCancel","height","verticalAlign","lineHeight","marginBottom","icon","alt","src","float","WalletModalProvider","setConnected","keyToDisplay","substring","WalletProvider","getPhantomWallet","getSolflareWallet","getTorusWallet","options","clientId","uxMode","getLedgerWallet","getSolongWallet","getMathWallet","getSolletWallet","onError","autoConnect","ModalContext","removeModal","mintKey","mintAccount","mintOwner","totalClaim","creatorTokenKey","creatorTokenAccount","creatorTokenInfo","fetchCoder","fetchIdl","configAccount","candyMachineCoder","candyMachineAccount","editionPageNumber","String","Header","navs","Box","bgcolor","overflow","Button","Drawer","List","ListItem","ListItemText","Divider","nav","to","ListItemButton","Stack","flexGrow","Close","setBaseKey","setMint","submit","fromSecretKey","Uint8Array","closeResult","TextField","FormControl","InputLabel","Select","MenuItem","CircularProgress","formatDropMessage","drop","html","text","subject","distributeAwsSes","auth","accessKeyId","secretAccessKey","client","SESv2Client","region","credentials","single","formatted","Destination","ToAddresses","Content","Simple","Subject","Data","Charset","Body","Html","FromEmailAddress","ListManagementOptions","ContactListName","TopicName","send","SendEmailCommand","messageId","responses","distributeManual","distributeWallet","urlAndHandleFor","DragAndDrop","dropRef","useRef","dragCounter","setDragCounter","dragging","setDragging","handleDrag","stopPropagation","handleDragIn","dataTransfer","items","handleDragOut","remainingDrags","handleDrop","files","clearData","node","current","addEventListener","removeEventListener","shade","ref","randomBytes","buf","window","crypto","getRandomValues","WHITESPACE","distribute","reactModal","renderModal","document","createElement","appendChild","destroyModal","ReactDOM","unmountComponentAtNode","removeChild","onSubmit","onDismiss","render","show","displayModal","finally","hideModal","resendOnlyRender","opt","hyperLinkData","encoded","shouldSendRender","limit","TableContainer","maxHeight","Table","TableHead","TableRow","TableCell","TableBody","border","scope","pow","decimals","secretKey","download","Create","setFilename","setText","claimURLs","setClaimURLs","setResponses","otpAuth","setOtpAuth","commMethod","setCommMethod","commAuth","setCommAuth","commSource","setCommSource","awsAccessKeyId","setAwsAccessKeyId","awsSecretKey","setAwsSecretKey","distributeClaims","dropInfo","mightHaveExisting","resendOnly","origin","createResult","handleFiles","file","reader","FileReader","onload","readAsText","fileUpload","alignContent","padding","hidden","createAirdrop","otpAuthC","rel","commAuthorization","About","getWindowDimensions","innerWidth","innerHeight","App","createTheme","windowDimensions","setWindowDimensions","handleResize","useWindowDimensions","ThemeProvider","CssBaseline","maxWidth","path","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","getElementById","TEN","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","defaultState","storedState","setState","setLocalStorageState","newState","removeItem","chars","apply","ceil","_","currency","ms"],"mappings":"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","file":"static/js/main.c24534eb.chunk.js","sourcesContent":["import {\n  Connection as RPCConnection,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n  Token,\n} from \"@solana/spl-token\";\nimport { sha256 } from \"js-sha256\";\nimport BN from 'bn.js';\nimport * as bs58 from \"bs58\";\n\nimport {\n  getCandyConfig,\n  getCandyMachineAddress,\n  getCandyMachine,\n  getCreatorTokenAccount,\n  getEdition,\n  getEditionMarkerPda,\n  getMintInfo,\n} from \"./accounts\";\nimport {\n  CANDY_MACHINE_ID,\n  GUMDROP_DISTRIBUTOR_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from \"./ids\";\nimport {\n  MerkleTree,\n} from \"./merkleTree\";\n\nexport type ClaimantInfo = {\n  handle : string,\n  amount : number,\n  edition : number,\n\n  pin    : BN,\n  url    : string,\n\n  seed   : PublicKey,\n  secret : PublicKey,\n};\n\nconst csvStringToArray = (strData) => {\n  const objPattern = new RegExp((\"(\\\\,|\\\\r?\\\\n|\\\\r|^)(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|([^\\\\,\\\\r\\\\n]*))\"),\"gi\");\n  let arrMatches : RegExpExecArray | null = null;\n  let arrData : Array<Array<string>> = [[]];\n  while (!!(arrMatches = objPattern.exec(strData))) {\n    if (arrMatches[1].length && arrMatches[1] !== \",\")\n      arrData.push([]);\n    arrData[arrData.length - 1].push(\n      arrMatches[2]\n        ? arrMatches[2].replace(new RegExp( \"\\\"\\\"\", \"g\" ), \"\\\"\")\n        : arrMatches[3]);\n  }\n  return arrData;\n}\n\nexport type Claimants = Array<ClaimantInfo>;\nexport const parseClaimants = (\n  input : string,\n  filename : string,\n  method : string,\n) : Claimants => {\n  const extension = filename.match(/\\.[0-9a-z]+$/i);\n  if (extension === null) {\n    throw new Error(`Could not parse file extension from ${filename}`);\n  }\n  switch (extension[0]) {\n    case \".csv\": {\n      const arr = csvStringToArray(input);\n      // TODO: more robust\n      let search;\n      if (method === \"aws-sms\") {\n        search = \"phone number\";\n      } else if (method === \"aws-email\") {\n        search = \"email\";\n      } else {\n        throw new Error(`Cannot parse csv for ${search}`);\n      }\n      const foundIdx = arr[0].findIndex(s => s.includes(search));\n      if (foundIdx === -1)\n        throw new Error(`Could not find ${search} index`);\n\n      const numbers = new Set(\n        arr.slice(1)\n           .filter(arr => arr[foundIdx].length > 0)\n           .map(arr => arr[foundIdx])\n      );\n\n      return [...numbers].map((n, idx) => {\n        return {\n          handle : n,\n          amount : 1,\n          edition : idx,\n        } as any;\n      });\n    }\n    case \".json\": {\n      const json = JSON.parse(input);\n      return json.map(obj => {\n        return {\n          handle : obj.handle,\n          amount : obj.amount,\n          edition: obj.edition,\n          url    : obj.url,\n        };\n      });\n    }\n    default: {\n      throw new Error(`Cannot parse file format ${extension} from ${filename}`);\n    }\n  }\n};\n\nconst explorerUrlFor = (env : string, key : string) => {\n  return `https://explorer.solana.com/address/${key}?cluster=${env}`;\n}\n\nexport type ClaimInfo = { [key: string]: any };\n\nexport const dropInfoFor = (\n  env : string,\n  integration : string,\n  tokenMint : string,\n  candyConfig : string,\n  masterMint : string,\n) => {\n  switch (integration) {\n    case \"transfer\":\n      return { type: \"Token\", meta: explorerUrlFor(env, tokenMint) };\n    case \"candy\":\n      return { type: \"Candy\", meta: explorerUrlFor(env, candyConfig) };\n    case \"edition\":\n      return { type: \"Edition\", meta: explorerUrlFor(env, masterMint) };\n    default:\n      throw new Error(`Unknown claim integration method ${integration}`);\n  }\n}\n\nexport const validateTransferClaims = async (\n  connection : RPCConnection,\n  walletKey : PublicKey,\n  claimants : Claimants,\n  mintStr : string,\n) : Promise<ClaimInfo> => {\n  claimants.forEach((c, idx) => {\n    if (!c.handle) throw new Error(`Claimant ${idx} doesn't have handle`);\n    if (!c.amount) throw new Error(`Claimant ${idx} doesn't have amount`);\n    if (c.amount === 0) throw new Error(`Claimant ${idx} amount is 0`);\n  });\n\n  const total = claimants.reduce((acc, c) => acc + c.amount, 0);\n  const mint = await getMintInfo(connection, mintStr);\n  const source = await getCreatorTokenAccount(\n    walletKey,\n    connection,\n    mint.key,\n    total\n  );\n\n  return {\n    total: total,\n    mint: mint,\n    source: source,\n  };\n}\n\nexport const validateCandyClaims = async (\n  connection : RPCConnection,\n  walletKey : PublicKey,\n  claimants : Claimants,\n  candyConfig : string,\n  candyUuid : string,\n) : Promise<ClaimInfo> => {\n  claimants.forEach((c, idx) => {\n    if (!c.handle) throw new Error(`Claimant ${idx} doesn't have handle`);\n    if (!c.amount) throw new Error(`Claimant ${idx} doesn't have amount`);\n    if (c.amount === 0) throw new Error(`Claimant ${idx} amount is 0`);\n  });\n\n  const total = claimants.reduce((acc, c) => acc + c.amount, 0);\n  const configKey = await getCandyConfig(connection, candyConfig);\n  const [candyMachineKey, ] = await getCandyMachineAddress(configKey, candyUuid);\n\n  const candyMachine = await getCandyMachine(connection, candyMachineKey);\n\n  const remaining = candyMachine.data.itemsAvailable.toNumber() - candyMachine.itemsRedeemed.toNumber();\n  if (isNaN(remaining)) {\n    // TODO: should this have an override?\n    throw new Error(`Could not calculate how many candy machine items are remaining`);\n  }\n  if (remaining < total) {\n    throw new Error(`Distributor is allocated more mints (${total}) `\n                  + `than the candy machine has remaining (${remaining})`);\n  }\n  if (!candyMachine.authority.equals(walletKey)) {\n    throw new Error(`Candy machine authority does not match wallet public key`);\n  }\n\n  return {\n    total: total,\n    config: configKey,\n    uuid: candyUuid,\n    candyMachineKey: candyMachineKey,\n  };\n}\n\nconst getOffsetFromStart = (edition: BN) => {\n  return edition.mod(new BN(31 * 8));\n};\n\nconst getIndex = (offsetFromStart: BN) => {\n  return offsetFromStart.div(new BN(8));\n};\n\nconst getOffsetFromRight = (offsetFromStart: BN) => {\n  return new BN(7).sub(offsetFromStart.mod(new BN(8)));\n};\n\nconst getIndexAndMask = (edition: BN) => {\n  const offsetFromStart = getOffsetFromStart(edition);\n  return {\n    index: getIndex(offsetFromStart).toNumber(),\n    mask: new BN(1).shln(getOffsetFromRight(offsetFromStart).toNumber()).toNumber(),\n  };\n};\n\nconst editionTaken = (marker : Array<number>, edition : BN) : boolean => {\n  let m = getIndexAndMask(edition);\n  return (marker[m.index] & m.mask) !== 0;\n}\n\nconst setEditionTaken = (marker : Array<number>, edition : BN) => {\n  let m = getIndexAndMask(edition);\n  marker[m.index] = marker[m.index] | m.mask;\n}\n\nexport const validateEditionClaims = async (\n  connection : RPCConnection,\n  walletKey : PublicKey,\n  claimants : Claimants,\n  masterMintStr : string,\n) : Promise<ClaimInfo> => {\n  claimants.forEach((c, idx) => {\n    if (!c.handle) throw new Error(`Claimant ${idx} doesn't have handle`);\n    if (c.amount !== 1) {\n      throw new Error(`Claimant ${idx} has amount ${c.amount}. Expected 1 for edition gumdrop`);\n    }\n  });\n\n  const total = claimants.reduce((acc, c) => acc + c.amount, 0);\n  const masterMint = await getMintInfo(connection, masterMintStr);\n  const masterTokenAccount = await getCreatorTokenAccount(\n    walletKey,\n    connection,\n    masterMint.key,\n    1 // just check that the creator has the master mint\n  );\n\n  const masterEditionKey = await getEdition(masterMint.key);\n  const masterEdition = await connection.getAccountInfo(masterEditionKey);\n  if (masterEdition === null) {\n    throw new Error(`Could not fetch master edition`);\n  }\n  console.log(\"Master edition\", masterEdition);\n\n  // maxSupply is an option, 9 bytes, first is 0 means is none\n  const currentSupply = new BN(masterEdition.data.slice(1, 1+8), 8, \"le\").toNumber();\n  let maxSupply;\n  if (masterEdition.data[9] === 0) {\n      maxSupply = null;\n  } else {\n      maxSupply = new BN(masterEdition.data.slice(10, 10+8), 8, \"le\").toNumber();\n  }\n  console.log(\"Max supply\", maxSupply);\n  console.log(\"Current supply\", currentSupply);\n\n  if (maxSupply !== null && maxSupply < total) {\n    throw new Error(`Distributor is allocated more editions (${total}) `\n                  + `than the master has total (${maxSupply})`);\n  }\n\n  // Whether an edition has been claimed is a single bit in a paginated account\n  // (pda off of master mint). The following code does some sanity checks\n  // around max supply and internally whether the distribution list has\n  // duplicate editions, and also checks if the editions were already taken on\n  // chain.\n  //\n  // There is a race condition since the authority to mint is still currently\n  // the wallet but it seems like a user error to have other editions being\n  // minted while a gumdrop is being created\n  const editions : { [key: number]: number } = {};\n  const editionMarkers : Array<[PublicKey, Array<number>]> = [];\n  for (let idx = 0; idx < claimants.length; ++idx ) {\n    const c = claimants[idx];\n    if (c.edition === undefined) throw new Error(`Claimant ${idx} doesn't have edition`);\n    if (c.edition <= 0) {\n      throw new Error(`Claimant ${idx} assigned invalid edition ${c.edition}`);\n    }\n    if (maxSupply !== null && c.edition > maxSupply) {\n      throw new Error(`Claimant ${idx} assigned edition ${c.edition} which is beyond the max supply`);\n    }\n    if (c.edition in editions) {\n      throw new Error(`Claimant ${idx} and ${editions[c.edition]} are both assigned to edition ${c.edition}`);\n    }\n    const edition = new BN(c.edition);\n    const markerKey = await getEditionMarkerPda(masterMint.key, edition);\n    let markerData = editionMarkers.find(pm => pm[0].equals(markerKey));\n    if (markerData === undefined) {\n      const markerAcc = await connection.getAccountInfo(markerKey);\n      if (markerAcc === null) {\n        editionMarkers.push([markerKey, Array<number>(31)]);\n      } else {\n        editionMarkers.push([markerKey, [...markerAcc.data.slice(1, 32)]]);\n      }\n      markerData = editionMarkers[editionMarkers.length - 1];\n    }\n\n    if (markerData === undefined) {\n      throw new Error(`Internal Error: Edition marker info still undefined ${c.edition}`);\n    }\n\n    if (editionTaken(markerData[1], edition)) {\n      throw new Error(`Claimant ${idx} is assigned to edition ${c.edition} which is already taken`);\n    }\n\n    setEditionTaken(markerData[1], edition);\n\n    editions[c.edition] = idx;\n  }\n\n  return {\n    total: total,\n    masterMint: masterMint,\n    masterTokenAccount: masterTokenAccount,\n  };\n}\n\nexport const chunk = (\n  arr : Buffer,\n  len : number,\n) : Array<Buffer> => {\n  let chunks : Array<Buffer> = [],\n      i = 0,\n      n = arr.length;\n\n  while (i < n) {\n    chunks.push(arr.slice(i, i += len));\n  }\n\n  return chunks;\n}\n\nexport const buildGumdrop = async (\n  connection : RPCConnection,\n  walletKey : PublicKey,\n  needsPin : boolean,\n  claimIntegration : string,\n  host : string,\n  baseKey : PublicKey,\n  temporalSigner : PublicKey,\n  claimants : Claimants,\n  claimInfo  : ClaimInfo,\n  extraParams : Array<string> = [],\n) : Promise<Array<TransactionInstruction>> => {\n\n  const leafs : Array<Buffer> = [];\n  for (let idx = 0; idx < claimants.length; ++idx ) {\n    const claimant = claimants[idx];\n    if (!needsPin) {\n      try {\n        claimant.secret = new PublicKey(claimant.handle);\n      } catch (err) {\n        throw new Error(`Invalid claimant wallet handle ${err}`);\n      }\n    } else {\n      const seeds = [\n        claimant.seed.toBuffer(),\n        ...chunk(Buffer.from(claimant.handle), 32),\n        Buffer.from(claimant.pin.toArray(\"le\", 4)),\n      ];\n      const [claimantPda, ] = await PublicKey.findProgramAddress(\n          seeds.map(s => s.slice(0, 32)), GUMDROP_DISTRIBUTOR_ID);\n      claimant.secret = claimantPda;\n    }\n    // TODO: get this clarified with jordan... we can either just assign some\n    // range of editions to a user or give them an amount and just keep a\n    // counter on the distributor... the latter is much less work but we lose\n    // the ability to use gumdrop for auction house winnings and such?\n    const extra = claimIntegration === \"edition\"\n      ? [...new BN(claimant.edition).toArray(\"le\", 8)]\n      : []\n    leafs.push(Buffer.from(\n      [...new BN(idx).toArray(\"le\", 8),\n       ...claimant.secret.toBuffer(),\n       ...claimant.seed.toBuffer(),\n       ...new BN(claimant.amount).toArray(\"le\", 8),\n       ...extra\n      ]\n    ));\n  }\n\n  const tree = new MerkleTree(leafs);\n  const root = tree.getRoot();\n\n  const [distributor, dbump] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"MerkleDistributor\"),\n      baseKey.toBuffer(),\n    ],\n    GUMDROP_DISTRIBUTOR_ID);\n\n  for (let idx = 0; idx < claimants.length; ++idx) {\n    const proof = tree.getProof(idx);\n    const verified = tree.verifyProof(idx, proof, root);\n\n    if (!verified) {\n      throw new Error(\"Gumdrop merkle tree verification failed\");\n    }\n\n    const claimant = claimants[idx];\n    const params = [\n      `distributor=${distributor}`,\n      `handle=${encodeURIComponent(claimant.handle)}`,\n      `amount=${claimant.amount}`,\n      `index=${idx}`,\n      `proof=${proof.map(b => bs58.encode(b))}`,\n      ...extraParams,\n    ];\n    if (needsPin) {\n      params.push(`pin=${claimant.pin.toNumber()}`);\n    } else {\n      params.push(`pin=NA`);\n    }\n    if (claimIntegration === \"transfer\") {\n      params.push(`tokenAcc=${claimInfo.source}`);\n    } else if (claimIntegration === \"candy\") {\n      params.push(`config=${claimInfo.config}`);\n      params.push(`uuid=${claimInfo.uuid}`);\n    } else {\n      params.push(`master=${claimInfo.masterMint.key}`);\n      params.push(`edition=${claimant.edition}`);\n    }\n    const query = params.join(\"&\");\n\n    claimant.url = `${host}/claim?${query}`;\n  }\n\n  // initial merkle-distributor state\n  const instructions = Array<TransactionInstruction>();\n  instructions.push(new TransactionInstruction({\n      programId: GUMDROP_DISTRIBUTOR_ID,\n      keys: [\n          { pubkey: baseKey                 , isSigner: true  , isWritable: false } ,\n          { pubkey: distributor             , isSigner: false , isWritable: true  } ,\n          { pubkey: walletKey               , isSigner: true  , isWritable: false } ,\n          { pubkey: SystemProgram.programId , isSigner: false , isWritable: false } ,\n      ],\n      data: Buffer.from([\n        ...Buffer.from(sha256.digest(\"global:new_distributor\")).slice(0, 8),\n        ...new BN(dbump).toArray(\"le\", 1),\n        ...root,\n        ...temporalSigner.toBuffer(),\n      ])\n  }));\n\n  if (claimIntegration === \"transfer\") {\n    instructions.push(Token.createApproveInstruction(\n      TOKEN_PROGRAM_ID,\n      claimInfo.source,\n      distributor,\n      walletKey,\n      [],\n      claimInfo.total\n    ));\n  } else if (claimIntegration === \"candy\") {\n    const [distributorWalletKey, ] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"Wallet\"),\n        distributor.toBuffer(),\n      ],\n      GUMDROP_DISTRIBUTOR_ID\n    );\n\n    instructions.push(new TransactionInstruction({\n        programId: CANDY_MACHINE_ID,\n        keys: [\n            { pubkey: claimInfo.candyMachineKey,isSigner: false , isWritable: true  } ,\n            { pubkey: walletKey               , isSigner: true  , isWritable: false } ,\n        ],\n        data: Buffer.from([\n          ...Buffer.from(sha256.digest(\"global:update_authority\")).slice(0, 8),\n          ...new BN(1).toArray(\"le\", 1),  // optional exists...\n          ...distributorWalletKey.toBuffer(),\n        ])\n    }));\n  } else if (claimIntegration === \"edition\") {\n    // transfer master edition to distributor\n    const [distributorTokenKey, ] = await PublicKey.findProgramAddress(\n      [\n        distributor.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        claimInfo.masterMint.key.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    );\n\n    instructions.push(Token.createAssociatedTokenAccountInstruction(\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        claimInfo.masterMint.key,\n        distributorTokenKey,\n        distributor,\n        walletKey,\n      ));\n\n    instructions.push(Token.createTransferInstruction(\n        TOKEN_PROGRAM_ID,\n        claimInfo.masterTokenAccount,\n        distributorTokenKey,\n        walletKey,\n        [],\n        1\n      ));\n  }\n\n  return instructions;\n}\n\nexport const closeGumdrop = async (\n  connection : RPCConnection,\n  walletKey : PublicKey,\n  base : Keypair,\n  claimMethod : string,\n  transferMint : string,\n  candyConfig : string,\n  candyUuid : string,\n  masterMint : string,\n) : Promise<Array<TransactionInstruction>> => {\n  const [distributorKey, dbump] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"MerkleDistributor\"),\n      base.publicKey.toBuffer(),\n    ],\n    GUMDROP_DISTRIBUTOR_ID);\n\n  const [distributorWalletKey, wbump] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"Wallet\"),\n      distributorKey.toBuffer(),\n    ],\n    GUMDROP_DISTRIBUTOR_ID\n  );\n\n  let extraKeys;\n  const instructions = Array<TransactionInstruction>();\n\n  if (claimMethod === \"transfer\") {\n    const mint = await getMintInfo(connection, transferMint);\n    const source = await getCreatorTokenAccount(\n      walletKey, connection, mint.key, 0\n    );\n    // distributor is about to be closed anyway so this is redundant but...\n    instructions.push(Token.createRevokeInstruction(\n      TOKEN_PROGRAM_ID,\n      source,\n      walletKey,\n      [],\n    ));\n  }\n\n  if (claimMethod === \"candy\") {\n    const configKey = await getCandyConfig(connection, candyConfig);\n    const [candyMachineKey, ] = await getCandyMachineAddress(\n      configKey, candyUuid);\n\n   extraKeys = [\n          { pubkey: candyMachineKey         , isSigner: false , isWritable: true  } ,\n          { pubkey: CANDY_MACHINE_ID        , isSigner: false , isWritable: false } ,\n    ];\n  } else {\n    extraKeys = [];\n  }\n\n  if (claimMethod === \"edition\") {\n    let masterMintKey: PublicKey;\n    try {\n      masterMintKey = new PublicKey(masterMint);\n    } catch (err) {\n      throw new Error(`Invalid mint key ${err}`);\n    }\n    const [distributorTokenKey, ] = await PublicKey.findProgramAddress(\n      [\n        distributorKey.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        masterMintKey.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    );\n\n    const [walletTokenKey, ] = await PublicKey.findProgramAddress(\n      [\n        walletKey.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        masterMintKey.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    );\n\n    instructions.push(new TransactionInstruction({\n        programId: GUMDROP_DISTRIBUTOR_ID,\n        keys: [\n            { pubkey: base.publicKey          , isSigner: true  , isWritable: false } ,\n            { pubkey: distributorKey          , isSigner: false , isWritable: false } ,\n            { pubkey: distributorTokenKey     , isSigner: false , isWritable: true  } ,\n            { pubkey: walletTokenKey          , isSigner: false , isWritable: true  } ,\n            { pubkey: walletKey               , isSigner: false , isWritable: true  } ,\n            { pubkey: SystemProgram.programId , isSigner: false , isWritable: false } ,\n            { pubkey: TOKEN_PROGRAM_ID        , isSigner: false , isWritable: false } ,\n        ],\n        data: Buffer.from([\n          ...Buffer.from(sha256.digest(\"global:close_distributor_token_account\")).slice(0, 8),\n          ...new BN(dbump).toArray(\"le\", 1),\n        ])\n    }));\n  }\n\n  instructions.push(new TransactionInstruction({\n      programId: GUMDROP_DISTRIBUTOR_ID,\n      keys: [\n          { pubkey: base.publicKey          , isSigner: true  , isWritable: false } ,\n          { pubkey: distributorKey          , isSigner: false , isWritable: true  } ,\n          { pubkey: distributorWalletKey    , isSigner: false , isWritable: true  } ,\n          { pubkey: walletKey               , isSigner: true  , isWritable: true  } ,\n          { pubkey: SystemProgram.programId , isSigner: false , isWritable: false } ,\n          { pubkey: TOKEN_PROGRAM_ID        , isSigner: false , isWritable: false } ,\n          ...extraKeys,\n      ],\n      data: Buffer.from([\n        ...Buffer.from(sha256.digest(\"global:close_distributor\")).slice(0, 8),\n        ...new BN(dbump).toArray(\"le\", 1),\n        ...new BN(wbump).toArray(\"le\", 1),\n      ])\n  }));\n\n  return instructions;\n}\n","import {\n  Blockhash,\n  Commitment,\n  Connection,\n  FeeCalculator,\n  Keypair,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport { sleep } from \"../utils/utils\";\nimport log from 'loglevel';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const DEFAULT_TIMEOUT = 15000;\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport const envFor = (\n  connection: Connection\n) : string => {\n  const endpoint = (connection as any)._rpcEndpoint;\n  const regex = /https:\\/\\/api.([^.]*).solana.com/;\n  const match = endpoint.match(regex);\n  if (match[1]) {\n    return match[1];\n  }\n  return \"mainnet-beta\";\n}\n\nexport const explorerLinkFor = (\n  txid: TransactionSignature,\n  connection: Connection\n) : string => {\n  return `https://explorer.solana.com/tx/${txid}?cluster=${envFor(connection)}`;\n}\n\nexport const sendTransactionWithRetryWithKeypair = async (\n  connection: Connection,\n  wallet: Keypair,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n) => {\n  const transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.sign(...[wallet, ...signers]);\n  } else {\n    transaction.sign(wallet);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  log.debug('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'confirmed',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      log.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err) {\n    log.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {\n      log.error('Simulate Transaction error', e);\n    }\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  log.debug('Latency (ms)', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nexport async function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  // eslint-disable-next-line no-async-promise-executor\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      log.warn('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            log.warn('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            log.debug('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      log.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          console.log(explorerLinkFor(txid, connection));\n          if (!done) {\n            if (!status) {\n              log.debug('REST null result for', txid, status);\n            } else if (status.err) {\n              log.error('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              log.error('REST no confirmations for', txid, status);\n            } else {\n              log.debug('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            log.error('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  log.debug('Returning status', status);\n  return status;\n}\n","import { useLocalStorageState } from \"../utils/utils\";\nimport {\n  Keypair,\n  Commitment,\n  Connection,\n  Transaction,\n  TransactionInstruction,\n  Blockhash,\n  FeeCalculator,\n} from \"@solana/web3.js\";\nimport React, { useContext, useEffect, useMemo, useState } from \"react\";\nimport {\n  sendSignedTransaction,\n} from \"../utils/transactions\";\nimport {\n  TokenInfo,\n  TokenListProvider,\n  ENV as ChainId,\n} from \"@solana/spl-token-registry\";\nimport { WalletSigner } from \"./WalletContext/WalletContext\";\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport type ENV = \"mainnet-beta\" | \"testnet\" | \"devnet\" | \"localnet\";\n\nexport const ENDPOINTS = [\n  {\n    name: \"mainnet-beta\" as ENV,\n    endpoint: \"https://api.mainnet-beta.solana.com\",\n    ChainId: ChainId.MainnetBeta,\n  },\n  {\n    name: \"devnet\" as ENV,\n    endpoint: \"https://api.devnet.solana.com\",\n    ChainId: ChainId.Devnet,\n  },\n];\n\nconst DEFAULT = ENDPOINTS[0].endpoint;\n\ninterface ConnectionConfig {\n  connection: Connection;\n  endpoint: string;\n  env: ENV;\n  setEndpoint: (val: string) => void;\n  tokens: TokenInfo[];\n  tokenMap: Map<string, TokenInfo>;\n}\n\nconst ConnectionContext = React.createContext<ConnectionConfig>({\n  endpoint: DEFAULT,\n  setEndpoint: () => {},\n  connection: new Connection(DEFAULT, \"recent\"),\n  env: ENDPOINTS[0].name,\n  tokens: [],\n  tokenMap: new Map<string, TokenInfo>(),\n});\n\nexport function ConnectionProvider({ children = undefined as any }) {\n  const [endpoint, setEndpoint] = useLocalStorageState(\n    \"connectionEndpoint\",\n    ENDPOINTS[0].endpoint\n  );\n\n  const connection = useMemo(\n    () => new Connection(endpoint, \"recent\"),\n    [endpoint]\n  );\n\n  const env =\n    ENDPOINTS.find((end) => end.endpoint === endpoint)?.name ||\n    ENDPOINTS[0].name;\n\n  const [tokens, setTokens] = useState<TokenInfo[]>([]);\n  const [tokenMap, setTokenMap] = useState<Map<string, TokenInfo>>(new Map());\n  useEffect(() => {\n    // fetch token files\n    new TokenListProvider().resolve().then((container) => {\n      const list = container\n        .excludeByTag(\"nft\")\n        .filterByChainId(\n          ENDPOINTS.find((end) => end.endpoint === endpoint)?.ChainId ||\n            ChainId.MainnetBeta\n        )\n        .getList();\n\n      const knownMints = [...list].reduce((map, item) => {\n        map.set(item.address, item);\n        return map;\n      }, new Map<string, TokenInfo>());\n\n      setTokenMap(knownMints);\n      setTokens(list);\n    });\n  }, [env, endpoint]);\n\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n  // This is a hack to prevent the list from every getting empty\n  useEffect(() => {\n    const id = connection.onAccountChange(\n      Keypair.generate().publicKey,\n      () => {}\n    );\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = connection.onSlotChange(() => null);\n    return () => {\n      connection.removeSlotChangeListener(id);\n    };\n  }, [connection]);\n\n  return (\n    <ConnectionContext.Provider\n      value={{\n        endpoint,\n        setEndpoint,\n        connection,\n        tokens,\n        tokenMap,\n        env,\n      }}\n    >\n      {children}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport function useConnection() {\n  return useContext(ConnectionContext).connection as Connection;\n}\n\nexport function useConnectionConfig() {\n  const context = useContext(ConnectionContext);\n  return {\n    endpoint: context.endpoint,\n    setEndpoint: context.setEndpoint,\n    env: context.env,\n    tokens: context.tokens,\n    tokenMap: context.tokenMap,\n  };\n}\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: WalletSigner,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void\n) : Promise<string| { txid: string; slot: number }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    try {\n      transaction = await wallet.signTransaction(transaction);\n    } catch {\n      return \"Failed to sign transaction\";\n    }\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n  console.log(\"About to send\");\n  try {\n    const { txid, slot } = await sendSignedTransaction({\n      connection,\n      signedTransaction: transaction,\n    });\n\n    return { txid, slot };\n  } catch (error) {\n    console.error(error);\n    return \"See console logs\";\n  }\n};\n\n","import { keccak_256 } from \"js-sha3\";\n\nexport class MerkleTree {\n  leafs: Array<Buffer>;\n  layers: Array<Array<Buffer>>;\n\n  constructor(leafs : Array<Buffer>) {\n    this.leafs = leafs.slice();\n    this.layers = [];\n\n    let hashes = this.leafs.map(MerkleTree.nodeHash);\n    while (hashes.length > 0) {\n      console.log(\"Hashes\", this.layers.length, hashes);\n      this.layers.push(hashes.slice());\n      if (hashes.length === 1) break;\n      hashes = hashes.reduce((acc, cur, idx, arr) => {\n        if (idx % 2 === 0) {\n          const nxt = arr[idx + 1];\n          acc.push(MerkleTree.internalHash(cur, nxt));\n        }\n        return acc;\n      }, Array<Buffer>());\n    }\n  }\n\n  static nodeHash(\n    data : Buffer,\n  ) : Buffer {\n    return Buffer.from(keccak_256.digest([0x00, ...data]));\n  }\n\n\n  static internalHash(\n    first : Buffer,\n    second : Buffer | undefined,\n  ) : Buffer {\n    if (!second) return first;\n    const [fst, snd] = [first, second].sort(Buffer.compare)\n    return Buffer.from(\n      keccak_256.digest([0x01, ...fst, ...snd])\n    );\n  }\n\n  getRoot() : Buffer {\n    return this.layers[this.layers.length - 1][0];\n  }\n\n  getProof(idx : number) : Buffer[] {\n    return this.layers.reduce((proof, layer) => {\n      const sibling = idx ^ 1;\n      if (sibling < layer.length) {\n        proof.push(layer[sibling]);\n      }\n\n      idx = Math.floor(idx / 2);\n\n      return proof;\n    }, []);\n  }\n\n  getHexRoot(): string {\n    return this.getRoot().toString(\"hex\");\n  }\n\n  getHexProof(idx : number) : string[] {\n    return this.getProof(idx).map((el) => el.toString(\"hex\"));\n  }\n\n  verifyProof(\n    idx : number,\n    proof : Buffer[],\n    root : Buffer\n  ): boolean {\n    let pair = MerkleTree.nodeHash(this.leafs[idx]);\n    for (const item of proof) {\n      pair = MerkleTree.internalHash(pair, item);\n    }\n\n    return pair.equals(root);\n  }\n\n  static verifyClaim(\n    leaf : Buffer,\n    proof : Buffer[],\n    root : Buffer\n  ): boolean {\n    let pair = MerkleTree.nodeHash(leaf);\n    for (const item of proof) {\n      pair = MerkleTree.internalHash(pair, item);\n    }\n\n    return pair.equals(root);\n  }\n\n}\n","import {\n  TOKEN_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  BPF_UPGRADE_LOADER_ID,\n  SYSTEM,\n  MEMO_ID,\n} from './ids';\n\nexport const setProgramIds = async () => {};\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n    associatedToken: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    bpf_upgrade_loader: BPF_UPGRADE_LOADER_ID,\n    system: SYSTEM,\n    memo: MEMO_ID,\n    // store: STORE,\n  };\n};\n","import React from \"react\";\nimport { Modal } from \"antd\";\n\nimport \"./index.css\";\n\nexport const DefaultModal = (props: any) => {\n  const { children, closeIcon, bodyStyle, width, style, ...rest } = props;\n\n  return (\n    <Modal\n      style={{ background: \"transparent\", borderRadius: 16 }}\n      bodyStyle={{\n        background: \"#333333\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        ...bodyStyle,\n      }}\n      footer={null}\n      width={\n        width || 400\n      }\n      {...rest}\n    >\n      {children}\n    </Modal>\n  );\n};\n","import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport { useConnection } from './ConnectionContext';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport { AccountLayout, MintInfo, MintLayout, u64 } from '@solana/spl-token';\nimport { TokenAccount } from '../models';\nimport { chunks } from '../utils/utils';\nimport { EventEmitter } from '../utils/eventEmitter';\nimport { StringPublicKey, WRAPPED_SOL_MINT } from '../utils/ids';\nimport { programIds } from '../utils/programIds';\n\nconst AccountsContext = React.createContext<any>(null);\n\nconst pendingCalls = new Map<string, Promise<ParsedAccountBase>>();\nconst genericCache = new Map<string, ParsedAccountBase>();\nconst pendingMintCalls = new Map<string, Promise<MintInfo>>();\nconst mintCache = new Map<string, MintInfo>();\n\nexport interface ParsedAccountBase {\n  pubkey: StringPublicKey;\n  account: AccountInfo<Buffer>;\n  info: any; // TODO: change to unknown\n}\n\nexport type AccountParser = (\n  pubkey: StringPublicKey,\n  data: AccountInfo<Buffer>,\n) => ParsedAccountBase | undefined;\n\nexport interface ParsedAccount<T> extends ParsedAccountBase {\n  info: T;\n}\n\nconst getMintInfo = async (connection: Connection, pubKey: PublicKey) => {\n  const info = await connection.getAccountInfo(pubKey);\n  if (info === null) {\n    throw new Error('Failed to find mint account');\n  }\n\n  const data = Buffer.from(info.data);\n\n  return deserializeMint(data);\n};\n\nexport const MintParser = (pubKey: string, info: AccountInfo<Buffer>) => {\n  const buffer = Buffer.from(info.data);\n\n  const data = deserializeMint(buffer);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: data,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const TokenAccountParser = (\n  pubKey: string,\n  info: AccountInfo<Buffer>,\n) => {\n  // Sometimes a wrapped sol account gets closed, goes to 0 length,\n  // triggers an update over wss which triggers this guy to get called\n  // since your UI already logged that pubkey as a token account. Check for length.\n  if (info.data.length > 0) {\n    const buffer = Buffer.from(info.data);\n    const data = deserializeAccount(buffer);\n\n    const details = {\n      pubkey: pubKey,\n      account: {\n        ...info,\n      },\n      info: data,\n    } as TokenAccount;\n\n    return details;\n  }\n};\n\nexport const GenericAccountParser = (\n  pubKey: string,\n  info: AccountInfo<Buffer>,\n) => {\n  const buffer = Buffer.from(info.data);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: buffer,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const keyToAccountParser = new Map<string, AccountParser>();\n\nexport const cache = {\n  emitter: new EventEmitter(),\n  query: async (\n    connection: Connection,\n    pubKey: string | PublicKey,\n    parser?: AccountParser,\n  ) => {\n    let id: PublicKey;\n    if (typeof pubKey === 'string') {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n\n    let account = genericCache.get(address);\n    if (account) {\n      return account;\n    }\n\n    let query = pendingCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    // TODO: refactor to use multiple accounts query with flush like behavior\n    query = connection.getAccountInfo(id).then(data => {\n      if (!data) {\n        throw new Error('Account not found');\n      }\n\n      return cache.add(id, data, parser);\n    }) as Promise<TokenAccount>;\n    pendingCalls.set(address, query as any);\n\n    return query;\n  },\n  add: (\n    id: PublicKey | string,\n    obj: AccountInfo<Buffer>,\n    parser?: AccountParser,\n    isActive?: boolean | undefined | ((parsed: any) => boolean),\n  ) => {\n    const address = typeof id === 'string' ? id : id?.toBase58();\n    const deserialize = parser ? parser : keyToAccountParser.get(address);\n    if (!deserialize) {\n      throw new Error(\n        'Deserializer needs to be registered or passed as a parameter',\n      );\n    }\n\n    cache.registerParser(id, deserialize);\n    pendingCalls.delete(address);\n    const account = deserialize(address, obj);\n    if (!account) {\n      return;\n    }\n\n    if (isActive === undefined) isActive = true;\n    else if (isActive instanceof Function) isActive = isActive(account);\n\n    const isNew = !genericCache.has(address);\n\n    genericCache.set(address, account);\n    cache.emitter.raiseCacheUpdated(address, isNew, deserialize, isActive);\n    return account;\n  },\n  get: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== 'string') {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return genericCache.get(key);\n  },\n  delete: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== 'string') {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    if (genericCache.get(key)) {\n      genericCache.delete(key);\n      cache.emitter.raiseCacheDeleted(key);\n      return true;\n    }\n    return false;\n  },\n\n  byParser: (parser: AccountParser) => {\n    const result: string[] = [];\n    for (const id of keyToAccountParser.keys()) {\n      if (keyToAccountParser.get(id) === parser) {\n        result.push(id);\n      }\n    }\n\n    return result;\n  },\n  registerParser: (pubkey: PublicKey | string, parser: AccountParser) => {\n    if (pubkey) {\n      const address = typeof pubkey === 'string' ? pubkey : pubkey?.toBase58();\n      keyToAccountParser.set(address, parser);\n    }\n\n    return pubkey;\n  },\n  queryMint: async (connection: Connection, pubKey: string | PublicKey) => {\n    let id: PublicKey;\n    if (typeof pubKey === 'string') {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n    let mint = mintCache.get(address);\n    if (mint) {\n      return mint;\n    }\n\n    let query = pendingMintCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    query = getMintInfo(connection, id).then(data => {\n      pendingMintCalls.delete(address);\n\n      mintCache.set(address, data);\n      return data;\n    }) as Promise<MintInfo>;\n    pendingMintCalls.set(address, query as any);\n\n    return query;\n  },\n  getMint: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== 'string') {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return mintCache.get(key);\n  },\n  addMint: (pubKey: PublicKey, obj: AccountInfo<Buffer>) => {\n    const mint = deserializeMint(obj.data);\n    const id = pubKey.toBase58();\n    mintCache.set(id, mint);\n    return mint;\n  },\n};\n\nexport const useAccountsContext = () => {\n  const context = useContext(AccountsContext);\n\n  return context;\n};\n\nfunction wrapNativeAccount(\n  pubkey: string,\n  account?: AccountInfo<Buffer>,\n): TokenAccount | undefined {\n  if (!account) {\n    return undefined;\n  }\n\n  const key = new PublicKey(pubkey);\n\n  return {\n    pubkey: pubkey,\n    account,\n    info: {\n      address: key,\n      mint: WRAPPED_SOL_MINT,\n      owner: key,\n      amount: new u64(account.lamports),\n      delegate: null,\n      delegatedAmount: new u64(0),\n      isInitialized: true,\n      isFrozen: false,\n      isNative: true,\n      rentExemptReserve: null,\n      closeAuthority: null,\n    },\n  };\n}\n\nexport const getCachedAccount = (\n  predicate: (account: TokenAccount) => boolean,\n) => {\n  for (const account of genericCache.values()) {\n    if (predicate(account)) {\n      return account as TokenAccount;\n    }\n  }\n};\n\nconst UseNativeAccount = () => {\n  const connection = useConnection();\n  const { publicKey } = useWallet();\n\n  const [nativeAccount, setNativeAccount] = useState<AccountInfo<Buffer>>();\n\n  const updateCache = useCallback(\n    account => {\n      if (publicKey) {\n        const wrapped = wrapNativeAccount(publicKey.toBase58(), account);\n        if (wrapped !== undefined) {\n          const id = publicKey.toBase58();\n          cache.registerParser(id, TokenAccountParser);\n          genericCache.set(id, wrapped as TokenAccount);\n          cache.emitter.raiseCacheUpdated(id, false, TokenAccountParser, true);\n        }\n      }\n    },\n    [publicKey],\n  );\n\n  useEffect(() => {\n    let subId = 0;\n    const updateAccount = (account: AccountInfo<Buffer> | null) => {\n      if (account) {\n        updateCache(account);\n        setNativeAccount(account);\n      }\n    };\n\n    (async () => {\n      if (!connection || !publicKey) {\n        return;\n      }\n\n      try {\n        const account = await connection.getAccountInfo(publicKey);\n        updateAccount(account);\n      } catch {\n        return;\n      }\n\n      subId = connection.onAccountChange(publicKey, updateAccount);\n    })();\n\n    return () => {\n      if (subId) {\n        connection.removeAccountChangeListener(subId);\n      }\n    };\n  }, [setNativeAccount, publicKey, connection, updateCache]);\n\n  return { nativeAccount };\n};\n\nconst PRECACHED_OWNERS = new Set<string>();\nconst precacheUserTokenAccounts = async (\n  connection: Connection,\n  owner?: PublicKey,\n) => {\n  if (!owner) {\n    return;\n  }\n\n  // used for filtering account updates over websocket\n  PRECACHED_OWNERS.add(owner.toBase58());\n\n  // user accounts are updated via ws subscription\n  const accounts = await connection.getTokenAccountsByOwner(owner, {\n    programId: programIds().token,\n  });\n\n  accounts.value.forEach(info => {\n    cache.add(info.pubkey.toBase58(), info.account, TokenAccountParser);\n  });\n};\n\nexport function AccountsProvider({ children = null as any }) {\n  const connection = useConnection();\n  const { publicKey } = useWallet();\n  const [tokenAccounts, setTokenAccounts] = useState<TokenAccount[]>([]);\n  const [userAccounts, setUserAccounts] = useState<TokenAccount[]>([]);\n  const { nativeAccount } = UseNativeAccount();\n  const walletKey = publicKey?.toBase58();\n\n  const selectUserAccounts = useCallback(() => {\n    return cache\n      .byParser(TokenAccountParser)\n      .map(id => cache.get(id))\n      .filter(a => a && a.info.owner.toBase58() === walletKey)\n      .map(a => a as TokenAccount);\n  }, [walletKey]);\n\n  useEffect(() => {\n    const accounts = selectUserAccounts().filter(\n      a => a !== undefined,\n    ) as TokenAccount[];\n    setUserAccounts(accounts);\n  }, [nativeAccount, tokenAccounts, selectUserAccounts]);\n\n  useEffect(() => {\n    const subs: number[] = [];\n    cache.emitter.onCache(args => {\n      if (args.isNew && args.isActive) {\n        let id = args.id;\n        let deserialize = args.parser;\n        connection.onAccountChange(new PublicKey(id), info => {\n          cache.add(id, info, deserialize);\n        });\n      }\n    });\n\n    return () => {\n      subs.forEach(id => connection.removeAccountChangeListener(id));\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    if (!connection || !publicKey) {\n      setTokenAccounts([]);\n    } else {\n      precacheUserTokenAccounts(connection, publicKey).then(() => {\n        setTokenAccounts(selectUserAccounts());\n      });\n\n      // This can return different types of accounts: token-account, mint, multisig\n      // TODO: web3.js expose ability to filter.\n      // this should use only filter syntax to only get accounts that are owned by user\n      const tokenSubID = connection.onProgramAccountChange(\n        programIds().token,\n        info => {\n          // TODO: fix type in web3.js\n          const id = info.accountId as unknown as string;\n          // TODO: do we need a better way to identify layout (maybe a enum identifing type?)\n          if (info.accountInfo.data.length === AccountLayout.span) {\n            const data = deserializeAccount(info.accountInfo.data);\n\n            if (PRECACHED_OWNERS.has(data.owner.toBase58())) {\n              cache.add(id, info.accountInfo, TokenAccountParser);\n              setTokenAccounts(selectUserAccounts());\n            }\n          }\n        },\n        'singleGossip',\n      );\n\n      return () => {\n        connection.removeProgramAccountChangeListener(tokenSubID);\n      };\n    }\n  }, [connection, publicKey, selectUserAccounts]);\n\n  return (\n    <AccountsContext.Provider\n      value={{\n        userAccounts,\n        nativeAccount,\n      }}\n    >\n      {children}\n    </AccountsContext.Provider>\n  );\n}\n\nexport function useNativeAccount() {\n  const context = useContext(AccountsContext);\n  return {\n    account: context.nativeAccount as AccountInfo<Buffer>,\n  };\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const result = await Promise.all(\n    chunks(keys, 99).map(chunk =>\n      getMultipleAccountsCore(connection, chunk, commitment),\n    ),\n  );\n\n  const array = result\n    .map(\n      a =>\n        a.array.map(acc => {\n          if (!acc) {\n            return undefined;\n          }\n\n          const { data, ...rest } = acc;\n          const obj = {\n            ...rest,\n            data: Buffer.from(data[0], 'base64'),\n          } as AccountInfo<Buffer>;\n          return obj;\n        }) as AccountInfo<Buffer>[],\n    )\n    .flat();\n  return { keys, array };\n};\n\nconst getMultipleAccountsCore = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const args = connection._buildArgs([keys], commitment, 'base64');\n\n  const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\n  if (unsafeRes.error) {\n    throw new Error(\n      'failed to get info about account ' + unsafeRes.error.message,\n    );\n  }\n\n  if (unsafeRes.result.value) {\n    const array = unsafeRes.result.value as AccountInfo<string[]>[];\n    return { keys, array };\n  }\n\n  // TODO: fix\n  throw new Error();\n};\n\nexport function useMint(key?: string | PublicKey) {\n  const connection = useConnection();\n  const [mint, setMint] = useState<MintInfo>();\n\n  const id = typeof key === 'string' ? key : key?.toBase58();\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n\n    cache\n      .query(connection, id, MintParser)\n      .then(acc => setMint(acc.info as any))\n      .catch(err => console.log(err));\n\n    const dispose = cache.emitter.onCache(e => {\n      const event = e;\n      if (event.id === id) {\n        cache\n          .query(connection, id, MintParser)\n          .then(mint => setMint(mint.info as any));\n      }\n    });\n    return () => {\n      dispose();\n    };\n  }, [connection, id]);\n\n  return mint;\n}\n\nexport function useAccount(pubKey?: PublicKey) {\n  const connection = useConnection();\n  const [account, setAccount] = useState<TokenAccount>();\n\n  const key = pubKey?.toBase58();\n  useEffect(() => {\n    const query = async () => {\n      try {\n        if (!key) {\n          return;\n        }\n\n        const acc = await cache\n          .query(connection, key, TokenAccountParser)\n          .catch(err => console.log(err));\n        if (acc) {\n          setAccount(acc);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    query();\n\n    const dispose = cache.emitter.onCache(e => {\n      const event = e;\n      if (event.id === key) {\n        query();\n      }\n    });\n    return () => {\n      dispose();\n    };\n  }, [connection, key]);\n\n  return account;\n}\n\n// TODO: expose in spl package\nexport const deserializeAccount = (data: Buffer) => {\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n\n// TODO: expose in spl package\nexport const deserializeMint = (data: Buffer) => {\n  if (data.length !== MintLayout.span) {\n    throw new Error('Not a valid Mint');\n  }\n\n  const mintInfo = MintLayout.decode(data);\n\n  if (mintInfo.mintAuthorityOption === 0) {\n    mintInfo.mintAuthority = null;\n  } else {\n    mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\n  }\n\n  mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n  mintInfo.isInitialized = mintInfo.isInitialized !== 0;\n\n  if (mintInfo.freezeAuthorityOption === 0) {\n    mintInfo.freezeAuthority = null;\n  } else {\n    mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n  }\n\n  return mintInfo as MintInfo;\n};\n","import { EventEmitter as Emitter } from 'eventemitter3';\n\nexport class CacheUpdateEvent {\n  static type = 'CacheUpdate';\n  id: string;\n  parser: any;\n  isNew: boolean;\n  isActive: boolean;\n  constructor(id: string, isNew: boolean, parser: any, isActive: boolean) {\n    this.id = id;\n    this.parser = parser;\n    this.isNew = isNew;\n    this.isActive = isActive;\n  }\n}\n\nexport class CacheDeleteEvent {\n  static type = 'CacheUpdate';\n  id: string;\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport class MarketUpdateEvent {\n  static type = 'MarketUpdate';\n  ids: Set<string>;\n  constructor(ids: Set<string>) {\n    this.ids = ids;\n  }\n}\n\nexport class EventEmitter {\n  private emitter = new Emitter();\n\n  onMarket(callback: (args: MarketUpdateEvent) => void) {\n    this.emitter.on(MarketUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(MarketUpdateEvent.type, callback);\n  }\n\n  onCache(callback: (args: CacheUpdateEvent) => void) {\n    this.emitter.on(CacheUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(CacheUpdateEvent.type, callback);\n  }\n\n  raiseMarketUpdated(ids: Set<string>) {\n    this.emitter.emit(MarketUpdateEvent.type, new MarketUpdateEvent(ids));\n  }\n\n  raiseCacheUpdated(\n    id: string,\n    isNew: boolean,\n    parser: any,\n    isActive: boolean,\n  ) {\n    this.emitter.emit(\n      CacheUpdateEvent.type,\n      new CacheUpdateEvent(id, isNew, parser, isActive),\n    );\n  }\n\n  raiseCacheDeleted(id: string) {\n    this.emitter.emit(CacheDeleteEvent.type, new CacheDeleteEvent(id));\n  }\n}\n","import React from \"react\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { ENDPOINTS, useColorMode, useConnectionConfig } from \"../../contexts\";\nimport { notify, shortenAddress } from \"../../utils\";\nimport { CopyOutlined } from \"@ant-design/icons\";\nimport { ModalEnum, useModal, useWalletModal } from \"../../contexts\";\nimport {\n  Box,\n  Button,\n  Collapse,\n  Divider,\n  Drawer,\n  FormControl,\n  Link,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemButton,\n  MenuItem,\n  Select,\n  Stack,\n} from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\n\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\nimport Brightness4Icon from \"@mui/icons-material/Brightness4\";\nimport Brightness7Icon from \"@mui/icons-material/Brightness7\";\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport ExpandMore from '@mui/icons-material/ExpandMore';\n\nexport const Settings = ({ narrow }) => {\n  const { disconnect, publicKey } = useWallet();\n  const { setEndpoint, env, endpoint } = useConnectionConfig();\n  const { setVisible } = useWalletModal();\n  const open = React.useCallback(() => setVisible(true), [setVisible]);\n  const { setModal } = useModal();\n  const theme = useTheme();\n  const colorModeCtx = useColorMode();\n\n  const handleConnect = React.useCallback(() => {\n    setModal(ModalEnum.WALLET);\n    setVisible(true);\n  }, [setModal, setVisible]);\n\n  const connectedActions = [\n    {\n      click: async () => {\n        if (publicKey) {\n          await navigator.clipboard.writeText(publicKey.toBase58());\n          notify({\n            message: \"Wallet update\",\n            description: \"Address copied to clipboard\",\n          });\n        }\n      },\n      innerNarrow: () => (\n        `Copy Address (${publicKey && shortenAddress(publicKey.toBase58())})`\n      ),\n      inner: () => (\n        <React.Fragment>\n          <CopyOutlined />\n          {publicKey && shortenAddress(publicKey.toBase58())}\n        </React.Fragment>\n      ),\n    },\n    {\n      click: open,\n      inner: () => \"Change\\u00A0Wallet\",\n    },\n    {\n      click: () => disconnect().catch(),\n      inner: () => `Disconnect\\u00A0(${env})`,\n      expandedExtra: { // these are interepreted as props. TODO: specific types\n        color: \"error\" as any,\n        variant: \"contained\" as any,\n      }\n    },\n  ];\n\n  const [drawerOpen, setDrawerOpen] = React.useState(false);\n  const [envCollapseOpen, setEnvCollapseOpen] = React.useState(false);\n\n  const hackySkipSet = \"hackySkipSet\";\n  const toggleDrawer = (open) => (event) => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n\n    if (event.target.classList.contains(hackySkipSet)) {\n      return;\n    }\n\n    setDrawerOpen(open);\n  };\n\n  const drawerC = (inner) => {\n    return (\n      <React.Fragment>\n        <Button onClick={toggleDrawer(true)}>\n          <AccountBalanceWalletIcon />\n        </Button>\n        <Drawer\n          anchor=\"right\"\n          open={drawerOpen}\n          onClose={toggleDrawer(false)}\n        >\n          <Box\n            sx={{ width: 250 }}\n            role=\"presentation\"\n            onClick={toggleDrawer(false)}\n            onKeyDown={toggleDrawer(false)}\n          >\n            {inner}\n          </Box>\n        </Drawer>\n      </React.Fragment>\n    );\n  };\n\n  const themeSwitch = (\n    <Button\n      sx={{ ml: 1 }}\n      onClick={colorModeCtx.toggleColorMode}\n      color=\"inherit\"\n    >\n      {theme.palette.mode === \"dark\" ? (\n        <Brightness7Icon />\n      ) : (\n        <Brightness4Icon />\n      )}\n    </Button>\n  );\n\n  if (narrow) {\n    const listHead = (\n      <ListItem>\n        <ListItemText\n          primary=\"Wallet\"\n          primaryTypographyProps={{\n            fontSize: \"1.2rem\",\n            fontWeight: 'medium',\n            letterSpacing: 0,\n          }}\n        />\n      </ListItem>\n    );\n    return (\n      <React.Fragment>\n        {!publicKey && drawerC(\n          <List>\n            {listHead}\n            <Divider />\n            <ListItemButton\n              onClick={() => setEnvCollapseOpen(!envCollapseOpen)}\n              className={hackySkipSet}\n            >\n              Change Network\n              {envCollapseOpen ? <ExpandLess /> : <ExpandMore />}\n            </ListItemButton>\n            <Collapse in={envCollapseOpen} timeout=\"auto\" unmountOnExit>\n              <List component=\"div\" disablePadding>\n                {ENDPOINTS.map(p => (\n                  <ListItemButton\n                    selected={endpoint === p.endpoint}\n                    onClick={() => setEndpoint(p.endpoint)}\n                    key={p.name}\n                    sx={{ pl: 4 }}\n                    className={hackySkipSet}\n                  >\n                    {p.name}\n                  </ListItemButton>\n                ))}\n              </List>\n            </Collapse>\n            <ListItemButton onClick={handleConnect}>\n              Connect\n            </ListItemButton>\n          </List>\n        )}\n        {publicKey && drawerC(\n          <List>\n            {listHead}\n            <Divider />\n            {connectedActions.map((a, idx) => {\n              return (\n                <ListItemButton onClick={a.click} key={idx}>\n                  {(a.innerNarrow && a.innerNarrow()) || a.inner()}\n                </ListItemButton>\n              );\n            })}\n          </List>\n        )}\n        {themeSwitch}\n      </React.Fragment>\n    );\n  } else {\n    return (\n      <Stack\n        direction=\"row\"\n        spacing={2}\n        sx={{\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n          alignItems: \"center\",\n          marginRight: \"36px\",\n        }}\n      >\n        {!publicKey && (\n          <React.Fragment>\n            <FormControl variant=\"standard\" style={{minWidth: \"10ch\"}}>\n              <Select\n                id=\"connected-env-select\"\n                onChange={(e) => { setEndpoint(e.target.value); }}\n                value={endpoint}\n              >\n                {ENDPOINTS.map(({ name, endpoint }) => (\n                  <MenuItem key={name} value={endpoint}>{name}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <Link underline=\"none\">\n              <Button\n                variant=\"contained\"\n                onClick={handleConnect}\n              >\n                Connect\n              </Button>\n            </Link>\n          </React.Fragment>\n        )}\n        {publicKey && connectedActions.map((a, idx) => {\n            return (\n              <Button\n                key={idx}\n                variant=\"outlined\"\n                onClick={a.click}\n                {...a.expandedExtra}\n              >\n                {a.inner()}\n              </Button>\n            );\n          })\n        }\n        {themeSwitch}\n      </Stack>\n    );\n  }\n};\n","import { useTheme } from \"@mui/material\";\nimport React, { useContext } from \"react\";\n\nexport const ColorModeContext = React.createContext({});\n\nexport const ColorModeContextProvider = ({children=null as any }) => {\n  const [mode, setMode] = React.useState<'light' | 'dark'>('dark'); \n  const theme = useTheme();\n  const toggleColorMode = () => {\n    setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n  }\n  return (\n    <ColorModeContext.Provider\n      value={{\n        toggleColorMode,\n        mode,\n        theme,\n      }}\n    >\n      {children}\n    </ColorModeContext.Provider>\n  );\n};\n\nexport const useColorMode = (): any => {\n  const context = useContext(ColorModeContext);\n  return context;\n};\n","import React from 'react';\nimport { notification } from 'antd';\n// import Link from '../components/Link';\n\nexport function notify({\n  message = '',\n  description = undefined as any,\n  txid = '',\n  type = 'info',\n  placement = 'bottomLeft',\n}) {\n  if (txid) {\n    //   <Link\n    //     external\n    //     to={'https://explorer.solana.com/tx/' + txid}\n    //     style={{ color: '#0000ff' }}\n    //   >\n    //     View transaction {txid.slice(0, 8)}...{txid.slice(txid.length - 8)}\n    //   </Link>\n\n    description = <></>;\n  }\n  (notification as any)[type]({\n    message: <span style={{ color: 'black' }}>{message}</span>,\n    description: (\n      <span style={{ color: 'black', opacity: 0.5 }}>{description}</span>\n    ),\n    placement,\n    style: {\n      backgroundColor: 'white',\n    },\n  });\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { BinaryReader, BinaryWriter } from 'borsh';\nimport base58 from 'bs58';\nimport { StringPublicKey } from './ids';\n\nexport const extendBorsh = () => {\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array) as StringPublicKey;\n  };\n\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: StringPublicKey,\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\n\nextendBorsh();\n","import {\n  Coder,\n} from \"@project-serum/anchor\"\n\nconst idl = require(\"./merkle_distributor.json\");\nexport const coder = new Coder(idl);\n\n","import { PublicKey, AccountInfo } from '@solana/web3.js';\n\nexport type StringPublicKey = string;\n\nexport class LazyAccountInfoProxy<T> {\n  executable: boolean = false;\n  owner: StringPublicKey = '';\n  lamports: number = 0;\n\n  get data() {\n    //\n    return undefined as unknown as T;\n  }\n}\n\nexport interface LazyAccountInfo {\n  executable: boolean;\n  owner: StringPublicKey;\n  lamports: number;\n  data: [string, string];\n}\n\nconst PubKeysInternedMap = new Map<string, PublicKey>();\n\nexport const toPublicKey = (key: string | PublicKey) => {\n  if (typeof key !== 'string') {\n    return key;\n  }\n\n  let result = PubKeysInternedMap.get(key);\n  if (!result) {\n    result = new PublicKey(key);\n    PubKeysInternedMap.set(key, result);\n  }\n\n  return result;\n};\n\nexport interface PublicKeyStringAndAccount<T> {\n  pubkey: string;\n  account: AccountInfo<T>;\n}\n\nexport const WRAPPED_SOL_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n\nexport const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const BPF_UPGRADE_LOADER_ID = new PublicKey('BPFLoaderUpgradeab1e11111111111111111111111');\n\nexport const MEMO_ID = new PublicKey('MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr');\n\nexport const SYSTEM = new PublicKey('11111111111111111111111111111111');\n\nexport const TOKEN_METADATA_PROGRAM_ID = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n\nexport const CANDY_MACHINE_ID = new PublicKey('cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ');\n\nexport const GUMDROP_DISTRIBUTOR_ID = new PublicKey(\"gdrpGjVffourzkdDRrQmySw4aTHr8a3xmQzzxSwFD1a\");\n\nexport const GUMDROP_TEMPORAL_SIGNER = new PublicKey(\"MSv9H2sMceAzccBganUXwGq3GXgqYAstmZAbFDZYbAV\");\n\n","import React from \"react\";\nimport { RouteComponentProps, } from \"react-router-dom\";\nimport queryString from 'query-string';\n\nimport {\n  Box,\n  Button,\n  CircularProgress,\n  FormControl,\n  Link as HyperLink,\n  InputLabel,\n  MenuItem,\n  Select,\n  Stack,\n  Step,\n  StepLabel,\n  Stepper,\n  TextField,\n} from \"@mui/material\";\n\nimport {\n  useWallet,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  Connection as RPCConnection,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n  AccountLayout,\n  MintLayout,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { sha256 } from \"js-sha256\";\nimport BN from 'bn.js';\nimport * as bs58 from \"bs58\";\n\nimport {\n  useConnection,\n} from \"../contexts\";\nimport {\n  CANDY_MACHINE_ID,\n  GUMDROP_DISTRIBUTOR_ID,\n  GUMDROP_TEMPORAL_SIGNER,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  getCandyMachine,\n  getCandyMachineAddress,\n  getEdition,\n  getEditionMarkerPda,\n  getMetadata,\n  notify,\n} from \"../utils\";\nimport { MerkleTree } from \"../utils/merkleTree\";\nimport {\n  explorerLinkFor,\n  sendSignedTransaction,\n} from \"../utils/transactions\";\nimport {\n  chunk,\n} from \"../utils/claimant\";\nimport { coder } from \"../utils/merkleDistributor\";\n\nconst walletKeyOrPda = async (\n  walletKey : PublicKey,\n  handle : string,\n  pin : BN | null,\n  seed : PublicKey,\n) : Promise<[PublicKey, Array<Buffer>]> => {\n  if (pin === null) {\n    try {\n      const key = new PublicKey(handle);\n      if (!key.equals(walletKey)) {\n        throw new Error(\"Claimant wallet handle does not match connected wallet\");\n      }\n      return [key, []];\n    } catch (err) {\n      throw new Error(`Invalid claimant wallet handle ${err}`);\n    }\n  } else {\n    const seeds = [\n      seed.toBuffer(),\n      Buffer.from(handle),\n      Buffer.from(pin.toArray(\"le\", 4)),\n    ];\n\n    const [claimantPda, ] = await PublicKey.findProgramAddress(\n      [\n        seeds[0],\n        ...chunk(seeds[1], 32),\n        seeds[2],\n      ],\n      GUMDROP_DISTRIBUTOR_ID\n    );\n    return [claimantPda, seeds];\n  }\n}\n\n\nconst buildMintClaim = async (\n  connection : RPCConnection,\n  walletKey : PublicKey,\n  distributorKey : PublicKey,\n  distributorInfo : any,\n  tokenAcc : string,\n  proof : Array<Buffer>,\n  handle : string,\n  amount : number,\n  index : number,\n  pin : BN | null,\n) : Promise<[Array<TransactionInstruction>, Array<Buffer>, Array<Keypair>]> => {\n  let tokenAccKey: PublicKey;\n  try {\n    tokenAccKey = new PublicKey(tokenAcc);\n  } catch (err) {\n    throw new Error(`Invalid tokenAcc key ${err}`);\n  }\n  const distTokenAccount = await connection.getAccountInfo(tokenAccKey);\n  if (distTokenAccount === null) {\n    throw new Error(`Could not fetch distributor token account`);\n  }\n\n  const tokenAccountInfo = AccountLayout.decode(distTokenAccount.data);\n  const mint = new PublicKey(tokenAccountInfo.mint);\n\n  console.log(mint.toBase58());\n\n  const [secret, pdaSeeds] = await walletKeyOrPda(walletKey, handle, pin, mint);\n\n  // TODO: since it's in the PDA do we need it to be in the leaf?\n  const leaf = Buffer.from(\n    [...new BN(index).toArray(\"le\", 8),\n     ...secret.toBuffer(),\n     ...mint.toBuffer(),\n     ...new BN(amount).toArray(\"le\", 8),\n    ]\n  );\n\n  const matches = MerkleTree.verifyClaim(\n    leaf, proof, Buffer.from(distributorInfo.root)\n  );\n\n  if (!matches) {\n    throw new Error(\"Gumdrop merkle proof does not match\");\n  }\n\n  const [claimStatus, cbump] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"ClaimStatus\"),\n      Buffer.from(new BN(index).toArray(\"le\", 8)),\n      distributorKey.toBuffer(),\n    ],\n    GUMDROP_DISTRIBUTOR_ID\n  );\n\n  const [walletTokenKey, ] = await PublicKey.findProgramAddress(\n    [\n      walletKey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      mint.toBuffer(),\n    ],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n\n  const setup : Array<TransactionInstruction> = [];\n\n  if (await connection.getAccountInfo(walletTokenKey) === null) {\n    setup.push(Token.createAssociatedTokenAccountInstruction(\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mint,\n        walletTokenKey,\n        walletKey,\n        walletKey\n      ));\n  }\n\n  const temporalSigner = distributorInfo.temporal.equals(PublicKey.default) || secret.equals(walletKey)\n      ? walletKey : distributorInfo.temporal;\n\n  const claimAirdrop = new TransactionInstruction({\n      programId: GUMDROP_DISTRIBUTOR_ID,\n      keys: [\n          { pubkey: distributorKey          , isSigner: false , isWritable: true  } ,\n          { pubkey: claimStatus             , isSigner: false , isWritable: true  } ,\n          { pubkey: tokenAccKey             , isSigner: false , isWritable: true  } ,\n          { pubkey: walletTokenKey          , isSigner: false , isWritable: true  } ,\n          { pubkey: temporalSigner          , isSigner: true  , isWritable: false } ,\n          { pubkey: walletKey               , isSigner: true  , isWritable: false } ,  // payer\n          { pubkey: SystemProgram.programId , isSigner: false , isWritable: false } ,\n          { pubkey: TOKEN_PROGRAM_ID        , isSigner: false , isWritable: false } ,\n      ],\n      data: Buffer.from([\n        ...Buffer.from(sha256.digest(\"global:claim\")).slice(0, 8),\n        ...new BN(cbump).toArray(\"le\", 1),\n        ...new BN(index).toArray(\"le\", 8),\n        ...new BN(amount).toArray(\"le\", 8),\n        ...secret.toBuffer(),\n        ...new BN(proof.length).toArray(\"le\", 4),\n        ...Buffer.concat(proof),\n      ])\n  })\n\n  return [[...setup, claimAirdrop], pdaSeeds, []];\n}\n\nconst buildCandyClaim = async (\n  connection : RPCConnection,\n  walletKey : PublicKey,\n  distributorKey : PublicKey,\n  distributorInfo : any,\n  candyConfig : string,\n  candyUUID : string,\n  proof : Array<Buffer>,\n  handle : string,\n  amount : number,\n  index : number,\n  pin : BN | null,\n) : Promise<[Array<TransactionInstruction>, Array<Buffer>, Array<Keypair>]> => {\n\n  let configKey : PublicKey;\n  try {\n    configKey = new PublicKey(candyConfig);\n  } catch (err) {\n    throw new Error(`Invalid candy config key ${err}`);\n  }\n\n  const [secret, pdaSeeds] = await walletKeyOrPda(walletKey, handle, pin, configKey);\n\n  // TODO: since it's in the PDA do we need it to be in the leaf?\n  const leaf = Buffer.from(\n    [...new BN(index).toArray(\"le\", 8),\n     ...secret.toBuffer(),\n     ...configKey.toBuffer(),\n     ...new BN(amount).toArray(\"le\", 8),\n    ]\n  );\n\n  const matches = MerkleTree.verifyClaim(\n    leaf, proof, Buffer.from(distributorInfo.root)\n  );\n\n  if (!matches) {\n    throw new Error(\"Gumdrop merkle proof does not match\");\n  }\n\n  const [claimCount, cbump] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"ClaimCount\"),\n      Buffer.from(new BN(index).toArray(\"le\", 8)),\n      distributorKey.toBuffer(),\n    ],\n    GUMDROP_DISTRIBUTOR_ID\n  );\n\n  const [distributorWalletKey, wbump] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"Wallet\"),\n      distributorKey.toBuffer(),\n    ],\n    GUMDROP_DISTRIBUTOR_ID\n  );\n\n  // atm the contract has a special case for when the temporal key is defaulted\n  // (aka always passes temporal check)\n  // TODO: more flexible\n  let temporalSigner = distributorInfo.temporal.equals(PublicKey.default) || secret.equals(walletKey)\n      ? walletKey : distributorInfo.temporal;\n\n  const setup : Array<TransactionInstruction> = [];\n\n  const claimCountAccount = await connection.getAccountInfo(claimCount);\n  let nftsAlreadyMinted = 0;\n  if (claimCountAccount === null) {\n  } else {\n    // TODO: subtract already minted?...\n    const claimAccountInfo = coder.accounts.decode(\n      \"ClaimCount\", claimCountAccount.data);\n    nftsAlreadyMinted = claimAccountInfo.count;\n    if (claimAccountInfo.claimant.equals(walletKey)) {\n      // we already proved this claim and verified the OTP once, contract knows\n      // that this wallet is OK\n      temporalSigner = walletKey;\n    } else {\n      // need to claim with the first wallet...\n      const claimantStr = claimAccountInfo.claimant.toBase58();\n      throw new Error(`This wallet does not match existing claimant ${claimantStr}`);\n    }\n  }\n\n  const nftsAvailable = amount;\n  if (nftsAlreadyMinted >= nftsAvailable) {\n    throw new Error(`Cannot mint another NFT. ${nftsAvailable} NFT(s) were originally allocated`\n      + (nftsAlreadyMinted > 0 ? ` and ${nftsAlreadyMinted} NFT(s) were already minted` : \"\"));\n  }\n\n\n  const [candyMachineKey, ] = await getCandyMachineAddress(configKey, candyUUID);\n  const candyMachine = await getCandyMachine(connection, candyMachineKey);\n  console.log(\"Candy Machine\", candyMachine);\n\n  const candyMachineMints : Array<Keypair> = [];\n\n  const [instrs, mint] = await buildSingleCandyMint(\n    connection,\n    walletKey,\n    distributorKey,\n    distributorWalletKey,\n    claimCount,\n    temporalSigner,\n    configKey,\n    candyMachineKey,\n    candyMachine.wallet,\n    Buffer.from([\n      ...new BN(wbump).toArray(\"le\", 1),\n      ...new BN(cbump).toArray(\"le\", 1),\n      ...new BN(index).toArray(\"le\", 8),\n      ...new BN(amount).toArray(\"le\", 8),\n      ...secret.toBuffer(),\n      ...new BN(proof.length).toArray(\"le\", 4),\n      ...Buffer.concat(proof),\n    ]),\n  );\n  candyMachineMints.push(mint);\n  setup.push(...instrs);\n\n  return [setup, pdaSeeds, candyMachineMints];\n}\n\nconst buildSingleCandyMint = async (\n  connection : RPCConnection,\n  walletKey : PublicKey,\n  distributorKey : PublicKey,\n  distributorWalletKey : PublicKey,\n  claimCount : PublicKey,\n  temporalSigner : PublicKey,\n  configKey : PublicKey,\n  candyMachineKey : PublicKey,\n  candyMachineWallet : PublicKey,\n  data : Buffer,\n) : Promise<[Array<TransactionInstruction>, Keypair]> => {\n  const candyMachineMint = Keypair.generate();\n  const candyMachineMetadata = await getMetadata(candyMachineMint.publicKey);\n  const candyMachineMaster = await getEdition(candyMachineMint.publicKey);\n\n  const setup : Array<TransactionInstruction> = [];\n  await createMintAndAccount(connection, walletKey, candyMachineMint.publicKey, setup);\n  setup.push(new TransactionInstruction({\n      programId: GUMDROP_DISTRIBUTOR_ID,\n      keys: [\n          { pubkey: distributorKey            , isSigner: false , isWritable: true  } ,\n          { pubkey: distributorWalletKey      , isSigner: false , isWritable: true  } ,\n          { pubkey: claimCount                , isSigner: false , isWritable: true  } ,\n          { pubkey: temporalSigner            , isSigner: true  , isWritable: false } ,\n          { pubkey: walletKey                 , isSigner: true  , isWritable: false } , // payer\n\n          { pubkey: configKey                 , isSigner: false , isWritable: true  } ,\n          { pubkey: candyMachineKey           , isSigner: false , isWritable: true  } ,\n          { pubkey: candyMachineWallet        , isSigner: false , isWritable: true  } ,\n          { pubkey: candyMachineMint.publicKey, isSigner: false , isWritable: true  } ,\n          { pubkey: candyMachineMetadata      , isSigner: false , isWritable: true  } ,\n          { pubkey: candyMachineMaster        , isSigner: false , isWritable: true  } ,\n\n          { pubkey: SystemProgram.programId   , isSigner: false , isWritable: false } ,\n          { pubkey: TOKEN_PROGRAM_ID          , isSigner: false , isWritable: false } ,\n          { pubkey: TOKEN_METADATA_PROGRAM_ID , isSigner: false , isWritable: false } ,\n          { pubkey: CANDY_MACHINE_ID          , isSigner: false , isWritable: false } ,\n          { pubkey: SYSVAR_RENT_PUBKEY        , isSigner: false , isWritable: false } ,\n          { pubkey: SYSVAR_CLOCK_PUBKEY       , isSigner: false , isWritable: false } ,\n      ],\n      data: Buffer.from([\n        ...Buffer.from(sha256.digest(\"global:claim_candy\")).slice(0, 8),\n        ...data,\n      ])\n  }));\n\n  return [setup, candyMachineMint];\n}\n\nconst createMintAndAccount = async (\n  connection : RPCConnection,\n  walletKey : PublicKey,\n  mint : PublicKey,\n  setup : Array<TransactionInstruction>,\n) => {\n  const [walletTokenKey, ] = await PublicKey.findProgramAddress(\n    [\n      walletKey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      mint.toBuffer(),\n    ],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n\n  setup.push(SystemProgram.createAccount({\n    fromPubkey: walletKey,\n    newAccountPubkey: mint,\n    space: MintLayout.span,\n    lamports:\n      await connection.getMinimumBalanceForRentExemption(\n        MintLayout.span,\n      ),\n    programId: TOKEN_PROGRAM_ID,\n  }));\n\n  setup.push(Token.createInitMintInstruction(\n    TOKEN_PROGRAM_ID,\n    mint,\n    0,\n    walletKey,\n    walletKey,\n  ));\n\n  setup.push(Token.createAssociatedTokenAccountInstruction(\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    mint,\n    walletTokenKey,\n    walletKey,\n    walletKey\n  ));\n\n  setup.push(Token.createMintToInstruction(\n    TOKEN_PROGRAM_ID,\n    mint,\n    walletTokenKey,\n    walletKey,\n    [],\n    1,\n  ));\n\n}\n\nconst buildEditionClaim = async (\n  connection : RPCConnection,\n  walletKey : PublicKey,\n  distributorKey : PublicKey,\n  distributorInfo : any,\n  masterMint : string,\n  edition : number,\n  proof : Array<Buffer>,\n  handle : string,\n  amount : number,\n  index : number,\n  pin : BN | null,\n) : Promise<[Array<TransactionInstruction>, Array<Buffer>, Array<Keypair>]> => {\n\n  let masterMintKey : PublicKey;\n  try {\n    masterMintKey = new PublicKey(masterMint);\n  } catch (err) {\n    throw new Error(`Invalid master mint key ${err}`);\n  }\n\n  const [secret, pdaSeeds] = await walletKeyOrPda(walletKey, handle, pin, masterMintKey);\n\n  // should we assert that the amount is 1?\n  const leaf = Buffer.from(\n    [...new BN(index).toArray(\"le\", 8),\n     ...secret.toBuffer(),\n     ...masterMintKey.toBuffer(),\n     ...new BN(amount).toArray(\"le\", 8),\n     ...new BN(edition).toArray(\"le\", 8),\n    ]\n  );\n\n  const matches = MerkleTree.verifyClaim(\n    leaf, proof, Buffer.from(distributorInfo.root)\n  );\n\n  if (!matches) {\n    throw new Error(\"Gumdrop merkle proof does not match\");\n  }\n\n  const [claimCount, cbump] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"ClaimCount\"),\n      Buffer.from(new BN(index).toArray(\"le\", 8)),\n      distributorKey.toBuffer(),\n    ],\n    GUMDROP_DISTRIBUTOR_ID\n  );\n\n  // atm the contract has a special case for when the temporal key is defaulted\n  // (aka always passes temporal check)\n  // TODO: more flexible\n  let temporalSigner = distributorInfo.temporal.equals(PublicKey.default) || secret.equals(walletKey)\n      ? walletKey : distributorInfo.temporal;\n\n  const claimCountAccount = await connection.getAccountInfo(claimCount);\n  if (claimCountAccount !== null) {\n    throw new Error(`This edition was already claimed`);\n  }\n\n  const setup : Array<TransactionInstruction> = [];\n\n  const newMint = Keypair.generate();\n  const newMetadataKey = await getMetadata(newMint.publicKey);\n  const masterMetadataKey = await getMetadata(masterMintKey);\n  const newEdition = await getEdition(newMint.publicKey);\n  const masterEdition = await getEdition(masterMintKey);\n\n  await createMintAndAccount(connection, walletKey, newMint.publicKey, setup);\n\n  const [distributorTokenKey, ] = await PublicKey.findProgramAddress(\n    [\n      distributorKey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      masterMintKey.toBuffer(),\n    ],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n\n  const editionMarkKey = await getEditionMarkerPda(masterMintKey, new BN(edition));\n\n  setup.push(new TransactionInstruction({\n      programId: GUMDROP_DISTRIBUTOR_ID,\n      keys: [\n          { pubkey: distributorKey            , isSigner: false , isWritable: true  } ,\n          { pubkey: claimCount                , isSigner: false , isWritable: true  } ,\n          { pubkey: temporalSigner            , isSigner: true  , isWritable: false } ,\n          { pubkey: walletKey                 , isSigner: true  , isWritable: false } , // payer\n\n          { pubkey: newMetadataKey            , isSigner: false , isWritable: true  } ,\n          { pubkey: newEdition                , isSigner: false , isWritable: true  } ,\n          { pubkey: masterEdition             , isSigner: false , isWritable: true  } ,\n          { pubkey: newMint.publicKey         , isSigner: false , isWritable: true  } ,\n          { pubkey: editionMarkKey            , isSigner: false , isWritable: true  } ,\n          { pubkey: walletKey                 , isSigner: true  , isWritable: false } , // `newMint` auth\n          { pubkey: distributorTokenKey       , isSigner: false , isWritable: false } ,\n          { pubkey: walletKey                 , isSigner: false , isWritable: false } , // new update auth\n          { pubkey: masterMetadataKey         , isSigner: false , isWritable: false } ,\n          { pubkey: masterMintKey             , isSigner: false , isWritable: false } ,\n\n          { pubkey: SystemProgram.programId   , isSigner: false , isWritable: false } ,\n          { pubkey: TOKEN_PROGRAM_ID          , isSigner: false , isWritable: false } ,\n          { pubkey: TOKEN_METADATA_PROGRAM_ID , isSigner: false , isWritable: false } ,\n          { pubkey: SYSVAR_RENT_PUBKEY        , isSigner: false , isWritable: false } ,\n      ],\n      data: Buffer.from([\n        ...Buffer.from(sha256.digest(\"global:claim_edition\")).slice(0, 8),\n        ...new BN(cbump).toArray(\"le\", 1),\n        ...new BN(index).toArray(\"le\", 8),\n        ...new BN(amount).toArray(\"le\", 8),\n        ...new BN(edition).toArray(\"le\", 8),\n        ...secret.toBuffer(),\n        ...new BN(proof.length).toArray(\"le\", 4),\n        ...Buffer.concat(proof),\n      ])\n  }));\n\n  return [setup, pdaSeeds, [newMint]];\n}\n\nconst fetchDistributor = async (\n  connection : RPCConnection,\n  distributorStr : string,\n) => {\n  let key;\n  try {\n    key = new PublicKey(distributorStr);\n  } catch (err) {\n    throw new Error(`Invalid distributor key ${err}`);\n  }\n  const account = await connection.getAccountInfo(key);\n  if (account === null) {\n    throw new Error(`Could not fetch distributor ${distributorStr}`);\n  }\n  if (!account.owner.equals(GUMDROP_DISTRIBUTOR_ID)) {\n    const ownerStr = account.owner.toBase58();\n    throw new Error(`Invalid distributor owner ${ownerStr}`);\n  }\n  const info = coder.accounts.decode(\"MerkleDistributor\", account.data);\n  return [key, info];\n};\n\nconst fetchNeedsTemporalSigner = async (\n  connection : RPCConnection,\n  distributorStr : string,\n  indexStr : string,\n  claimMethod : string,\n) => {\n  const [key, info] = await fetchDistributor(connection, distributorStr);\n  if (!info.temporal.equals(GUMDROP_TEMPORAL_SIGNER)) {\n    // default pubkey or program itself (distribution through wallets)\n    return false;\n  } else if (claimMethod === \"candy\") {\n    const [claimCount, ] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"ClaimCount\"),\n        Buffer.from(new BN(Number(indexStr)).toArray(\"le\", 8)),\n        key.toBuffer(),\n      ],\n      GUMDROP_DISTRIBUTOR_ID\n    );\n    // if someone (maybe us) has already claimed this, the contract will\n    // not check the existing temporal signer anymore since presumably\n    // they have already verified the OTP. So we need to fetch the temporal\n    // signer if it is null\n    const claimCountAccount = await connection.getAccountInfo(claimCount);\n    return claimCountAccount === null;\n  } else {\n    // default to need one\n    return true;\n  }\n};\n\nexport type ClaimProps = {};\n\nexport const Claim = (\n  props : RouteComponentProps<ClaimProps>,\n) => {\n  const connection = useConnection();\n  const wallet = useWallet();\n\n  let query = props.location.search;\n  if (query && query.length > 0) {\n    localStorage.setItem(\"claimQuery\", query);\n  } else {\n    const stored = localStorage.getItem(\"claimQuery\");\n    if (stored)\n      query = stored;\n  }\n\n  let params = queryString.parse(query);\n  const [distributor, setDistributor] = React.useState(params.distributor as string || \"\");\n  const [claimMethod, setClaimMethod] = React.useState(\n        params.tokenAcc ? \"transfer\"\n      : params.config   ? \"candy\"\n      : params.master   ? \"edition\"\n      :                   \"\");\n  const [tokenAcc, setTokenAcc] = React.useState(params.tokenAcc as string || \"\");\n  const [candyConfig, setCandyConfig] = React.useState(params.config as string || \"\");\n  const [candyUUID, setCandyUUID] = React.useState(params.uuid as string || \"\");\n  const [masterMint, setMasterMint] = React.useState(params.master as string || \"\");\n  const [editionStr, setEditionStr] = React.useState(params.edition as string || \"\");\n  const [handle, setHandle] = React.useState(params.handle as string || \"\");\n  const [amountStr, setAmount] = React.useState(params.amount as string || \"\");\n  const [indexStr, setIndex] = React.useState(params.index as string || \"\");\n  const [pinStr, setPin] = React.useState(params.pin as string || \"\");\n  const [proofStr, setProof] = React.useState(params.proof as string || \"\");\n\n  const discordGuild = params.guild;\n\n  const allFieldsPopulated =\n    distributor.length > 0\n    && ( claimMethod === \"transfer\" ? tokenAcc.length > 0\n       : claimMethod === \"candy\"    ? candyConfig.length > 0 && candyUUID.length > 0\n       : claimMethod === \"edition\"  ? masterMint.length > 0 && editionStr.length > 0\n       :                              false\n       )\n    && handle.length > 0\n    && amountStr.length > 0\n    && indexStr.length > 0;\n    // NB: pin can be empty if handle is a public-key and we are claiming through wallets\n    // NB: proof can be empty!\n\n  const [editable, setEditable] = React.useState(!allFieldsPopulated);\n\n  // temporal verification\n  const [transaction, setTransaction] = React.useState<Transaction | null>(null);\n  const [OTPStr, setOTPStr] = React.useState(\"\");\n\n  // async computed\n  const [asyncNeedsTemporalSigner, setNeedsTemporalSigner] = React.useState<boolean>(true);\n\n  React.useEffect(() => {\n    const wrap = async () => {\n      try {\n        setNeedsTemporalSigner(await fetchNeedsTemporalSigner(\n          connection, distributor, indexStr, claimMethod));\n      } catch {\n        // TODO: log?\n      }\n    };\n    wrap();\n  }, [connection, distributor, indexStr, claimMethod]);\n\n  const lambdaAPIEndpoint = \"https://n82bm4ts81.execute-api.us-east-2.amazonaws.com/send-OTP\";\n\n  const skipAWSWorkflow = false;\n\n  const sendOTP = async (e : React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (!wallet.connected || wallet.publicKey === null) {\n      throw new Error(`Wallet not connected`);\n    }\n\n    const index = Number(indexStr);\n    const amount = Number(amountStr);\n    let pin : BN | null = null;\n\n    if (isNaN(amount)) {\n      throw new Error(`Could not parse amount ${amountStr}`);\n    }\n    if (isNaN(index)) {\n      throw new Error(`Could not parse index ${indexStr}`);\n    }\n    if (params.pin !== \"NA\") {\n      try {\n        pin = new BN(pinStr);\n      } catch (err) {\n        throw new Error(`Could not parse pin ${pinStr}: ${err}`);\n      }\n    }\n\n    // TODO: use cached?\n    const [distributorKey, distributorInfo] =\n        await fetchDistributor(connection, distributor);\n\n    console.log(\"Distributor\", distributorInfo);\n\n    const proof = proofStr === \"\" ? [] : proofStr.split(\",\").map(b => {\n      const ret = Buffer.from(bs58.decode(b))\n      if (ret.length !== 32)\n        throw new Error(`Invalid proof hash length`);\n      return ret;\n    });\n\n    let instructions, pdaSeeds, extraSigners;\n    if (claimMethod === \"candy\") {\n      console.log(\"Building candy claim\");\n      [instructions, pdaSeeds, extraSigners] = await buildCandyClaim(\n        connection, wallet.publicKey, distributorKey, distributorInfo,\n        candyConfig, candyUUID,\n        proof, handle, amount, index, pin\n      );\n    } else if (claimMethod === \"transfer\") {\n      [instructions, pdaSeeds, extraSigners] = await buildMintClaim(\n        connection, wallet.publicKey, distributorKey, distributorInfo,\n        tokenAcc,\n        proof, handle, amount, index, pin\n      );\n    } else if (claimMethod === \"edition\") {\n      const edition = Number(editionStr);\n      if (isNaN(edition)) {\n        throw new Error(`Could not parse edition ${editionStr}`);\n      }\n      [instructions, pdaSeeds, extraSigners] = await buildEditionClaim(\n        connection, wallet.publicKey, distributorKey, distributorInfo,\n        masterMint, edition,\n        proof, handle, amount, index, pin\n      );\n    } else {\n      throw new Error(`Unknown claim method ${claimMethod}`);\n    }\n\n    // NB: if we're claiming through wallets then pdaSeeds should be empty\n    // since the secret is the wallet key (which is also a signer)\n    if (pin === null && pdaSeeds.length > 0) {\n      throw new Error(`Internal error: PDA generated when distributing to wallet directly`);\n    }\n\n    let transaction = new Transaction({\n      feePayer: wallet.publicKey,\n      recentBlockhash: (await connection.getRecentBlockhash(\"singleGossip\")).blockhash,\n    });\n\n    const signers = new Set<PublicKey>();\n    for (const instr of instructions) {\n      transaction.add(instr);\n      for (const key of instr.keys)\n        if (key.isSigner)\n          signers.add(key.pubkey);\n    }\n    console.log(`Expecting the following signers: ${[...signers].map(s => s.toBase58())}`);\n    transaction.setSigners(...signers);\n\n    if (extraSigners.length > 0) {\n      transaction.partialSign(...extraSigners);\n    }\n\n    const txnNeedsTemporalSigner =\n        transaction.signatures.some(s => s.publicKey.equals(GUMDROP_TEMPORAL_SIGNER));\n    if (txnNeedsTemporalSigner && !skipAWSWorkflow) {\n      const otpQuery : { [key: string] : any } = {\n        method: \"send\",\n        transaction: bs58.encode(transaction.serializeMessage()),\n        seeds: pdaSeeds,\n      };\n      if (discordGuild) {\n        otpQuery.discordGuild = discordGuild;\n      }\n      const params = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(otpQuery),\n      };\n\n      const response = await fetch(lambdaAPIEndpoint, params);\n      console.log(response);\n\n      if (response.status !== 200) {\n        throw new Error(`Failed to send AWS OTP`);\n      }\n\n      let data;\n      try {\n        data = await response.json();\n      } catch {\n        throw new Error(`Could not parse AWS OTP response`);\n      }\n\n      console.log(\"AWS OTP response data:\", data);\n\n      let succeeded, toCheck;\n      if (discordGuild) {\n        succeeded = !!data.id;\n        toCheck = \"discord\";\n      } else {\n        succeeded = !!data.MessageId;\n        toCheck = \"email\";\n      }\n\n      if (!succeeded) {\n        throw new Error(`Failed to send AWS OTP`);\n      }\n\n      notify({\n        message: \"OTP sent\",\n        description: `Please check your ${toCheck} (${handle}) for an OTP`,\n      });\n    }\n\n    return transaction;\n  };\n\n  const verifyOTP = async (\n    e : React.SyntheticEvent,\n    transaction : Transaction | null,\n  ) => {\n    e.preventDefault();\n\n    if (!transaction) {\n      throw new Error(`Transaction not available for OTP verification`);\n    }\n\n    if (!wallet.connected || wallet.publicKey === null) {\n      throw new Error(`Wallet not connected`);\n    }\n\n    const txnNeedsTemporalSigner =\n        transaction.signatures.some(s => s.publicKey.equals(GUMDROP_TEMPORAL_SIGNER));\n    if (txnNeedsTemporalSigner && !skipAWSWorkflow) {\n      // TODO: distinguish between OTP failure and transaction-error. We can try\n      // again on the former but not the latter\n      const OTP = Number(OTPStr);\n      if (isNaN(OTP) || OTPStr.length === 0) {\n        throw new Error(`Could not parse OTP ${OTPStr}`);\n      }\n\n      const params = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        FunctionName: \"send-OTP\",\n        body: JSON.stringify({\n          method: \"verify\",\n          otp: OTP,\n          handle: handle,  // TODO?\n        }),\n      };\n\n      const response = await fetch(lambdaAPIEndpoint, params);\n      console.log(response);\n\n      if (response.status !== 200) {\n        const blob = JSON.stringify(response);\n        throw new Error(`Failed to verify AWS OTP. ${blob}`);\n      }\n\n      let data;\n      try {\n        data = await response.json();\n      } catch {\n        throw new Error(`Could not parse AWS OTP verification response`);\n      }\n\n      console.log(\"AWS verify response data:\", data);\n\n      let sig;\n      try {\n        sig = bs58.decode(data);\n      } catch {\n        throw new Error(`Could not decode transaction signature ${data.body}`);\n      }\n\n      transaction.addSignature(GUMDROP_TEMPORAL_SIGNER, sig);\n    }\n\n    let fullySigned;\n    try {\n      fullySigned = await wallet.signTransaction(transaction);\n    } catch {\n      throw new Error(\"Failed to sign transaction\");\n    }\n\n    const claimResult = await sendSignedTransaction({\n      connection,\n      signedTransaction: fullySigned,\n    });\n\n    console.log(claimResult);\n    notify({\n      message: \"Claim succeeded\",\n      description: (\n        <HyperLink href={explorerLinkFor(claimResult.txid, connection)}>\n          View transaction on explorer\n        </HyperLink>\n      ),\n    });\n    setTransaction(null);\n    try {\n      setNeedsTemporalSigner(await fetchNeedsTemporalSigner(\n        connection, distributor, indexStr, claimMethod));\n    } catch {\n      // TODO: log?\n    }\n  };\n\n  const [loading, setLoading] = React.useState(false);\n  const loadingProgress = () => (\n    <CircularProgress\n      size={24}\n      sx={{\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        marginTop: '-12px',\n        marginLeft: '-12px',\n      }}\n    />\n  );\n\n  const verifyOTPC = (onClick) => (\n    <React.Fragment>\n      <TextField\n        id=\"otp-text-field\"\n        label=\"OTP\"\n        value={OTPStr}\n        onChange={(e) => setOTPStr(e.target.value)}\n      />\n      <Box />\n\n      <Box sx={{ position: \"relative\" }}>\n      <Button\n        disabled={!wallet.connected || !OTPStr || loading}\n        variant=\"contained\"\n        color=\"success\"\n        style={{ width: \"100%\" }}\n        onClick={(e) => {\n          setLoading(true);\n          const wrap = async () => {\n            try {\n              await verifyOTP(e, transaction);\n              setLoading(false);\n              onClick();\n            } catch (err) {\n              notify({\n                message: \"Claim failed\",\n                description: `${err}`,\n              });\n              setLoading(false);\n            }\n          };\n          wrap();\n        }}\n      >\n        Claim Gumdrop\n      </Button>\n      {loading && loadingProgress()}\n      </Box>\n    </React.Fragment>\n  );\n\n  const claimData = (claimMethod) => {\n    if (claimMethod === \"candy\") {\n      return (\n        <React.Fragment>\n          <TextField\n            id=\"config-text-field\"\n            label=\"Candy Config\"\n            value={candyConfig}\n            onChange={e => setCandyConfig(e.target.value)}\n            disabled={!editable}\n          />\n          <TextField\n            id=\"config-uuid-text-field\"\n            label=\"Candy UUID\"\n            value={candyUUID}\n            onChange={e => setCandyUUID(e.target.value)}\n            disabled={!editable}\n          />\n        </React.Fragment>\n      );\n    } else if (claimMethod === \"transfer\") {\n      return (\n        <React.Fragment>\n          <TextField\n            id=\"token-acc-text-field\"\n            label=\"Source Token Account\"\n            value={tokenAcc}\n            onChange={(e) => setTokenAcc(e.target.value)}\n            disabled={!editable}\n          />\n        </React.Fragment>\n      );\n    } else if (claimMethod === \"edition\") {\n      return (\n        <React.Fragment>\n          <TextField\n            id=\"master-mint-text-field\"\n            label=\"Master Mint\"\n            value={masterMint}\n            onChange={(e) => setMasterMint(e.target.value)}\n            disabled={!editable}\n          />\n          <TextField\n            id=\"edition-text-field\"\n            label=\"Edition\"\n            value={editionStr}\n            onChange={(e) => setEditionStr(e.target.value)}\n            disabled={!editable}\n          />\n        </React.Fragment>\n      );\n    }\n  };\n\n  const populateClaimC = (onClick) => (\n    <React.Fragment>\n      <TextField\n        id=\"distributor-text-field\"\n        label=\"Distributor\"\n        value={distributor}\n        onChange={(e) => setDistributor(e.target.value)}\n        disabled={!editable}\n      />\n      <FormControl fullWidth>\n        <InputLabel\n          id=\"claim-method-label\"\n          disabled={!editable}\n        >\n          Claim Method\n        </InputLabel>\n        <Select\n          labelId=\"claim-method-label\"\n          id=\"claim-method-select\"\n          value={claimMethod}\n          label=\"Claim Method\"\n          onChange={(e) => { setClaimMethod(e.target.value); }}\n          style={{textAlign: \"left\"}}\n          disabled={!editable}\n        >\n          <MenuItem value={\"transfer\"}>Token Transfer</MenuItem>\n          <MenuItem value={\"candy\"}>Candy Machine</MenuItem>\n          <MenuItem value={\"edition\"}>Limited Edition</MenuItem>\n        </Select>\n      </FormControl>\n      {claimMethod !== \"\" && claimData(claimMethod)}\n      {claimMethod !== \"edition\" && <TextField\n        id=\"amount-text-field\"\n        label=\"Amount\"\n        value={amountStr}\n        onChange={(e) => setAmount(e.target.value)}\n        disabled={!editable}\n      />}\n      <TextField\n        id=\"handle-text-field\"\n        label=\"Handle\"\n        value={handle}\n        onChange={(e) => setHandle(e.target.value)}\n        disabled={!editable}\n      />\n      <TextField\n        id=\"index-text-field\"\n        label=\"Index\"\n        value={indexStr}\n        onChange={(e) => setIndex(e.target.value)}\n        disabled={!editable}\n      />\n      {params.pin !== \"NA\" && <TextField\n        id=\"pin-text-field\"\n        label=\"Pin\"\n        value={pinStr}\n        onChange={(e) => setPin(e.target.value)}\n        disabled={!editable}\n      />}\n      <TextField\n        id=\"proof-text-field\"\n        label=\"Proof\"\n        multiline\n        value={proofStr}\n        onChange={(e) => setProof(e.target.value)}\n        disabled={!editable}\n      />\n      <Button\n        color=\"info\"\n        onClick={(e) => setEditable(!editable)}\n      >\n        {!editable ? \"Edit Claim\" : \"Stop Editing\"}\n      </Button>\n      <Box />\n\n      <Box sx={{ position: \"relative\" }}>\n      <Button\n        disabled={!wallet.connected || !allFieldsPopulated || loading}\n        variant=\"contained\"\n        style={{ width: \"100%\" }}\n        color={asyncNeedsTemporalSigner ? \"primary\" : \"success\"}\n        onClick={(e) => {\n          setLoading(true);\n          const wrap = async () => {\n            try {\n              const needsTemporalSigner = await fetchNeedsTemporalSigner(\n                  connection, distributor, indexStr, claimMethod);\n              const transaction = await sendOTP(e);\n              if (!needsTemporalSigner) {\n                await verifyOTP(e, transaction);\n              } else {\n                setTransaction(transaction);\n              }\n              setLoading(false);\n              onClick();\n            } catch (err) {\n              notify({\n                message: \"Claim failed\",\n                description: `${err}`,\n              });\n              setLoading(false);\n            }\n          };\n          wrap();\n        }}\n      >\n        {asyncNeedsTemporalSigner ? \"Next\" : \"Claim Gumdrop\"}\n      </Button>\n      {loading && loadingProgress()}\n      </Box>\n    </React.Fragment>\n  );\n\n  const steps = [\n    { name: \"Populate Claim\", inner: populateClaimC },\n  ];\n  if (asyncNeedsTemporalSigner) {\n    steps.push(\n    { name: \"Verify OTP\"    , inner: verifyOTPC     }\n    );\n  }\n\n  // TODO: better interaction between setting `asyncNeedsTemporalSigner` and\n  // the stepper... this is pretty jank\n  const [activeStep, setActiveStep] = React.useState(0);\n  const stepToUse = Math.min(activeStep, steps.length - 1);\n\n  const handleNext = () => {\n    // return to start if going past the end (claim succeeded)\n    setActiveStep(prev => {\n      if (prev === steps.length - 1) {\n        return 0;\n      } else {\n        return prev + 1;\n      }\n    });\n  };\n  const handleBack = () => {\n    setActiveStep(prev => prev - 1);\n  };\n\n  const stepper = (\n    <React.Fragment>\n      <Stepper activeStep={stepToUse}>\n        {steps.map((s, index) => {\n          return (\n            <Step key={s.name}>\n              <StepLabel>{s.name}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      <Box />\n    </React.Fragment>\n  );\n\n  return (\n    <Stack spacing={2}>\n      {asyncNeedsTemporalSigner && stepper}\n      {steps[stepToUse].inner(handleNext)}\n      {stepToUse > 0 && (\n        <Button\n          color=\"info\"\n          onClick={handleBack}\n        >\n          Back\n        </Button>\n      )}\n    </Stack>\n  );\n};\n\n","import { WalletAdapter, WalletError } from \"@solana/wallet-adapter-base\";\nimport {\n  useWallet,\n  WalletProvider as BaseWalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  getLedgerWallet,\n  getMathWallet,\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolongWallet,\n  getTorusWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport { Button } from \"antd\";\nimport React, {\n  createContext,\n  FC,\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { notify } from \"../../utils\";\nimport { DefaultModal } from \"../../components\";\n\nimport \"./wallet.less\";\n\nexport interface WalletModalContextState {\n  visible: boolean;\n  setVisible: (open: boolean) => void;\n}\n\nexport const WalletModalContext = createContext<WalletModalContextState>(\n  {} as WalletModalContextState\n);\n\nexport function useWalletModal(): WalletModalContextState {\n  return useContext(WalletModalContext);\n}\n\nexport const WalletModal: FC = () => {\n  const { wallets, wallet: selected, select } = useWallet();\n  const { visible, setVisible } = useWalletModal();\n  const [ , setShowWallets] = useState(false);\n  const close = useCallback(() => {\n    setVisible(false);\n    setShowWallets(false);\n  }, [setVisible, setShowWallets]);\n\n  return (\n    <DefaultModal visible={visible} onCancel={close}>\n      <div\n        style={{\n          background:\n            \"linear-gradient(180deg, #D329FC 0%, #8F6DDE 49.48%, #19E6AD 100%)\",\n          borderRadius: 36,\n          width: 50,\n          height: 50,\n          textAlign: \"center\",\n          verticalAlign: \"middle\",\n          fontWeight: 700,\n          fontSize: \"1.3rem\",\n          lineHeight: 2.4,\n          marginBottom: 10,\n        }}\n      ></div>\n      <h2\n        style={{\n          color: \"white\",\n          fontWeight: \"bold\",\n          fontSize: \"1.2rem\",\n        }}\n      >\n        {selected ? \"Change provider\" : \"\"}\n      </h2>\n      <p style={{ color: \"white\", fontSize: \"1rem\"}}>\n        {selected\n          ? \"Choose from the following options:\"\n          : \"Please sign into your wallet\"}\n      </p>\n\n      <br />\n      {wallets.map((wallet) => {\n        return (\n          <Button\n            key={wallet.name}\n            size=\"large\"\n            type={wallet === selected ? \"primary\" : \"ghost\"}\n            onClick={() => {\n              select(wallet.name);\n              close();\n            }}\n            icon={\n              <img\n                alt={`${wallet.name}`}\n                width={20}\n                height={20}\n                src={wallet.icon}\n                style={{ marginRight: 30, float: \"left\" }}\n              />\n            }\n            style={{\n              display: \"block\",\n              width: \"100%\",\n              textAlign: \"left\",\n              marginBottom: 8,\n              color: \"white\",\n            }}\n          >\n            {wallet.name}\n          </Button>\n        );\n      })}\n    </DefaultModal>\n  );\n};\n\nexport const WalletModalProvider: FC<{ children: ReactNode }> = ({\n  children,\n}) => {\n  const { publicKey } = useWallet();\n  const [connected, setConnected] = useState(!!publicKey);\n  const [visible, setVisible] = useState(false);\n\n  useEffect(() => {\n    if (publicKey) {\n      const base58 = publicKey.toBase58();\n      const keyToDisplay =\n        base58.length > 20\n          ? `${base58.substring(0, 7)}.....${base58.substring(\n              base58.length - 7,\n              base58.length\n            )}`\n          : base58;\n\n      notify({\n        message: \"Wallet update\",\n        description: \"Connected to wallet \" + keyToDisplay,\n      });\n    }\n  }, [publicKey]);\n\n  useEffect(() => {\n    if (!publicKey && connected) {\n      notify({\n        message: \"Wallet update\",\n        description: \"Disconnected from wallet\",\n      });\n    }\n    setConnected(!!publicKey);\n  }, [publicKey, connected, setConnected]);\n\n  return (\n    <WalletModalContext.Provider\n      value={{\n        visible,\n        setVisible,\n      }}\n    >\n      {children}\n      <WalletModal />\n    </WalletModalContext.Provider>\n  );\n};\n\nexport const WalletProvider: FC<{ children: ReactNode }> = ({ children }) => {\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getTorusWallet({\n        options: {\n          clientId:\n            \"BEB_D44HovHuXH0Ace97QVqSu1ahCKndjpGhzhVcMy_9XmDTbHyqTbzQTufcyaN0kFwtlVbfPzJwpJXg94gWJqE\",\n          uxMode: \"redirect\",\n        },\n      }),\n      getLedgerWallet(),\n      getSolongWallet(),\n      getMathWallet(),\n      getSolletWallet(),\n    ],\n    []\n  );\n\n  const onError = useCallback((error: WalletError) => {\n    console.error(error);\n    notify({\n      message: \"Wallet error\",\n      description: error.message,\n    });\n  }, []);\n\n  return (\n    <BaseWalletProvider wallets={wallets} onError={onError} autoConnect>\n      <WalletModalProvider>{children}</WalletModalProvider>\n    </BaseWalletProvider>\n  );\n};\n\nexport type WalletSigner = Pick<\n  WalletAdapter,\n  \"publicKey\" | \"signTransaction\" | \"signAllTransactions\"\n>;\n","export default __webpack_public_path__ + \"static/media/wallet.c746d144.less\";","import React, { useState, useContext, useCallback } from 'react';\n\nimport { WalletModal } from './WalletContext/WalletContext';\n\nexport enum ModalEnum {\n  WALLET = 'wallet',\n}\n\ntype ModalContextProps = {\n  setModal: (modal: ModalEnum | undefined) => void;\n  removeModal: () => void;\n};\n\nexport const ModalContext = React.createContext<ModalContextProps>({\n  setModal: () => null,\n  removeModal: () => null,\n});\n\nexport const ModalProvider: React.FC = ({ children }) => {\n  const [modal, setModal] = useState<ModalEnum | undefined>(undefined);\n\n  const removeModal = useCallback(() => {\n    setModal(undefined);\n  }, [setModal]);\n\n  return (\n    <ModalContext.Provider\n      value={{\n        setModal,\n        removeModal,\n      }}\n    >\n      {children}\n      {modal === ModalEnum.WALLET && <WalletModal />}\n    </ModalContext.Provider>\n  );\n};\n\nexport const useModal = (): ModalContextProps => {\n  const context = useContext(ModalContext);\n  if (context === undefined) {\n    throw new Error('useModal must be used within a ModalProvider');\n  }\n  return context;\n};\n","import * as anchor from '@project-serum/anchor';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport {\n  AccountLayout,\n  MintInfo,\n  MintLayout,\n} from \"@solana/spl-token\";\nimport BN from 'bn.js';\n\nimport {\n  CANDY_MACHINE_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  TOKEN_METADATA_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from \"./ids\";\n\nexport const getMintInfo = async (\n  connection : Connection,\n  mint : string\n) : Promise<{ key: PublicKey, info: MintInfo }> => {\n  let mintKey : PublicKey;\n  try {\n    mintKey = new PublicKey(mint);\n  } catch (err) {\n    throw new Error(`Invalid mint key ${err}`);\n  }\n  const mintAccount = await connection.getAccountInfo(mintKey);\n  if (mintAccount === null) {\n    throw new Error(`Could not fetch mint`);\n  }\n  if (!mintAccount.owner.equals(TOKEN_PROGRAM_ID)) {\n    const mintOwner = mintAccount.owner.toBase58();\n    throw new Error(`Invalid mint owner ${mintOwner}`);\n  }\n  if (mintAccount.data.length !== MintLayout.span) {\n    throw new Error(`Invalid mint size ${mintAccount.data.length}`);\n  }\n  const mintInfo = MintLayout.decode(Buffer.from(mintAccount.data));\n  return {\n    key: mintKey,\n    info: mintInfo,\n  };\n};\n\nexport const getCreatorTokenAccount = async (\n  walletKey : PublicKey,\n  connection : Connection,\n  mintKey : PublicKey,\n  totalClaim : number,\n) => {\n  const [creatorTokenKey, ] = await PublicKey.findProgramAddress(\n    [\n      walletKey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      mintKey.toBuffer(),\n    ],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n  const creatorTokenAccount = await connection.getAccountInfo(creatorTokenKey);\n  if (creatorTokenAccount === null) {\n    throw new Error(`Could not fetch creator token account`);\n  }\n  if (creatorTokenAccount.data.length !== AccountLayout.span) {\n    throw new Error(`Invalid token account size ${creatorTokenAccount.data.length}`);\n  }\n  const creatorTokenInfo = AccountLayout.decode(Buffer.from(creatorTokenAccount.data));\n  if (new BN(creatorTokenInfo.amount, 8, \"le\").toNumber() < totalClaim) {\n    throw new Error(`Creator token account does not have enough tokens`);\n  }\n  return creatorTokenKey;\n};\n\nexport const fetchCoder = async (\n  address : anchor.Address,\n  connection : Connection,\n) : Promise<anchor.Coder | null> => {\n  return new anchor.Coder(await anchor.Program.fetchIdl(\n      address, { connection: connection } as anchor.Provider));\n}\n\nexport const getCandyConfig = async (\n  connection : Connection,\n  config : string\n) : Promise<PublicKey> => {\n  let configKey : PublicKey;\n  try {\n    configKey = new PublicKey(config);\n  } catch (err) {\n    throw new Error(`Invalid config key ${err}`);\n  }\n  const configAccount = await connection.getAccountInfo(configKey);\n  if (configAccount === null) {\n    throw new Error(`Could not fetch config`);\n  }\n  if (!configAccount.owner.equals(CANDY_MACHINE_ID)) {\n    throw new Error(`Invalid config owner ${configAccount.owner.toBase58()}`);\n  }\n  return configKey;\n};\n\nexport const getCandyMachineAddress = async (\n  config: PublicKey,\n  uuid: string,\n) => {\n  return await PublicKey.findProgramAddress(\n    [Buffer.from(\"candy_machine\"), config.toBuffer(), Buffer.from(uuid)],\n    CANDY_MACHINE_ID,\n  );\n};\n\nexport const getCandyMachine = async (\n  connection : Connection,\n  candyMachineKey : PublicKey,\n) => {\n  const candyMachineCoder = await fetchCoder(CANDY_MACHINE_ID, connection);\n  if (candyMachineCoder === null) {\n    throw new Error(`Could not fetch candy machine IDL`);\n  }\n  const candyMachineAccount = await connection.getAccountInfo(candyMachineKey);\n  if (candyMachineAccount === null) {\n    throw new Error(`Could not fetch candy machine`);\n  }\n  return candyMachineCoder.accounts.decode(\n      \"CandyMachine\", candyMachineAccount.data);\n}\n\nexport const getMetadata = async (\n  mint: PublicKey,\n): Promise<PublicKey> => {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getEdition = async (\n  mint: PublicKey,\n): Promise<PublicKey> => {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getEditionMarkerPda = async (\n  mint: PublicKey,\n  edition: BN,\n) : Promise<PublicKey> => {\n  // editions are divided into pages of 31-bytes (248-bits) for more efficient\n  // packing to check if an edition is occupied. The offset is determined from\n  // the edition passed in through data\n  const editionPageNumber = edition.div(new BN(248)).toNumber();\n\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n        Buffer.from(String(editionPageNumber)),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n}\n","import React from \"react\";\nimport {\n  Link,\n} from \"react-router-dom\";\nimport {\n  Box,\n  Button,\n  Divider,\n  Drawer,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemText,\n  Stack,\n} from \"@mui/material\";\nimport HomeIcon from '@mui/icons-material/Home';\nimport MenuIcon from '@mui/icons-material/Menu';\n\nimport { Settings } from \"../Settings\";\n\nexport const Header = ({ narrow }) => {\n  const navs = [\n    {\n      href: `/gumdrop/`,\n      innerNarrow: \"About\",\n      inner: <HomeIcon />,\n    },\n    {\n      href: `/gumdrop/create`,\n      inner: \"Create\",\n    },\n    {\n      href: `/gumdrop/claim`,\n      inner: \"Claim\",\n    },\n    {\n      href: `/gumdrop/close`,\n      inner: \"Close\",\n    },\n  ];\n\n  const [drawerOpen, setDrawerOpen] = React.useState(false);\n\n  const toggleDrawer = (open) => (event) => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n\n    setDrawerOpen(open);\n  };\n\n  return (\n    <Box\n      sx={{\n        height: \"52px\",\n        display: \"flex\",\n        bgcolor: \"action.disabledBackground\",\n        overflow: \"auto\",\n      }}\n    >\n      {narrow\n        ? (\n          <React.Fragment>\n            <Button onClick={toggleDrawer(true)}>\n              <MenuIcon />\n            </Button>\n            <Drawer\n              open={drawerOpen}\n              onClose={toggleDrawer(false)}\n            >\n              <Box\n                sx={{ width: 250 }}\n                role=\"presentation\"\n                onClick={toggleDrawer(false)}\n                onKeyDown={toggleDrawer(false)}\n              >\n                <List>\n                  <ListItem>\n                    <ListItemText\n                      primary=\"Gumdrop\"\n                      primaryTypographyProps={{\n                        fontSize: \"1.2rem\",\n                        fontWeight: 'medium',\n                        letterSpacing: 0,\n                      }}\n                    />\n                  </ListItem>\n                  <Divider />\n                  {navs.map((nav, idx) => {\n                    return (\n                      <Link to={nav.href} key={idx} style={{color: \"inherit\"}}>\n                        <ListItemButton>\n                          {nav.innerNarrow || nav.inner}\n                        </ListItemButton>\n                      </Link>\n                    );\n                  })}\n                </List>\n              </Box>\n            </Drawer>\n          </React.Fragment>\n        )\n        : (\n          <Stack\n            direction=\"row\"\n            spacing={2}\n            sx={{\n              display: \"flex\",\n              justifyContent: \"flex-start\",\n              alignItems: \"center\",\n              marginLeft: \"36px\",\n            }}\n          >\n            {navs.map((nav, idx) => {\n              return (\n                <Link to={nav.href} key={idx}>\n                  <Button variant=\"outlined\" style={{minWidth:0}}>\n                    {nav.inner}\n                  </Button>\n                </Link>\n              );\n            })}\n          </Stack>\n        )\n      }\n      <Box sx={{flexGrow: 1, minWidth: \"36px\"}}></Box>\n      <Settings narrow={narrow}/>\n    </Box>\n  );\n};\n","import React from \"react\";\n\nimport {\n  Box,\n  Button,\n  CircularProgress,\n  FormControl,\n  InputLabel,\n  Link as HyperLink,\n  MenuItem,\n  Stack,\n  Select,\n  TextField,\n} from \"@mui/material\";\n\nimport {\n  useWallet,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  Keypair,\n} from \"@solana/web3.js\";\n\nimport {\n  useConnection,\n  Connection,\n} from \"../contexts\";\nimport {\n  notify,\n} from \"../utils\";\nimport {\n  closeGumdrop,\n} from \"../utils/claimant\";\nimport {\n  explorerLinkFor,\n} from \"../utils/transactions\";\n\nexport const Close = () => {\n  const connection = useConnection();\n  const wallet = useWallet();\n\n  const [baseKey, setBaseKey] = React.useState(\"\");\n  const [claimMethod, setClaimMethod] = React.useState(localStorage.getItem(\"claimMethod\") || \"transfer\");\n  const [mint, setMint] = React.useState(localStorage.getItem(\"mint\") || \"\");\n  const [candyConfig, setCandyConfig] = React.useState(localStorage.getItem(\"candyConfig\") || \"\");\n  const [candyUUID, setCandyUUID] = React.useState(localStorage.getItem(\"candyUUID\") || \"\");\n  const [masterMint, setMasterMint] = React.useState(localStorage.getItem(\"masterMint\") || \"\");\n\n  const submit = async (e : React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (!wallet.connected || wallet.publicKey === null) {\n      throw new Error(`Wallet not connected`);\n    }\n\n    const base = Keypair.fromSecretKey(\n      new Uint8Array(JSON.parse(baseKey)));\n\n    const instructions = await closeGumdrop(\n      connection,\n      wallet.publicKey,\n      base,\n      claimMethod,\n      mint,\n      candyConfig,\n      candyUUID,\n      masterMint,\n    );\n\n    const closeResult = await Connection.sendTransactionWithRetry(\n      connection,\n      wallet,\n      instructions,\n      [base]\n    );\n\n    console.log(closeResult);\n    if (typeof closeResult === \"string\") {\n      notify({\n        message: \"Close failed\",\n        description: closeResult,\n      });\n    } else {\n      notify({\n        message: \"Close succeeded\",\n        description: (\n          <HyperLink href={explorerLinkFor(closeResult.txid, connection)}>\n            View transaction on explorer\n          </HyperLink>\n        ),\n      });\n    }\n  };\n\n  const claimData = (claimMethod) => {\n    if (claimMethod === \"candy\") {\n      return (\n        <React.Fragment>\n          <TextField\n            id=\"config-text-field\"\n            label=\"Candy Config\"\n            value={candyConfig}\n            onChange={e => setCandyConfig(e.target.value)}\n          />\n          <TextField\n            id=\"config-uuid-text-field\"\n            label=\"Candy UUID\"\n            value={candyUUID}\n            onChange={e => setCandyUUID(e.target.value)}\n          />\n        </React.Fragment>\n      );\n    } else if (claimMethod === \"transfer\") {\n      return (\n        <React.Fragment>\n          <TextField\n            id=\"mint-text-field\"\n            label=\"Mint\"\n            value={mint}\n            onChange={(e) => setMint(e.target.value)}\n          />\n        </React.Fragment>\n      );\n    } else if (claimMethod === \"edition\") {\n      return (\n        <React.Fragment>\n          <TextField\n            id=\"master-mint-text-field\"\n            label=\"Master Mint\"\n            value={masterMint}\n            onChange={(e) => setMasterMint(e.target.value)}\n          />\n        </React.Fragment>\n      );\n    }\n  };\n\n  const [loading, setLoading] = React.useState(false);\n  const loadingProgress = () => (\n    <CircularProgress\n      size={24}\n      sx={{\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        marginTop: '-12px',\n        marginLeft: '-12px',\n      }}\n    />\n  );\n  return (\n    <Stack spacing={2}>\n      <TextField\n        id=\"base-text-field\"\n        label=\"Base Private Key\"\n        value={baseKey}\n        onChange={(e) => setBaseKey(e.target.value)}\n      />\n      <FormControl fullWidth>\n        <InputLabel id=\"claim-method-label\">Claim Method</InputLabel>\n        <Select\n          labelId=\"claim-method-label\"\n          id=\"claim-method-select\"\n          value={claimMethod}\n          label=\"Claim Method\"\n          onChange={(e) => {\n            localStorage.setItem(\"claimMethod\", e.target.value);\n            setClaimMethod(e.target.value);\n          }}\n          style={{textAlign: \"left\"}}\n        >\n          <MenuItem value={\"transfer\"}>Token Transfer</MenuItem>\n          <MenuItem value={\"candy\"}>Candy Machine</MenuItem>\n          <MenuItem value={\"edition\"}>Limited Edition</MenuItem>\n        </Select>\n      </FormControl>\n      {claimMethod !== \"\" && claimData(claimMethod)}\n      <Box sx={{ position: \"relative\" }}>\n      <Button\n        disabled={!wallet.connected || !baseKey || loading}\n        variant=\"contained\"\n        style={{ width: \"100%\" }}\n        onClick={(e) => {\n          setLoading(true);\n          const wrap = async () => {\n            try {\n              await submit(e);\n              setLoading(false);\n            } catch (err) {\n              notify({\n                message: \"Close failed\",\n                description: `${err}`,\n              });\n              setLoading(false);\n            }\n          };\n          wrap();\n        }}\n      >\n        Close Gumdrop\n      </Button>\n      {loading && loadingProgress()}\n      </Box>\n    </Stack>\n  );\n};\n","import log from 'loglevel';\nimport { SESv2Client, SendEmailCommand } from \"@aws-sdk/client-sesv2\"\nimport { SNSClient, PublishCommand } from \"@aws-sdk/client-sns\";\n\nimport {\n  ClaimantInfo,\n  Claimants,\n} from \"./claimant\"\n\nexport type AuthKeys = { [key: string] : string }\nexport type Response = { [key: string] : any }\n\nexport type DropInfo = {\n  type : string,\n  meta : string,\n};\n\nexport const formatDropMessage = (\n  info : ClaimantInfo,\n  drop : DropInfo,\n  html : boolean,\n) => {\n  const wrap = (url, text) => {\n    if (html) {\n      return `<a href=\"${url}\">${text}</a>`;\n    } else {\n      return `${text} ${url}`;\n    }\n  }\n  if (drop.type === \"Token\") {\n    return {\n      subject: \"Gumdrop Token Drop\",\n      message: `You received ${info.amount} token(s) `\n             + `(click ${wrap(drop.meta, \"here\")} to view more information about the token mint). `\n             +  wrap(info.url, \"Click here to claim them!\"),\n    };\n  } else if (drop.type === \"Candy\") {\n    return {\n      subject: \"Gumdrop NFT Drop\",\n      message: `You received ${info.amount} Candy Machine pre-sale mint(s) `\n             + `(click ${wrap(drop.meta, \"here\")} to view the candy machine configuration on explorer). `\n             +  wrap(info.url, \"Click here to claim them!\"),\n    };\n  } else if (drop.type === \"Edition\") {\n    return {\n      subject: \"Gumdrop NFT Drop\",\n      message: `You received ${info.amount} limited-edition print(s) `\n             + `(click ${wrap(drop.meta, \"here\")} to view the master edition mint on explorer). `\n             +  wrap(info.url, \"Click here to claim them!\"),\n    };\n  } else {\n    throw new Error(`Internal Error: Unknown drop type ${drop.type}`);\n  }\n};\n\nexport const distributeAwsSns = async (\n  auth : AuthKeys,\n  source : string,\n  claimants : Claimants,\n  drop : DropInfo,\n) => {\n  if (!auth.accessKeyId || !auth.secretAccessKey) {\n    throw new Error(\"AWS SES auth keys not supplied\");\n  }\n  if (claimants.length === 0) return [];\n\n  log.debug(\"SES auth\", auth);\n  const client = new SNSClient({\n    region: \"us-east-2\",\n    credentials: {\n      accessKeyId: auth.accessKeyId,\n      secretAccessKey: auth.secretAccessKey,\n    },\n  });\n\n  const single = async (\n    info : ClaimantInfo,\n    drop : DropInfo,\n  ) => {\n    const formatted = formatDropMessage(info, drop, true);\n    const message = {\n      Message: formatted.message,\n      PhoneNumber: info.handle,\n    };\n\n    try {\n      const response = await client.send(new PublishCommand(message));\n      return {\n        status: \"success\",\n        handle: info.handle,\n        messageId: response.MessageId,\n      };\n    } catch (err) {\n      return {\n        status: \"error\",\n        handle: info.handle,\n        error: err,\n      };\n    }\n  };\n\n  const responses = Array<Response>();\n  for (const c of claimants) {\n    responses.push(await single(c, drop));\n  }\n  return responses;\n}\n\nexport const distributeAwsSes = async (\n  auth : AuthKeys,\n  source : string,\n  claimants : Claimants,\n  drop : DropInfo,\n) => {\n  if (!auth.accessKeyId || !auth.secretAccessKey) {\n    throw new Error(\"AWS SES auth keys not supplied\");\n  }\n  if (claimants.length === 0) return [];\n\n  log.debug(\"SES auth\", auth);\n  const client = new SESv2Client({\n    region: \"us-east-2\",\n    credentials: {\n      accessKeyId: auth.accessKeyId,\n      secretAccessKey: auth.secretAccessKey,\n    },\n  });\n\n  // TODO: move to template + bulk message?\n  const single = async (\n    info : ClaimantInfo,\n    drop : DropInfo,\n  ) => {\n    const formatted = formatDropMessage(info, drop, true);\n    const message = {\n      Destination: {\n        ToAddresses: [\n          info.handle,\n        ]\n      },\n      Content: {\n        Simple: {\n          Subject: {\n            Data: formatted.subject,\n            Charset: \"utf-8\",\n          },\n          Body: {\n            Html: {\n              Data: formatted.message\n                + \"<br><br>\"\n                + \"<div>\"\n                +   \"If you would like to unsubscribe from new Gumdrops, \"\n                +   \"change your subscription preferences here: \"\n                +   \"<a href='{{amazonSESUnsubscribeUrl}}'>AWS subscription preferences</a>\"\n                + \"</div>\",\n              Charset: \"utf-8\",\n            },\n          },\n        },\n      },\n      FromEmailAddress: source,\n      ListManagementOptions: {\n        ContactListName: \"Gumdrop\",\n        TopicName: drop.type,\n      },\n    };\n\n    try {\n      const response = await client.send(new SendEmailCommand(message));\n      return {\n        status: \"success\",\n        handle: info.handle,\n        messageId: response.MessageId,\n      };\n    } catch (err) {\n      return {\n        status: \"error\",\n        handle: info.handle,\n        error: err,\n      };\n    }\n  };\n\n  const responses = Array<Response>();\n  for (const c of claimants) {\n    responses.push(await single(c, drop));\n  }\n  return responses;\n}\n\nexport const distributeManual = async (\n  auth : AuthKeys,\n  source : string,\n  claimants : Claimants,\n  drop : DropInfo,\n) => {\n  return Array<Response>();\n}\n\nexport const distributeWallet = async (\n  auth : AuthKeys,\n  source : string,\n  claimants : Claimants,\n  drop : DropInfo,\n) => {\n  return Array<Response>();\n}\n\nexport const urlAndHandleFor = (claimants : Array<ClaimantInfo>) => {\n  return claimants.map(info => {\n    return {\n      handle: info.handle,\n      amount: info.amount,\n      url: info.url,\n    };\n  });\n}\n","import React from \"react\"\nimport {\n  useColorMode,\n} from \"../contexts/ColorModeContext\";\n\nexport const DragAndDrop = (props) => {\n  const dropRef = React.useRef<HTMLDivElement>(null);\n  const [dragCounter, setDragCounter] = React.useState(0);\n  const [dragging, setDragging] = React.useState(false);\n\n  const handleDrag = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n  };\n\n  const handleDragIn = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n\n    setDragCounter(dragCounter + 1);\n    if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {\n      setDragging(true);\n    }\n  };\n\n  const handleDragOut = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n\n    const remainingDrags = dragCounter - 1;\n    setDragCounter(remainingDrags);\n    if (remainingDrags === 0) {\n      setDragging(false);\n    }\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n\n    setDragging(false);\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      props.handleDrop(e.dataTransfer.files);\n      e.dataTransfer.clearData();\n      setDragCounter(0);\n    }\n  };\n\n  React.useEffect(() => {\n    const node = dropRef.current;\n    if (node === null) return;\n    node.addEventListener(\"dragenter\" , handleDragIn);\n    node.addEventListener(\"dragleave\" , handleDragOut);\n    node.addEventListener(\"dragover\"  , handleDrag);\n    node.addEventListener(\"drop\"      , handleDrop);\n\n    return () => {\n      node.removeEventListener(\"dragenter\" , handleDragIn);\n      node.removeEventListener(\"dragleave\" , handleDragOut);\n      node.removeEventListener(\"dragover\"  , handleDrag);\n      node.removeEventListener(\"drop\"      , handleDrop);\n    };\n  });\n\n  const colorModeCtx = useColorMode();\n  const shade = colorModeCtx.mode === 'dark' ? \"rgba(255,255,255,.1)\" : \"rgba(0, 0, 0,.1)\";\n\n  return (\n    <div\n      ref={dropRef}\n      style={dragging ? { backgroundColor: shade} : {}}\n    >\n      {props.children}\n    </div>\n  );\n};\n\n\nexport default DragAndDrop;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport {\n  Box,\n  Button,\n  CircularProgress,\n  FormControl,\n  Link as HyperLink,\n  InputLabel,\n  MenuItem,\n  Stack,\n  Select,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n} from \"@mui/material\";\nimport FilePresentIcon from '@mui/icons-material/FilePresent';\n\nimport {\n  useWallet,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  Keypair,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport {\n  MintInfo,\n} from \"@solana/spl-token\";\nimport BN from 'bn.js';\n\nimport {\n  useConnection,\n  Connection,\n} from \"../contexts\";\nimport {\n  GUMDROP_DISTRIBUTOR_ID,\n  GUMDROP_TEMPORAL_SIGNER,\n  notify,\n  shortenAddress,\n} from \"../utils\";\nimport {\n  ClaimantInfo,\n  Claimants,\n  buildGumdrop,\n  dropInfoFor,\n  parseClaimants,\n  validateTransferClaims,\n  validateCandyClaims,\n  validateEditionClaims,\n} from \"../utils/claimant\";\nimport {\n  AuthKeys,\n  DropInfo,\n  Response as DResponse,\n  distributeAwsSes,\n  distributeManual,\n  distributeWallet,\n  urlAndHandleFor,\n} from \"../utils/communication\";\nimport {\n  envFor,\n  explorerLinkFor,\n} from \"../utils/transactions\";\nimport { DragAndDrop } from \"./DragAndDrop\";\nimport { DefaultModal } from \"./DefaultModal\";\n\n// NB: assumes no overflow\nconst randomBytes = () : Uint8Array => {\n  // TODO: some predictable seed? sha256?\n  const buf = new Uint8Array(4);\n  window.crypto.getRandomValues(buf);\n  return buf;\n}\n\nconst WHITESPACE = \"\\u00A0\";\n\nconst distribute = (\n  method : string,\n  auth : AuthKeys,\n  source : string,\n  claimants : Claimants,\n  drop : DropInfo,\n) => {\n  if (method === \"AWS SES\") {\n    return distributeAwsSes(auth, source, claimants, drop);\n  } else if (method === \"Manual\") {\n    return distributeManual(auth, source, claimants, drop);\n  } else if (method === \"Wallets\") {\n    return distributeWallet(auth, source, claimants, drop);\n  } else {\n    throw new Error(`Unrecognized claim distribution method ${method}`);\n  }\n}\n\nconst reactModal = (renderModal) => {\n  const container = document.createElement('div');\n  document.body.appendChild(container);\n\n  const displayModal = ({ onSubmit, onDismiss }) => {\n    ReactDOM.render(renderModal({ onSubmit, onDismiss, show: true }), container);\n  };\n\n  const hideModal = ({ onSubmit, onDismiss }, callback) => {\n    ReactDOM.render(renderModal({ onSubmit, onDismiss, show: false }), container, callback);\n  };\n\n  const destroyModal = () => {\n    ReactDOM.unmountComponentAtNode(container);\n    document.body.removeChild(container);\n  };\n\n  const confirmation = new Promise((resolve) => {\n    const onSubmit = (value) => resolve(value);\n    const onDismiss = () => resolve(undefined);\n    displayModal({ onSubmit, onDismiss });\n  });\n\n  return confirmation.finally(() => {\n    const onSubmit = () => {};\n    const onDismiss = () => {};\n    hideModal({ onSubmit, onDismiss }, destroyModal);\n  });\n};\n\nconst resendOnlyRender = ({ show, onSubmit, onDismiss }) => {\n  const options = [\n    { click: () => onSubmit(\"create\"), name: \"Create and Send\" },\n    { click: () => onSubmit(\"send\")  , name: \"Send only\"       },\n  ];\n  return (\n    <DefaultModal visible={show} onCancel={onDismiss} width=\"70ch\">\n      <p style={{\n        color: \"white\",\n        fontSize: \"0.9rem\",\n        marginTop: 8,\n        width: \"90%\",\n      }}>\n        Uploaded distribution list has URLs for all claimants.\n        Skip creation of airdrop and only re-send links?\n      </p>\n      <br />\n      <Stack direction=\"row\" spacing={2} style={{width: \"100%\"}}>\n      {options.map((opt) => {\n        return (\n          <Button\n            key={opt.name}\n            style={{\n              width: \"100%\",\n              color: \"white\",\n              marginBottom: 8,\n            }}\n            variant=\"outlined\"\n            onClick={opt.click}\n          >\n            {opt.name}\n          </Button>\n        );\n      })}\n      </Stack>\n    </DefaultModal>\n  );\n};\n\nconst displayMintTokens = (amount : number, mintInfo : MintInfo) : string => {\n  // TODO: better decimal rounding\n  return String(amount / Math.pow(10, mintInfo.decimals));\n};\n\nconst hyperLinkData = (data) => {\n  const encoded = encodeURIComponent(JSON.stringify(data));\n  return `data:text/plain;charset=utf-8,${encoded}`;\n};\n\nconst shouldSendRender = (claimants, needsPin, claimMethod, claimInfo, baseKey) => {\n  const limit = 1000;\n  return ({ show, onSubmit, onDismiss }) => {\n    return (\n      <DefaultModal visible={show} onCancel={onDismiss} width=\"70ch\">\n        <h2\n          style={{\n            color: \"white\",\n            fontWeight: \"bold\",\n            fontSize: \"1.2rem\",\n          }}\n        >\n          Claim Distribution Preview{claimants.length > limit ? ` (First ${limit})` : \"\"}\n        </h2>\n        <p style={{ color: \"white\", fontSize: \"1rem\", textAlign: \"center\" }}>\n          Approving will save the keypair authority generated for gumdrop\n          state. This keypair is necessary to close the gumdrop later!\n        </p>\n        <TableContainer\n          sx={{\n            \"td, th\": { color: \"white\" },\n            backgroundColor: \"#444444\",\n            borderRadius: \"5px\",\n            maxHeight: \"30ch\",\n          }}\n        >\n          <Table size=\"small\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Handle</TableCell>\n                <TableCell>\n                  {claimMethod === \"edition\"\n                    ? \"Edition\"\n                    : \"Tokens\"\n                  }\n                </TableCell>\n                {needsPin && <TableCell>Pin</TableCell>}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {claimants.slice(0, limit).map((c, idx) => (\n                <TableRow\n                  key={idx}\n                  sx={{ 'td, th': { border: 0 } }}\n                >\n                  <TableCell component=\"th\" scope=\"row\">{c.handle} </TableCell>\n                  <TableCell>\n                    { claimMethod === \"transfer\" ? displayMintTokens(c.amount, claimInfo.mint.info)\n                    : claimMethod === \"candy\"    ? c.amount\n                    : /* === \"edition\" */          c.edition\n                    }\n                  </TableCell>\n                  {needsPin && <TableCell>{c.pin.toNumber()}</TableCell>}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <Box style={{ height: \"3ch\" }} />\n        <Stack direction=\"row\" spacing={2} style={{width: \"100%\"}}>\n          <Button\n            style={{\n              width: \"100%\",\n              color: \"white\",\n              marginBottom: 8,\n            }}\n            variant=\"outlined\"\n            onClick={() => onSubmit(false)}\n          >\n            Cancel\n          </Button>\n          <HyperLink\n            href={hyperLinkData(Array.from(baseKey.secretKey))}\n            download={`${baseKey.publicKey.toBase58()}.json`}\n            underline=\"none\"\n            style={{width: \"100%\"}}\n          >\n            <Button\n              style={{\n                width: \"100%\",\n                color: \"white\",\n                marginBottom: 8,\n              }}\n              variant=\"outlined\"\n              onClick={() => onSubmit(true)}\n            >\n              Approve\n            </Button>\n          </HyperLink>\n        </Stack>\n      </DefaultModal>\n    );\n  }\n};\n\nexport type CreateProps = {};\n\nexport const Create = (\n  props : CreateProps,\n) => {\n  const connection = useConnection();\n  const wallet = useWallet();\n\n  // claim state\n  const [claimMethod, setClaimMethod] = React.useState(localStorage.getItem(\"claimMethod\") || \"\");\n  const [candyConfig, setCandyConfig] = React.useState(localStorage.getItem(\"candyConfig\") || \"\");\n  const [candyUUID, setCandyUUID] = React.useState(localStorage.getItem(\"candyUUID\") || \"\");\n  const [mint, setMint] = React.useState(localStorage.getItem(\"mint\") || \"\");\n  const [masterMint, setMasterMint] = React.useState(localStorage.getItem(\"masterMint\") || \"\");\n  const [filename, setFilename] = React.useState(\"\");\n  const [text, setText] = React.useState(\"\");\n\n  // response state\n  const [claimURLs, setClaimURLs] = React.useState<Array<{ [key: string]: any }>>([]);\n  const [responses, setResponses] = React.useState<Array<DResponse>>([]);\n\n  // auth state\n  const [otpAuth, setOtpAuth] = React.useState(localStorage.getItem(\"otpAuth\") || \"default\");\n  const [commMethod, setCommMethod] = React.useState(localStorage.getItem(\"commMethod\") || \"\");\n  const [commAuth, setCommAuth] = React.useState<AuthKeys>({});\n  const [commSource, setCommSource] = React.useState(localStorage.getItem(\"commSource\") || \"\");\n  const [awsAccessKeyId, setAwsAccessKeyId] = React.useState(\"\");\n  const [awsSecretKey, setAwsSecretKey] = React.useState(\"\");\n\n  const explorerUrlFor = (key : PublicKey) => {\n    return `https://explorer.solana.com/address/${key.toBase58()}?cluster=${envFor(connection)}`;\n  }\n\n  const distributeClaims = async (claimants, drop) => {\n    const responses = await distribute(\n      commMethod, commAuth, commSource, claimants, drop);\n\n    console.log(\"Responses\", responses);\n    setResponses(responses);\n\n    // notify if the above routine is actually supposed to do anything\n    // (manual and wallet do nothing atm)\n    if (commMethod === \"AWS SES\") {\n      notify({\n        message: \"Gumdrop email distribution completed\",\n      });\n    }\n  }\n\n  const submit = async (e : React.SyntheticEvent) => {\n    e.preventDefault();\n\n    setClaimURLs([]);\n    setResponses([]);\n\n    if (!wallet.connected || wallet.publicKey === null) {\n      throw new Error(`Wallet not connected`);\n    }\n\n    const claimants = parseClaimants(text, filename, commMethod);\n    if (claimants.length === 0) {\n      throw new Error(`No claimants provided`);\n    }\n\n    const dropInfo = dropInfoFor(envFor(connection), claimMethod, mint, candyConfig, masterMint);\n    // check that auth is correct...\n    await distribute(\n      commMethod, commAuth, commSource, [], dropInfo);\n\n    const mightHaveExisting = (info : ClaimantInfo) => {\n      return info.url !== undefined && info.url !== null;\n    };\n    if (claimants.reduce((acc, c) => acc && mightHaveExisting(c), true)) {\n      const resendOnly = await reactModal(resendOnlyRender);\n      console.log(\"Resend only\", resendOnly);\n      if (resendOnly === \"send\") {\n        setClaimURLs(urlAndHandleFor(claimants));\n        await distributeClaims(claimants, dropInfo);\n        return;\n      } else if (resendOnly === \"create\") {\n        // fallthrough to full create\n      } else {\n        // dismissed. don't use exceptions for control flow?\n        throw new Error(\"Dismissed\");\n      }\n    }\n\n\n    let claimInfo;\n    switch (claimMethod) {\n      case \"transfer\": {\n        claimInfo = await validateTransferClaims(\n          connection,\n          wallet.publicKey,\n          claimants,\n          mint,\n        );\n        break;\n      }\n      case \"candy\": {\n        claimInfo = await validateCandyClaims(\n          connection,\n          wallet.publicKey,\n          claimants,\n          candyConfig,\n          candyUUID,\n        );\n        break;\n      }\n      case \"edition\": {\n        claimInfo = await validateEditionClaims(\n          connection,\n          wallet.publicKey,\n          claimants,\n          masterMint,\n        );\n        break;\n      }\n      default:\n        throw new Error(`Unknown claim method ${claimMethod}`);\n    }\n    console.log(\"Claims info\", claimInfo);\n\n    claimants.forEach(c => {\n      c.pin = new BN(randomBytes());\n      c.seed = claimMethod === \"transfer\" ? claimInfo.mint.key\n             : claimMethod === \"candy\"    ? claimInfo.config\n             : /* === edition */            claimInfo.masterMint.key;\n    });\n\n    // temporal auth is the AWS signer by 'default' and a no-op key otherwise\n    let temporalSigner;\n    if (commMethod === \"Wallets\") {\n      // TODO: this is a bit jank. There should be no form option to set the\n      // OTP auth if we are using a wallet but there's still a defaulted value\n      // atm...\n      // NB: We also need this to not be 'none' since there is a special check\n      // for claimant_secret==accounts.temporal\n      temporalSigner = GUMDROP_DISTRIBUTOR_ID;\n    } else if (otpAuth === \"default\") {\n      temporalSigner = GUMDROP_TEMPORAL_SIGNER;\n    } else if (otpAuth === \"none\") {\n      temporalSigner = PublicKey.default;\n    } else {\n      throw new Error(`Unknown OTP authorization type ${otpAuth}`);\n    }\n\n    console.log(`Temporal signer: ${temporalSigner.toBase58()}`);\n\n    const base = Keypair.generate();\n    console.log(`Base ${base.publicKey.toBase58()}`);\n\n    const needsPin = commMethod !== \"Wallets\";\n    const instructions = await buildGumdrop(\n      connection,\n      wallet.publicKey,\n      needsPin,\n      claimMethod,\n      `${window.location.origin}/gumdrop`,\n      base.publicKey,\n      temporalSigner,\n      claimants,\n      claimInfo\n    );\n\n    const shouldSend = await reactModal(\n      shouldSendRender(claimants, needsPin, claimMethod, claimInfo, base)\n    ) as boolean | undefined;\n    if (shouldSend === true) {\n    } else {\n      // dismissed. don't use exceptions for control flow?\n      throw new Error(\"Claim distribution preview not approved\");\n    }\n\n\n    setClaimURLs(urlAndHandleFor(claimants));\n\n    const createResult = await Connection.sendTransactionWithRetry(\n      connection,\n      wallet,\n      instructions,\n      [base]\n    );\n\n    console.log(createResult);\n    if (typeof createResult === \"string\") {\n      throw new Error(createResult);\n    } else {\n      notify({\n        message: \"Gumdrop creation succeeded\",\n        description: (\n          <HyperLink href={explorerLinkFor(createResult.txid, connection)}>\n            View transaction on explorer\n          </HyperLink>\n        ),\n      });\n    }\n\n    console.log(\"Distributing claim URLs\");\n    await distributeClaims(claimants, dropInfo);\n  };\n\n  const handleFiles = (files) => {\n    if (files.length !== 1) {\n      notify({\n        message: \"File upload failed\",\n        description: `Received ${files.length} files`,\n      });\n      return;\n    }\n\n    const file = files[0];\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      if (e !== null && e.target !== null) {\n        if (typeof e.target.result === \"string\") {\n          try {\n            parseClaimants(e.target.result, file.name, commMethod);\n          } catch {\n            notify({\n              message: `File upload failed for: ${file.name}`,\n              description: (\n                <span>\n                  Could not parse uploaded file.{WHITESPACE}\n                  <HyperLink href=\"#/\">\n                    Does it follow the JSON scheme?\n                  </HyperLink>\n                </span>\n              ),\n            });\n            setFilename(\"\");\n            setText(\"\");\n            return;\n          }\n          setFilename(file.name);\n          setText(e.target.result);\n        } else {\n          notify({\n            message: `File upload failed for: ${file.name}`,\n            description: \"Could not read uploaded file\",\n          });\n        }\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  const claimData = (claimMethod) => {\n    if (claimMethod === \"candy\") {\n      return (\n        <React.Fragment>\n          <TextField\n            id=\"config-text-field\"\n            label=\"Candy Config\"\n            value={candyConfig}\n            onChange={e => {\n              setCandyConfig(e.target.value);\n              localStorage.setItem(\"candyConfig\", e.target.value);\n            }}\n          />\n          <TextField\n            id=\"config-uuid-text-field\"\n            label=\"Candy UUID\"\n            value={candyUUID}\n            onChange={e => {\n              setCandyUUID(e.target.value);\n              localStorage.setItem(\"candyUUID\", e.target.value);\n            }}\n          />\n        </React.Fragment>\n      );\n    } else if (claimMethod === \"transfer\") {\n      return (\n        <TextField\n          id=\"mint-text-field\"\n          label=\"Mint\"\n          value={mint}\n          onChange={(e) => {\n            localStorage.setItem(\"mint\", e.target.value);\n            setMint(e.target.value);\n          }}\n        />\n      );\n    } else if (claimMethod === \"edition\") {\n      // transfers master mint token from this account to the distributor\n      // wallet ATA\n      return (\n        <TextField\n          id=\"master-mint-text-field\"\n          label=\"Master Mint\"\n          value={masterMint}\n          onChange={(e) => {\n            localStorage.setItem(\"masterMint\", e.target.value);\n            setMasterMint(e.target.value);\n          }}\n        />\n      );\n    }\n  };\n\n  const commAuthorization = (commMethod) => {\n    if (commMethod === \"AWS SES\") {\n      return (\n        <React.Fragment>\n          <TextField\n            id=\"comm-access-key-id-field\"\n            label={`${commMethod} Access Key Id`}\n            value={awsAccessKeyId}\n            onChange={(e) => {\n              setCommAuth(prev => ({...prev, accessKeyId: e.target.value}));\n              setAwsAccessKeyId(e.target.value)\n            }}\n          />\n          <TextField\n            id=\"comm-secret-access-key-field\"\n            label={`${commMethod} Secret Access Key`}\n            value={awsSecretKey}\n            onChange={(e) => {\n              setCommAuth(prev => ({...prev, secretAccessKey: e.target.value}));\n              setAwsSecretKey(e.target.value)\n            }}\n          />\n          <TextField\n            id=\"comm-source-field\"\n            label={`${commMethod} Source`}\n            value={commSource}\n            onChange={(e) => {\n              localStorage.setItem(\"commSource\", e.target.value);\n              setCommSource(e.target.value)\n            }}\n          />\n        </React.Fragment>\n      );\n    }\n\n    // commMethod === \"Manual\" || commMethod === \"Wallets\"\n    return null;\n  };\n\n  const fileUpload = (\n    <React.Fragment>\n      <DragAndDrop handleDrop={handleFiles} >\n        <Stack\n          direction=\"row\"\n          style={{\n            height: \"15ch\",\n          }}\n          sx={{\n            border: '1px dashed grey',\n            justifyContent: \"center\",\n            alignContent: \"center\",\n          }}\n        >\n          <Button\n            variant=\"text\"\n            component=\"label\"\n            style={{\n              padding: 0,\n              // don't make the button click field too large...\n              marginTop: \"5ch\",\n              marginBottom: \"5ch\",\n            }}\n          >\n            Upload a {filename === \"\" ? \"distribution\" : \"different\"} list\n            <input\n              type=\"file\"\n              onChange={(e) => {\n                handleFiles(e.target.files);\n                // re-parse every time...\n                e.target.value = '';\n              }}\n              hidden\n            />\n          </Button>\n          {WHITESPACE}\n          {/*For display alignment...*/}\n          <Button\n            variant=\"text\"\n            component=\"label\"\n            disabled={true}\n            style={{\n              padding: 0,\n              color: \"#eee\",\n            }}\n          >\n            or drag it here\n          </Button>\n        </Stack>\n      </DragAndDrop>\n      {filename !== \"\"\n      ? (<Button\n            variant=\"text\"\n            component=\"label\"\n            disabled={true}\n            style={{\n              padding: 0,\n              color: \"#eee\",\n            }}\n          >\n            <FilePresentIcon />\n            <span>{WHITESPACE} Uploaded {filename}</span>\n          </Button>\n        )\n      : (<Box/>)}\n    </React.Fragment>\n  );\n\n  const [loading, setLoading] = React.useState(false);\n  const loadingProgress = () => (\n    <CircularProgress\n      size={24}\n      sx={{\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        marginTop: '-12px',\n        marginLeft: '-12px',\n      }}\n    />\n  );\n  const createAirdrop = (\n    <Box sx={{ position: \"relative\" }}>\n    <Button\n      disabled={!wallet.connected || !commMethod || !filename || loading}\n      variant=\"contained\"\n      style={{ width: \"100%\" }}\n      onClick={(e) => {\n        setLoading(true);\n        const wrap = async () => {\n          try {\n            await submit(e);\n            setLoading(false);\n          } catch (err) {\n            notify({\n              message: \"Create failed\",\n              description: `${err}`,\n            });\n            setLoading(false);\n          }\n        };\n        wrap();\n      }}\n    >\n      Create{claimURLs.length > 0 ? \" Another \" : \" \"}Gumdrop\n    </Button>\n    {loading && loadingProgress()}\n    </Box>\n  );\n\n  const otpAuthC = (\n    <React.Fragment>\n      <FormControl fullWidth>\n        <InputLabel id=\"otp-auth-label\">OTP Authorization</InputLabel>\n        <Select\n          labelId=\"otp-auth-label\"\n          id=\"otp-auth-select\"\n          value={otpAuth}\n          label=\"OTP Authorization\"\n          onChange={(e) => {\n            localStorage.setItem(\"otpAuth\", e.target.value);\n            setOtpAuth(e.target.value);\n          }}\n          style={{textAlign: \"left\"}}\n        >\n          <MenuItem value={\"default\"}>\n            Default{WHITESPACE}\n            <HyperLink\n              href={explorerUrlFor(GUMDROP_TEMPORAL_SIGNER)}\n              underline=\"none\"\n              target=\"_blank\" rel=\"noopener noreferrer\"\n            >\n              ({shortenAddress(GUMDROP_TEMPORAL_SIGNER.toBase58())})\n            </HyperLink>\n          </MenuItem>\n          <MenuItem value={\"none\"}>None</MenuItem>\n        </Select>\n      </FormControl>\n    </React.Fragment>\n  );\n\n  return (\n    <Stack spacing={2}>\n      <FormControl fullWidth>\n        <InputLabel id=\"claim-method-label\">Claim Method</InputLabel>\n        <Select\n          labelId=\"claim-method-label\"\n          id=\"claim-method-select\"\n          value={claimMethod}\n          label=\"Claim Method\"\n          onChange={(e) => {\n            localStorage.setItem(\"claimMethod\", e.target.value);\n            setClaimMethod(e.target.value);\n          }}\n          style={{textAlign: \"left\"}}\n        >\n          <MenuItem value={\"transfer\"}>Token Transfer</MenuItem>\n          <MenuItem value={\"candy\"}>Candy Machine</MenuItem>\n          <MenuItem value={\"edition\"}>Limited Edition</MenuItem>\n        </Select>\n      </FormControl>\n      {claimMethod !== \"\" && claimData(claimMethod)}\n      <FormControl fullWidth>\n        <InputLabel id=\"comm-method-label\">Distribution Method</InputLabel>\n        <Select\n          labelId=\"comm-method-label\"\n          id=\"comm-method-select\"\n          value={commMethod}\n          label=\"Distribution Method\"\n          onChange={(e) => {\n            if (e.target.value === \"Discord\") {\n              notify({\n                message: \"Discord distribution unavailable\",\n                description: \"Please use the CLI for this. Discord does not support browser-connection requests\",\n              });\n              return;\n            }\n            localStorage.setItem(\"commMethod\", e.target.value);\n            setCommMethod(e.target.value);\n          }}\n          style={{textAlign: \"left\"}}\n        >\n          <MenuItem value={\"AWS SES\"}>AWS SES</MenuItem>\n          <MenuItem value={\"Discord\"}>Discord</MenuItem>\n          <MenuItem value={\"Wallets\"}>Wallets</MenuItem>\n          <MenuItem value={\"Manual\"}>Manual</MenuItem>\n        </Select>\n      </FormControl>\n      {commMethod !== \"\" && commAuthorization(commMethod)}\n      {commMethod !== \"\" && commMethod !== \"Wallets\" && otpAuthC}\n      {commMethod !== \"\" && fileUpload}\n      {createAirdrop}\n      {claimURLs.length > 0 && (\n        <HyperLink\n          href={hyperLinkData(claimURLs)}\n          download=\"claimURLs.json\"\n          underline=\"none\"\n          style={{width: \"100%\"}}\n        >\n          <Button\n            variant=\"contained\"\n            style={{width: \"100%\"}}\n          >\n            Download claim URLs\n          </Button>\n        </HyperLink>\n      )}\n      {responses.length > 0 && (\n        <HyperLink\n          href={hyperLinkData(responses)}\n          download=\"responses.json\"\n          underline=\"none\"\n          style={{width: \"100%\"}}\n        >\n          <Button\n            variant=\"contained\"\n            style={{width: \"100%\"}}\n          >\n            Download distribution responses\n          </Button>\n        </HyperLink>\n      )}\n    </Stack>\n  );\n};\n","import React from \"react\";\nimport {\n  BrowserRouter,\n  Link,\n  Route,\n  Switch,\n} from \"react-router-dom\";\n\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport {\n  Box,\n  Link as HyperLink,\n  Stack,\n} from \"@mui/material\";\n\nimport \"./App.css\";\nimport {\n  useColorMode,\n} from \"./contexts\";\nimport { Header } from \"./components/Header/Header\";\nimport { Claim } from \"./components/Claim\";\nimport { Close } from \"./components/Close\";\nimport { Create } from \"./components/Create\";\n\nconst WHITESPACE = \"\\u00A0\";\n\ntype AboutProps = {};\n\nconst About = (\n  props : AboutProps,\n) => {\n  const summary = (\n    <Stack spacing={1}>\n      <div style={{fontSize: 25}}>\n      This repository has been archived! Find the latest example deployment\n      at{WHITESPACE}\n      <HyperLink href=\"https://lwus.github.io/metaplex/\">\n        https://lwus.github.io/metaplex/\n      </HyperLink>.\n      </div>\n\n      <br />\n      <br />\n      <br />\n\n      <div>\n      The Gumdrop program leverages the Solana blockchain and merkle trees to\n      facilitate airdrops to a large number of whitelisted users at a low cost\n      to creators.\n      </div>\n\n      <div>\n      In the Solana ecosystem, the cost of token airdrops is currently largely\n      due to rent costs being{WHITESPACE}\n      <HyperLink\n        href=\"https://docs.solana.com/implemented-proposals/rent\"\n        underline=\"none\"\n      >\n        \"fixed at the genesis\"\n      </HyperLink>\n      . With the large increase in SOLUSD since genesis, rent costs when\n      creating accounts for thousands of users have duly skyrocketed.\n      </div>\n\n      <div>\n      Simultaneously, NFT projects often have a presale to early project\n      followers and contributors. However, the candy-machine doesn't have the\n      ability to grant early minting to a whitelisted subset of wallets while\n      also using the same asset configuration for open launch.\n      </div>\n\n      <div>\n      Gumdrop (originally pioneered for token airdrops by{\" \"}\n      <HyperLink\n        href=\"https://github.com/Uniswap/merkle-distributor\"\n        underline=\"none\"\n      >\n        Uniswap\n      </HyperLink>\n      {\" \"}and ported to Solana by{WHITESPACE}\n      <HyperLink\n        href=\"https://github.com/saber-hq/merkle-distributor\"\n        underline=\"none\"\n      >\n        Saber\n      </HyperLink>) solves both these issues by building a space-efficient hash\n      structure (the merkle tree) such that an on-chain program can validate\n      whether the user is part of a whitelist. Moreover, Gumdrop\n      allows creators to directly send whitelisted users an airdrop reclamation\n      link by building the tree with off-chain handles (e.g email, discord,\n      etc) and allowing the user to redeem into any wallet.\n      </div>\n    </Stack>\n  );\n\n  const create= (\n    <Stack spacing={1}>\n      <Link to={`/gumdrop/create`}>\n        CREATION\n      </Link>\n\n      <div>\n      Creation builds a whitelist of users that can claim either existing\n      fungible tokens or directly mint from a pre-sale candy-machine.\n      </div>\n\n      <div>\n      Creators must choose a mint or a candy-machine config and UUID, an\n      off-chain notification method (based on the handles supplied below, e.g\n      email, discord, etc), and supply a list of recipients and balances with\n      the following JSON schema{WHITESPACE}\n      <HyperLink\n        href={`data:text/plain;charset=utf-8,${JSON.stringify(require(\"./example.json\"))}`}\n        download=\"example.json\"\n        underline=\"none\"\n      >\n      (Click here for an example)\n      </HyperLink>\n      </div>\n\n      <pre style={{ fontSize: 14 }}>{`\n[\n  {\n    \"handle\": \"<DISTRIBUTION-SPECIFIC-HANDLE>\"\n    \"amount\": <#-TOKENS-OR-CANDY-MINTS>\n  },\n  ...\n]`}</pre>\n\n      <div>\n      NB: When a candy-machine is supplied, update authority for the\n      candy-machine will be transferred to the Gumdrop state. This can\n      be reclaimed by closing the Gumdrop.\n      </div>\n    </Stack>\n  );\n\n  const claim = (\n    <Stack spacing={1}>\n      <Link to={`/gumdrop/claim`}>\n        CLAIMS\n      </Link>\n\n      <div>\n      Claims are redeemed through a URL with query parameters holding\n      claim-specific keys. Claimants will need to verify ownership of the\n      specified handle by answering a OTP challenge and pay the rent and\n      minting fees if applicable.\n      </div>\n    </Stack>\n  );\n\n  const close = (\n    <Stack spacing={1}>\n      <Link to={`/gumdrop/close`}>\n        CLOSING\n      </Link>\n\n      <div>\n      Closing the Gumdrop cleans up the on-chain state and allows\n      creators to recycle any lamports held for rent-exemption after the\n      airdrop is complete.\n      </div>\n\n      <div>\n      When closing a candy-machine-integrated distributor, update authority\n      will be transferred back to the wallet owner.\n      </div>\n    </Stack>\n  );\n\n  const steps = [\n    { name: \"summary\" , inner: summary } ,\n    { name: \"create\"  , inner: create  } ,\n    { name: \"claim\"   , inner: claim   } ,\n    { name: \"close\"   , inner: close   } ,\n  ];\n  return (\n    <Stack\n      alignContent=\"left\"\n      textAlign=\"left\"\n      spacing={2}\n    >\n      {steps.map((s, idx) => <div key={idx}>{s.inner}</div>)}\n    </Stack>\n  );\n};\n\nconst getWindowDimensions = () => {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n};\n\n// eslint-disable-next-line\nconst useWindowDimensions = () => {\n  const [windowDimensions, setWindowDimensions] = React.useState(\n    getWindowDimensions()\n  );\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n};\n\nfunction App() {\n  const colorModeCtx = useColorMode();\n\n  React.useEffect(() => {}, [colorModeCtx.mode]);\n\n  const theme = React.useMemo(\n    () => {\n      let mode;\n      if (colorModeCtx.mode === \"dark\" || !colorModeCtx.mode) {\n        mode = \"dark\";\n      } else {\n        mode = \"light\";\n      }\n\n      return createTheme({\n        palette: {\n          mode,\n        },\n      })\n    },\n    [colorModeCtx.mode]\n  );\n\n  const { width } = useWindowDimensions();\n\n  return (\n    <div className=\"App\" style={{ backgroundColor: \"transparent\" }}>\n      <ThemeProvider theme={theme}>\n        <BrowserRouter>\n          <CssBaseline />\n          <Header narrow={width < 670}/>\n          <Box\n            maxWidth=\"60ch\"\n            width=\"calc(100% - 60px)\"\n            style={{\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n            }}\n          >\n            <Box height=\"40px\" />\n            <Switch>\n              <Route path=\"/gumdrop/create\" component={Create} />\n              <Route path=\"/gumdrop/claim\" component={Claim} />\n              <Route path=\"/gumdrop/close\" component={Close} />\n              <Route path=\"/gumdrop/\" component={About} />\n            </Switch>\n            <Box height=\"80px\" />\n          </Box>\n        </BrowserRouter>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport {\n  AccountsProvider,\n  WalletProvider,\n  ConnectionProvider,\n  ColorModeContextProvider,\n} from \"./contexts\";\n\nimport \"antd/dist/antd.css\";\nimport \"@fontsource/open-sans\";\nimport \"@fontsource/roboto\";\nimport \"@fontsource/sora\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConnectionProvider>\n      <WalletProvider>\n        <AccountsProvider>\n          <ColorModeContextProvider>\n            <App />\n          </ColorModeContextProvider>\n        </AccountsProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n","import BN from 'bn.js';\n\nexport const TEN = new BN(10);\nexport const HALF_WAD = TEN.pow(new BN(18));\nexport const WAD = TEN.pow(new BN(18));\nexport const RAY = TEN.pow(new BN(27));\nexport const ZERO = new BN(0);\n","import { useCallback, useState } from 'react';\nimport { MintInfo } from '@solana/spl-token';\n\nimport { TokenAccount } from './../models';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { WAD, ZERO } from '../constants';\nimport { TokenInfo } from '@solana/spl-token-registry';\n\nexport type KnownTokenMap = Map<string, TokenInfo>;\n\nexport const formatPriceNumber = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 8,\n});\n\nexport function useLocalStorageState(key: string, defaultState?: string) {\n  const [state, setState] = useState(() => {\n    // NOTE: Not sure if this is ok\n    const storedState = localStorage.getItem(key);\n    if (storedState) {\n      return JSON.parse(storedState);\n    }\n    return defaultState;\n  });\n\n  const setLocalStorageState = useCallback(\n    newState => {\n      const changed = state !== newState;\n      if (!changed) {\n        return;\n      }\n      setState(newState);\n      if (newState === null) {\n        localStorage.removeItem(key);\n      } else {\n        try {\n          localStorage.setItem(key, JSON.stringify(newState));\n        } catch {\n          // ignore\n        }\n      }\n    },\n    [state, key],\n  );\n\n  return [state, setLocalStorageState];\n}\n\nexport const findProgramAddress = async (\n  seeds: (Buffer | Uint8Array)[],\n  programId: PublicKey,\n) => {\n  const key =\n    'pda-' +\n    seeds.reduce((agg, item) => agg + item.toString('hex'), '') +\n    programId.toString();\n  let cached = localStorage.getItem(key);\n  if (cached) {\n    const value = JSON.parse(cached);\n\n    return [value.key, parseInt(value.nonce)] as [string, number];\n  }\n\n  const result = await PublicKey.findProgramAddress(seeds, programId);\n\n  try {\n    localStorage.setItem(\n      key,\n      JSON.stringify({\n        key: result[0].toBase58(),\n        nonce: result[1],\n      }),\n    );\n  } catch {\n    // ignore\n  }\n\n  return [result[0].toBase58(), result[1]] as [string, number];\n};\n\n// shorten the checksummed version of the input address to have 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n}\n\nexport function getTokenName(\n  map: KnownTokenMap,\n  mint?: string | PublicKey,\n  shorten = true,\n): string {\n  const mintAddress = typeof mint === 'string' ? mint : mint?.toBase58();\n\n  if (!mintAddress) {\n    return 'N/A';\n  }\n\n  const knownSymbol = map.get(mintAddress)?.symbol;\n  if (knownSymbol) {\n    return knownSymbol;\n  }\n\n  return shorten ? `${mintAddress.substring(0, 5)}...` : mintAddress;\n}\nexport function getVerboseTokenName(\n  map: KnownTokenMap,\n  mint?: string | PublicKey,\n  shorten = true,\n): string {\n  const mintAddress = typeof mint === 'string' ? mint : mint?.toBase58();\n\n  if (!mintAddress) {\n    return 'N/A';\n  }\n\n  const knownName = map.get(mintAddress)?.name;\n  if (knownName) {\n    return knownName;\n  }\n\n  return shorten ? `${mintAddress.substring(0, 5)}...` : mintAddress;\n}\n\nexport function getTokenByName(tokenMap: KnownTokenMap, name: string) {\n  let token: TokenInfo | null = null;\n  for (const val of tokenMap.values()) {\n    if (val.symbol === name) {\n      token = val;\n      break;\n    }\n  }\n  return token;\n}\n\nexport function getTokenIcon(\n  map: KnownTokenMap,\n  mintAddress?: string | PublicKey,\n): string | undefined {\n  const address =\n    typeof mintAddress === 'string' ? mintAddress : mintAddress?.toBase58();\n  if (!address) {\n    return;\n  }\n\n  return map.get(address)?.logoURI;\n}\n\nexport function isKnownMint(map: KnownTokenMap, mintAddress: string) {\n  return !!map.get(mintAddress);\n}\n\nexport const STABLE_COINS = new Set(['USDC', 'wUSDC', 'USDT']);\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply(\n    0,\n    new Array(Math.ceil(array.length / size)),\n  ).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\n\nexport function toLamports(\n  account?: TokenAccount | number,\n  mint?: MintInfo,\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount =\n    typeof account === 'number' ? account : account.info.amount?.toNumber();\n\n  const precision = Math.pow(10, mint?.decimals || 0);\n  return Math.floor(amount * precision);\n}\n\nexport function wadToLamports(amount?: BN): BN {\n  return amount?.div(WAD) || ZERO;\n}\n\nexport function fromLamports(\n  account?: TokenAccount | number | BN,\n  mint?: MintInfo,\n  rate: number = 1.0,\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount = Math.floor(\n    typeof account === 'number'\n      ? account\n      : BN.isBN(account)\n      ? account.toNumber()\n      : account.info.amount.toNumber(),\n  );\n\n  const precision = Math.pow(10, mint?.decimals || 9);\n  return (amount / precision) * rate;\n}\n\nexport const tryParseKey = (key: string): PublicKey | null => {\n  try {\n    return new PublicKey(key);\n  } catch (error) {\n    return null;\n  }\n};\n\nvar SI_SYMBOL = ['', 'k', 'M', 'G', 'T', 'P', 'E'];\n\nconst abbreviateNumber = (number: number, precision: number) => {\n  let tier = (Math.log10(number) / 3) | 0;\n  let scaled = number;\n  let suffix = SI_SYMBOL[tier];\n  if (tier !== 0) {\n    let scale = Math.pow(10, tier * 3);\n    scaled = number / scale;\n  }\n\n  return scaled.toFixed(precision) + suffix;\n};\n\nexport const formatAmount = (\n  val: number,\n  precision: number = 2,\n  abbr: boolean = true,\n) => (abbr ? abbreviateNumber(val, precision) : val.toFixed(precision));\n\nexport function formatTokenAmount(\n  account?: TokenAccount | number | BN,\n  mint?: MintInfo,\n  rate: number = 1.0,\n  prefix = '',\n  suffix = '',\n  precision = 2,\n  abbr = false,\n): string {\n  if (!account) {\n    return '';\n  }\n\n  return `${[prefix]}${formatAmount(\n    fromLamports(account, mint, rate),\n    precision,\n    abbr,\n  )}${suffix}`;\n}\n\nexport const formatUSD = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n});\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n};\n\nexport const formatPct = new Intl.NumberFormat('en-US', {\n  style: 'percent',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport function convert(\n  account?: TokenAccount | number,\n  mint?: MintInfo,\n  rate: number = 1.0,\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount =\n    typeof account === 'number' ? account : account.info.amount?.toNumber();\n\n  const precision = Math.pow(10, mint?.decimals || 0);\n  let result = (amount / precision) * rate;\n\n  return result;\n}\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n"],"sourceRoot":""}